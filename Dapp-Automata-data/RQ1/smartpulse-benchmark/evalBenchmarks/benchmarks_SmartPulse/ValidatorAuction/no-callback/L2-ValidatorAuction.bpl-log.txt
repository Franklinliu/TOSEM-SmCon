This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 21:41:44,968 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 21:41:44,969 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 21:41:44,980 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 21:41:44,980 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 21:41:44,981 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 21:41:44,983 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 21:41:44,984 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 21:41:44,986 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 21:41:44,987 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 21:41:44,989 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 21:41:44,989 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 21:41:44,991 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 21:41:44,992 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 21:41:44,993 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 21:41:44,994 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 21:41:44,995 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 21:41:44,996 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 21:41:44,998 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 21:41:44,999 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 21:41:45,000 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 21:41:45,001 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 21:41:45,003 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 21:41:45,003 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 21:41:45,003 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 21:41:45,005 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 21:41:45,005 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 21:41:45,006 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 21:41:45,006 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 21:41:45,006 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 21:41:45,007 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 21:41:45,008 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 21:41:45,009 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 21:41:45,010 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 21:41:45,011 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 21:41:45,012 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 21:41:45,012 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 21:41:45,013 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 21:41:45,013 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 21:41:45,013 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 21:41:45,014 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 21:41:45,015 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 21:41:45,015 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 21:41:45,025 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 21:41:45,025 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 21:41:45,026 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 21:41:45,026 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 21:41:45,026 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 21:41:45,026 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 21:41:45,027 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 21:41:45,027 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 21:41:45,027 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 21:41:45,028 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 21:41:45,028 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 21:41:45,029 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 21:41:45,049 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 21:41:45,059 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 21:41:45,061 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 21:41:45,062 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 21:41:45,062 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 21:41:45,064 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L2-ValidatorAuction.bpl
[2020-05-30 21:41:45,064 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/no-callback/L2-ValidatorAuction.bpl'
[2020-05-30 21:41:45,134 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 21:41:45,136 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 21:41:45,137 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 21:41:45,137 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 21:41:45,137 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 21:41:45,150 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,151 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,177 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,177 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,195 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,204 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,213 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,222 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 21:41:45,223 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 21:41:45,223 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 21:41:45,225 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 21:41:45,230 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/1) ...
[2020-05-30 21:41:45,248 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:41:45,254 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:41:45,260 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:41:45,263 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:41:45,264 INFO  L599   opiaSpecLangObserver]: Parsed low==lowestSlotPrice_ValidatorAuction[this] to BinaryExpression[COMPEQ,IdentifierExpression[low,GLOBAL],ArrayAccessExpression[IdentifierExpression[lowestSlotPrice_ValidatorAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,closeAuction_ValidatorAuction>]]]]
[2020-05-30 21:41:45,266 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==( fsum_bid_ValidatorAuction_2_0 - low ) ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],BinaryExpression[ARITHMINUS,IdentifierExpression[fsum_bid_ValidatorAuction_2_0,GLOBAL],IdentifierExpression[low,GLOBAL]]]]
[2020-05-30 21:41:45,267 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(ValidatorAuction.closeAuction, (low == lowestSlotPrice_ValidatorAuction[this]))) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)) - low)))))
[2020-05-30 21:41:45,267 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_closeAuction_ValidatorAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-30 21:41:45,267 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:41:45,267 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:41:45,268 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:41:45,269 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:41:45,269 INFO  L599   opiaSpecLangObserver]: Parsed ( user==msg.sender && auctionState_ValidatorAuction[this]==3 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[auctionState_ValidatorAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]]],IntegerLiteral[3]]]
[2020-05-30 21:41:45,270 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(ValidatorAuction.bid, (user == msg.sender)))) && (<>(finished(ValidatorAuction.withdraw, (user == msg.sender && auctionState_ValidatorAuction[this] == 3))))
[2020-05-30 21:41:45,270 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_bid_ValidatorAuction0) ) && ( <>AP(success_withdraw_ValidatorAuction0) ) )
Executed UtopiaSpecLang
[2020-05-30 21:41:45,280 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:41:45 PropertyContainer
[2020-05-30 21:41:45,280 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 21:41:45,281 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 21:41:45,281 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 21:41:45,281 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 21:41:45,282 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/2) ...
[2020-05-30 21:41:45,282 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:41:45,282 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:41:45,295 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:41:45" (2/2) ...
[2020-05-30 21:41:45,296 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 21:41:45,296 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 21:41:45,296 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 21:41:45,296 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 21:41:45,297 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/2) ...
[2020-05-30 21:41:45,341 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 21:41:45,342 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:41:45,342 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 21:41:45,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 21:41:45,342 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 21:41:45,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 21:41:45,342 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:41:45,342 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:41:45,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLockerInterface
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker
[2020-05-30 21:41:45,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker
[2020-05-30 21:41:45,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker
[2020-05-30 21:41:45,343 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker
[2020-05-30 21:41:45,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker
[2020-05-30 21:41:45,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker
[2020-05-30 21:41:45,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker
[2020-05-30 21:41:45,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:41:45,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction
[2020-05-30 21:41:45,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction
[2020-05-30 21:41:45,344 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction
[2020-05-30 21:41:45,345 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:41:45,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__success
[2020-05-30 21:41:45,346 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__success
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__success
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLocker
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLocker
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 21:41:45,347 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:41:45,348 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,349 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__success
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__fail
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:41:45,350 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:41:45,351 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 21:41:45,352 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__fail
[2020-05-30 21:41:45,353 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__fail
[2020-05-30 21:41:45,353 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__fail
[2020-05-30 21:41:45,353 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:41:45,353 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__fail
[2020-05-30 21:41:45,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 21:41:45,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 21:41:45,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:41:45,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:41:45,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__fail
[2020-05-30 21:41:45,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__fail
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__fail
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__fail
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:41:45,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:41:45,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 21:41:45,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:41:45,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__fail
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__success
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLocker
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLocker
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 21:41:45,360 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 21:41:45,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 21:41:45,489 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,605 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,773 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,902 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,917 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,917 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:41:45,948 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 21:41:45,948 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 21:41:45,950 INFO  L202        PluginConnector]: Adding new model L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:41:45 BoogieIcfgContainer
[2020-05-30 21:41:45,950 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:41:45" (2/2) ...
[2020-05-30 21:41:45,950 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 21:41:45,950 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4a541c42 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:41:45, skipping insertion in model container
[2020-05-30 21:41:45,951 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 21:41:45,951 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 21:41:45,951 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 21:41:45,952 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 21:41:45,952 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/3) ...
[2020-05-30 21:41:45,952 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4126cd3d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:41:45, skipping insertion in model container
[2020-05-30 21:41:45,952 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:41:45" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-30 21:41:45,997 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:41:45 NWAContainer
[2020-05-30 21:41:45,997 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 21:41:45,997 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 21:41:45,997 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 21:41:45,998 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 21:41:45,999 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:41:45" (3/4) ...
[2020-05-30 21:41:45,999 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7e3b8168 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:41:45, skipping insertion in model container
[2020-05-30 21:41:45,999 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:41:45" (4/4) ...
[2020-05-30 21:41:46,003 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-30 21:41:46,006 INFO  L110   BuchiProductObserver]: Initial RCFG 2396 locations, 2919 edges
[2020-05-30 21:41:46,006 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 21:41:46,016 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 21:41:54,708 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 21:41:54,735 INFO  L110   BuchiProductObserver]: BuchiProgram size 21839 locations, 83662 edges
[2020-05-30 21:41:54,735 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:41:54 BoogieIcfgContainer
[2020-05-30 21:41:54,735 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 21:41:54,735 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 21:41:54,736 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 21:41:54,737 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 21:41:54,737 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:41:54" (1/1) ...
[2020-05-30 21:41:55,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLocker_DepositLocker__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 21:41:55,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,170 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,171 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,172 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,172 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,172 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call DepositLockerInterface_DepositLockerInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 21:41:55,218 INFO  L313           BlockEncoder]: Initial Icfg 21839 locations, 83662 edges
[2020-05-30 21:41:55,218 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 21:41:55,219 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 21:41:55,219 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 21:41:55,220 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 21:41:55,266 INFO  L70    emoveInfeasibleEdges]: Removed 629 edges and 44 locations because of local infeasibility
[2020-05-30 21:41:55,298 INFO  L70        RemoveSinkStates]: Removed 18 edges and 4 locations by removing sink states
[2020-05-30 21:41:55,365 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 21:41:55,387 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 21:41:55,410 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 21:41:55,410 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 21:41:55,432 INFO  L313           BlockEncoder]: Encoded RCFG 21671 locations, 82629 edges
[2020-05-30 21:41:55,432 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:41:55 BasicIcfg
[2020-05-30 21:41:55,432 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 21:41:55,433 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 21:41:55,433 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 21:41:55,435 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 21:41:55,435 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,435 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:41:45" (1/6) ...
[2020-05-30 21:41:55,437 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@443e6f82 and model type L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:41:55, skipping insertion in model container
[2020-05-30 21:41:55,437 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,437 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:41:45" (2/6) ...
[2020-05-30 21:41:55,437 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@443e6f82 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:41:55, skipping insertion in model container
[2020-05-30 21:41:55,437 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,437 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:41:45" (3/6) ...
[2020-05-30 21:41:55,437 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@443e6f82 and model type L2-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:41:55, skipping insertion in model container
[2020-05-30 21:41:55,437 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,437 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:41:45" (4/6) ...
[2020-05-30 21:41:55,438 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@443e6f82 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:41:55, skipping insertion in model container
[2020-05-30 21:41:55,438 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,438 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:41:54" (5/6) ...
[2020-05-30 21:41:55,438 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@443e6f82 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 09:41:55, skipping insertion in model container
[2020-05-30 21:41:55,438 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:41:55,438 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:41:55" (6/6) ...
[2020-05-30 21:41:55,439 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-ValidatorAuction.bpl_BEv2
[2020-05-30 21:41:55,471 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 21:41:55,471 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 21:41:55,471 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 21:41:55,471 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 21:41:55,471 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 21:41:55,471 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 21:41:55,471 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 21:41:55,472 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 21:41:55,472 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 21:41:55,663 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21671 states.
[2020-05-30 21:41:56,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:41:56,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:41:56,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:41:56,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:56,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:56,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 21:41:56,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21671 states.
[2020-05-30 21:41:56,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:41:56,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:41:56,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:41:56,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:41:56,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc low;
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:41:56,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:41:56,198 INFO  L82        PathProgramCache]: Analyzing trace with hash -550196085, now seen corresponding path program 1 times
[2020-05-30 21:41:56,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:41:56,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:41:56,272 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:41:56,274 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:41:56,274 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:41:56,278 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:41:56,288 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:41:56,289 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:41:56,290 INFO  L87              Difference]: Start difference. First operand 21671 states. Second operand 4 states.
[2020-05-30 21:42:08,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:08,669 INFO  L93              Difference]: Finished difference Result 15067 states and 36096 transitions.
[2020-05-30 21:42:08,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:42:08,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15067 states and 36096 transitions.
[2020-05-30 21:42:08,784 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:08,923 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15067 states to 15067 states and 36096 transitions.
[2020-05-30 21:42:08,924 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-30 21:42:08,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 467
[2020-05-30 21:42:08,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15067 states and 36096 transitions.
[2020-05-30 21:42:08,971 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:08,971 INFO  L728         BuchiCegarLoop]: Abstraction has 15067 states and 36096 transitions.
[2020-05-30 21:42:09,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15067 states and 36096 transitions.
[2020-05-30 21:42:10,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15067 to 15067.
[2020-05-30 21:42:10,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15067 states.
[2020-05-30 21:42:10,358 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15067 states to 15067 states and 36096 transitions.
[2020-05-30 21:42:10,359 INFO  L751         BuchiCegarLoop]: Abstraction has 15067 states and 36096 transitions.
[2020-05-30 21:42:10,359 INFO  L631         BuchiCegarLoop]: Abstraction has 15067 states and 36096 transitions.
[2020-05-30 21:42:10,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 21:42:10,360 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15067 states and 36096 transitions.
[2020-05-30 21:42:10,389 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:10,389 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:10,389 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:10,392 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:10,392 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc low;
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:10,444 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:10,444 INFO  L82        PathProgramCache]: Analyzing trace with hash -1853818734, now seen corresponding path program 1 times
[2020-05-30 21:42:10,445 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:10,453 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:10,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:42:10,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:10,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:42:10,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:10,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:42:10,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:42:10,472 INFO  L87              Difference]: Start difference. First operand 15067 states and 36096 transitions. cyclomatic complexity: 21053 Second operand 4 states.
[2020-05-30 21:42:14,770 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:14,771 INFO  L93              Difference]: Finished difference Result 14577 states and 23894 transitions.
[2020-05-30 21:42:14,771 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:42:14,771 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14577 states and 23894 transitions.
[2020-05-30 21:42:14,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:14,874 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14577 states to 14577 states and 23894 transitions.
[2020-05-30 21:42:14,874 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 467
[2020-05-30 21:42:14,875 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 467
[2020-05-30 21:42:14,875 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14577 states and 23894 transitions.
[2020-05-30 21:42:14,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:14,887 INFO  L728         BuchiCegarLoop]: Abstraction has 14577 states and 23894 transitions.
[2020-05-30 21:42:14,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14577 states and 23894 transitions.
[2020-05-30 21:42:15,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14577 to 14577.
[2020-05-30 21:42:15,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14577 states.
[2020-05-30 21:42:15,026 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14577 states to 14577 states and 23894 transitions.
[2020-05-30 21:42:15,026 INFO  L751         BuchiCegarLoop]: Abstraction has 14577 states and 23894 transitions.
[2020-05-30 21:42:15,026 INFO  L631         BuchiCegarLoop]: Abstraction has 14577 states and 23894 transitions.
[2020-05-30 21:42:15,026 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 21:42:15,026 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14577 states and 23894 transitions.
[2020-05-30 21:42:15,043 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:15,044 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:15,044 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:15,045 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:15,045 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc low;
[L7]                 havoc user;
[L5032]              assume null == 0;
[L5033]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5033]  RET         call this := FreshRefGenerator__success();
[L5034]              assume now >= 0;
[L5035]              assume DType[this] == ValidatorAuction;
[L5036]              gas := gas - 53000;
[L5037]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5037]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]              assume !revert && gas >= 0;
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND TRUE   choice == 7
[L4955]              gas := gas - 21000;
[L4956]  COND TRUE   gas >= 0
[L4958]              assume msgvalue_MSG >= 0;
[L4959]  CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]               havoc __exception;
[L818]               revert := false;
[L819]   COND FALSE  !(__exception)
[L861]   CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]              Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]  COND TRUE   revert
[L861]   RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == msgsender_MSG;
[L7]                 success_bid_ValidatorAuction0 := true;
[L7]                 success_bid_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(user == msgsender_MSG);
[L4959]  RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND TRUE   choice == 4
[L4982]              gas := gas - 21000;
[L4983]  COND TRUE   gas >= 0
[L4985]              assume msgvalue_MSG == 0;
[L4986]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]              gas := gas - 10516;
[L4651]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L4986]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:15,048 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:15,048 INFO  L82        PathProgramCache]: Analyzing trace with hash 689089029, now seen corresponding path program 1 times
[2020-05-30 21:42:15,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:15,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:15,081 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:42:15,082 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:15,082 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:42:15,082 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:15,082 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:42:15,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:42:15,083 INFO  L87              Difference]: Start difference. First operand 14577 states and 23894 transitions. cyclomatic complexity: 9341 Second operand 4 states.
[2020-05-30 21:42:25,225 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:25,225 INFO  L93              Difference]: Finished difference Result 14332 states and 16251 transitions.
[2020-05-30 21:42:25,225 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:42:25,225 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14332 states and 16251 transitions.
[2020-05-30 21:42:25,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:25,295 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14332 states to 14332 states and 16251 transitions.
[2020-05-30 21:42:25,295 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 467
[2020-05-30 21:42:25,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 467
[2020-05-30 21:42:25,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14332 states and 16251 transitions.
[2020-05-30 21:42:25,305 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:25,305 INFO  L728         BuchiCegarLoop]: Abstraction has 14332 states and 16251 transitions.
[2020-05-30 21:42:25,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14332 states and 16251 transitions.
[2020-05-30 21:42:25,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14332 to 14332.
[2020-05-30 21:42:25,420 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14332 states.
[2020-05-30 21:42:25,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14332 states to 14332 states and 16251 transitions.
[2020-05-30 21:42:25,433 INFO  L751         BuchiCegarLoop]: Abstraction has 14332 states and 16251 transitions.
[2020-05-30 21:42:25,434 INFO  L631         BuchiCegarLoop]: Abstraction has 14332 states and 16251 transitions.
[2020-05-30 21:42:25,434 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 21:42:25,434 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14332 states and 16251 transitions.
[2020-05-30 21:42:25,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:42:25,447 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:25,447 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:25,448 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:25,448 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND TRUE   revert
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND TRUE   revert
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:25,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:25,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -783462314, now seen corresponding path program 1 times
[2020-05-30 21:42:25,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:25,462 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:25,506 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:42:25,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:25,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:42:25,506 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:25,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:42:25,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:42:25,507 INFO  L87              Difference]: Start difference. First operand 14332 states and 16251 transitions. cyclomatic complexity: 1943 Second operand 3 states.
[2020-05-30 21:42:25,985 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:25,986 INFO  L93              Difference]: Finished difference Result 17768 states and 20277 transitions.
[2020-05-30 21:42:25,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:42:25,986 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17768 states and 20277 transitions.
[2020-05-30 21:42:26,025 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:26,088 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17768 states to 17768 states and 20277 transitions.
[2020-05-30 21:42:26,088 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-05-30 21:42:26,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-05-30 21:42:26,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17768 states and 20277 transitions.
[2020-05-30 21:42:26,099 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:26,100 INFO  L728         BuchiCegarLoop]: Abstraction has 17768 states and 20277 transitions.
[2020-05-30 21:42:26,115 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17768 states and 20277 transitions.
[2020-05-30 21:42:26,277 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17768 to 16668.
[2020-05-30 21:42:26,277 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16668 states.
[2020-05-30 21:42:26,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16668 states to 16668 states and 19005 transitions.
[2020-05-30 21:42:26,308 INFO  L751         BuchiCegarLoop]: Abstraction has 16668 states and 19005 transitions.
[2020-05-30 21:42:26,308 INFO  L631         BuchiCegarLoop]: Abstraction has 16668 states and 19005 transitions.
[2020-05-30 21:42:26,308 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 21:42:26,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16668 states and 19005 transitions.
[2020-05-30 21:42:26,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:26,334 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:26,334 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:26,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:26,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND TRUE   !(_auctionDurationInDays_s578 > 0)
[L2772]                    revert := true;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND TRUE   !(auctionState_ValidatorAuction[this] == state_s480)
[L4653]                    revert := true;
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND TRUE   revert
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND TRUE   !(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1)
[L3431]                    revert := true;
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:26,340 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:26,341 INFO  L82        PathProgramCache]: Analyzing trace with hash 854591923, now seen corresponding path program 1 times
[2020-05-30 21:42:26,341 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:26,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:26,399 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-05-30 21:42:26,399 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:26,400 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:42:26,400 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:26,400 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:42:26,400 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:42:26,401 INFO  L87              Difference]: Start difference. First operand 16668 states and 19005 transitions. cyclomatic complexity: 2361 Second operand 3 states.
[2020-05-30 21:42:26,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:26,640 INFO  L93              Difference]: Finished difference Result 18368 states and 20517 transitions.
[2020-05-30 21:42:26,640 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:42:26,640 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18368 states and 20517 transitions.
[2020-05-30 21:42:26,676 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:42:26,725 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18368 states to 17048 states and 18867 transitions.
[2020-05-30 21:42:26,725 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 603
[2020-05-30 21:42:26,726 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 663
[2020-05-30 21:42:26,726 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17048 states and 18867 transitions.
[2020-05-30 21:42:26,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:26,739 INFO  L728         BuchiCegarLoop]: Abstraction has 17048 states and 18867 transitions.
[2020-05-30 21:42:26,757 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17048 states and 18867 transitions.
[2020-05-30 21:42:26,874 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17048 to 15482.
[2020-05-30 21:42:26,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15482 states.
[2020-05-30 21:42:26,889 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15482 states to 15482 states and 16958 transitions.
[2020-05-30 21:42:26,890 INFO  L751         BuchiCegarLoop]: Abstraction has 15482 states and 16958 transitions.
[2020-05-30 21:42:26,890 INFO  L631         BuchiCegarLoop]: Abstraction has 15482 states and 16958 transitions.
[2020-05-30 21:42:26,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 21:42:26,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15482 states and 16958 transitions.
[2020-05-30 21:42:26,905 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:26,905 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:26,905 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:26,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:26,908 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:26,913 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:26,913 INFO  L82        PathProgramCache]: Analyzing trace with hash -1329624478, now seen corresponding path program 1 times
[2020-05-30 21:42:26,914 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:26,942 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:27,111 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-05-30 21:42:27,111 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:27,111 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:42:27,112 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:27,112 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:42:27,112 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:42:27,113 INFO  L87              Difference]: Start difference. First operand 15482 states and 16958 transitions. cyclomatic complexity: 1500 Second operand 12 states.
[2020-05-30 21:42:34,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:34,029 INFO  L93              Difference]: Finished difference Result 16306 states and 18080 transitions.
[2020-05-30 21:42:34,029 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:42:34,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16306 states and 18080 transitions.
[2020-05-30 21:42:34,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:34,117 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16306 states to 16306 states and 18080 transitions.
[2020-05-30 21:42:34,117 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 656
[2020-05-30 21:42:34,117 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 656
[2020-05-30 21:42:34,117 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16306 states and 18080 transitions.
[2020-05-30 21:42:34,127 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:34,127 INFO  L728         BuchiCegarLoop]: Abstraction has 16306 states and 18080 transitions.
[2020-05-30 21:42:34,142 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16306 states and 18080 transitions.
[2020-05-30 21:42:34,245 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16306 to 16139.
[2020-05-30 21:42:34,245 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16139 states.
[2020-05-30 21:42:34,261 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16139 states to 16139 states and 17780 transitions.
[2020-05-30 21:42:34,261 INFO  L751         BuchiCegarLoop]: Abstraction has 16139 states and 17780 transitions.
[2020-05-30 21:42:34,261 INFO  L631         BuchiCegarLoop]: Abstraction has 16139 states and 17780 transitions.
[2020-05-30 21:42:34,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 21:42:34,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16139 states and 17780 transitions.
[2020-05-30 21:42:34,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:34,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:34,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:34,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:34,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:34,287 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:34,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 1114492365, now seen corresponding path program 1 times
[2020-05-30 21:42:34,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:34,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:34,565 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-05-30 21:42:34,565 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:42:34,565 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:42:34,566 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:34,566 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:42:34,566 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:42:34,566 INFO  L87              Difference]: Start difference. First operand 16139 states and 17780 transitions. cyclomatic complexity: 1669 Second operand 12 states.
[2020-05-30 21:42:41,160 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:41,160 INFO  L93              Difference]: Finished difference Result 16267 states and 18020 transitions.
[2020-05-30 21:42:41,160 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:42:41,160 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16267 states and 18020 transitions.
[2020-05-30 21:42:41,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:41,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16267 states to 16267 states and 18020 transitions.
[2020-05-30 21:42:41,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 658
[2020-05-30 21:42:41,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 658
[2020-05-30 21:42:41,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16267 states and 18020 transitions.
[2020-05-30 21:42:41,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:41,225 INFO  L728         BuchiCegarLoop]: Abstraction has 16267 states and 18020 transitions.
[2020-05-30 21:42:41,237 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16267 states and 18020 transitions.
[2020-05-30 21:42:41,329 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16267 to 16007.
[2020-05-30 21:42:41,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16007 states.
[2020-05-30 21:42:41,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16007 states to 16007 states and 17613 transitions.
[2020-05-30 21:42:41,348 INFO  L751         BuchiCegarLoop]: Abstraction has 16007 states and 17613 transitions.
[2020-05-30 21:42:41,348 INFO  L631         BuchiCegarLoop]: Abstraction has 16007 states and 17613 transitions.
[2020-05-30 21:42:41,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 21:42:41,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16007 states and 17613 transitions.
[2020-05-30 21:42:41,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:41,366 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:41,366 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:41,368 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:41,368 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:41,375 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:41,376 INFO  L82        PathProgramCache]: Analyzing trace with hash 337533675, now seen corresponding path program 1 times
[2020-05-30 21:42:41,376 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:41,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:41,558 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-05-30 21:42:41,558 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:42:41,558 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:42:41,559 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:41,559 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:42:41,559 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:42:41,559 INFO  L87              Difference]: Start difference. First operand 16007 states and 17613 transitions. cyclomatic complexity: 1634 Second operand 12 states.
[2020-05-30 21:42:47,262 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:47,262 INFO  L93              Difference]: Finished difference Result 16271 states and 18019 transitions.
[2020-05-30 21:42:47,262 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:42:47,262 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16271 states and 18019 transitions.
[2020-05-30 21:42:47,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:47,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16271 states to 16271 states and 18019 transitions.
[2020-05-30 21:42:47,327 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-05-30 21:42:47,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-05-30 21:42:47,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16271 states and 18019 transitions.
[2020-05-30 21:42:47,336 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:47,336 INFO  L728         BuchiCegarLoop]: Abstraction has 16271 states and 18019 transitions.
[2020-05-30 21:42:47,349 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16271 states and 18019 transitions.
[2020-05-30 21:42:47,431 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16271 to 15677.
[2020-05-30 21:42:47,431 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15677 states.
[2020-05-30 21:42:47,450 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15677 states to 15677 states and 17165 transitions.
[2020-05-30 21:42:47,450 INFO  L751         BuchiCegarLoop]: Abstraction has 15677 states and 17165 transitions.
[2020-05-30 21:42:47,450 INFO  L631         BuchiCegarLoop]: Abstraction has 15677 states and 17165 transitions.
[2020-05-30 21:42:47,450 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 21:42:47,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15677 states and 17165 transitions.
[2020-05-30 21:42:47,468 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:47,468 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:47,468 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:47,470 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:47,470 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:47,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:47,477 INFO  L82        PathProgramCache]: Analyzing trace with hash -1673673632, now seen corresponding path program 1 times
[2020-05-30 21:42:47,477 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:47,496 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:47,641 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 1 proven. 30 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 21:42:47,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:42:47,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:42:47,642 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:47,642 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:42:47,642 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:42:47,642 INFO  L87              Difference]: Start difference. First operand 15677 states and 17165 transitions. cyclomatic complexity: 1514 Second operand 12 states.
[2020-05-30 21:42:55,511 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:55,512 INFO  L93              Difference]: Finished difference Result 16023 states and 17659 transitions.
[2020-05-30 21:42:55,512 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:42:55,512 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16023 states and 17659 transitions.
[2020-05-30 21:42:55,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:55,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16023 states to 16023 states and 17659 transitions.
[2020-05-30 21:42:55,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-05-30 21:42:55,584 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-05-30 21:42:55,584 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16023 states and 17659 transitions.
[2020-05-30 21:42:55,592 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:55,592 INFO  L728         BuchiCegarLoop]: Abstraction has 16023 states and 17659 transitions.
[2020-05-30 21:42:55,606 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16023 states and 17659 transitions.
[2020-05-30 21:42:55,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16023 to 15681.
[2020-05-30 21:42:55,686 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15681 states.
[2020-05-30 21:42:55,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15681 states to 15681 states and 17172 transitions.
[2020-05-30 21:42:55,705 INFO  L751         BuchiCegarLoop]: Abstraction has 15681 states and 17172 transitions.
[2020-05-30 21:42:55,705 INFO  L631         BuchiCegarLoop]: Abstraction has 15681 states and 17172 transitions.
[2020-05-30 21:42:55,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 21:42:55,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15681 states and 17172 transitions.
[2020-05-30 21:42:55,722 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:55,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:55,723 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:55,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:55,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND TRUE   __exception
[L756]                     __tmp__Balance := Balance;
[L757]                     __tmp__DType := DType;
[L758]                     __tmp__Alloc := Alloc;
[L759]                     __tmp__balance_ADDR := balance_ADDR;
[L760]                     __tmp__M_Ref_bool_canWithdraw0 := M_Ref_bool_canWithdraw0;
[L761]                     __tmp__sum_canWithdraw0 := sum_canWithdraw0;
[L762]                     __tmp__M_Ref_bool_whitelist1 := M_Ref_bool_whitelist1;
[L763]                     __tmp__sum_whitelist1 := sum_whitelist1;
[L764]                     __tmp__M_Ref_int_bids2 := M_Ref_int_bids2;
[L765]                     __tmp__sum_bids2 := sum_bids2;
[L766]                     __tmp__M_int_Ref := M_int_Ref;
[L767]                     __tmp__sum := sum;
[L768]                     __tmp__Length := Length;
[L769]                     __tmp__now := now;
[L770]                     __tmp__owner_Ownable := owner_Ownable;
[L771]                     __tmp__initialized_DepositLocker := initialized_DepositLocker;
[L772]                     __tmp__deposited_DepositLocker := deposited_DepositLocker;
[L773]                     __tmp__slasher_DepositLocker := slasher_DepositLocker;
[L774]                     __tmp__depositorsProxy_DepositLocker := depositorsProxy_DepositLocker;
[L775]                     __tmp__releaseTimestamp_DepositLocker := releaseTimestamp_DepositLocker;
[L776]                     __tmp__canWithdraw_DepositLocker := canWithdraw_DepositLocker;
[L777]                     __tmp__numberOfDepositors_DepositLocker := numberOfDepositors_DepositLocker;
[L778]                     __tmp__valuePerDepositor_DepositLocker := valuePerDepositor_DepositLocker;
[L779]                     __tmp__auctionDurationInDays_ValidatorAuction := auctionDurationInDays_ValidatorAuction;
[L780]                     __tmp__startPrice_ValidatorAuction := startPrice_ValidatorAuction;
[L781]                     __tmp__minimalNumberOfParticipants_ValidatorAuction := minimalNumberOfParticipants_ValidatorAuction;
[L782]                     __tmp__maximalNumberOfParticipants_ValidatorAuction := maximalNumberOfParticipants_ValidatorAuction;
[L783]                     __tmp__auctionState_ValidatorAuction := auctionState_ValidatorAuction;
[L784]                     __tmp__depositLocker_ValidatorAuction := depositLocker_ValidatorAuction;
[L785]                     __tmp__whitelist_ValidatorAuction := whitelist_ValidatorAuction;
[L786]                     __tmp__bids_ValidatorAuction := bids_ValidatorAuction;
[L787]                     __tmp__bidders_ValidatorAuction := bidders_ValidatorAuction;
[L788]                     __tmp__startTime_ValidatorAuction := startTime_ValidatorAuction;
[L789]                     __tmp__closeTime_ValidatorAuction := closeTime_ValidatorAuction;
[L790]                     __tmp__lowestSlotPrice_ValidatorAuction := lowestSlotPrice_ValidatorAuction;
[L791]         CALL        call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2849]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1837]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1817]                    assume msgsender_MSG != null;
[L1818]                    __tmp__Balance[this] := 0;
[L1819]                    __tmp__owner_Ownable[this] := null;
[L1820]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1837]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1838]        COND FALSE  !(revert)
[L2849]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2850]        COND FALSE  !(revert)
[L2855]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2622]                    assume msgsender_MSG != null;
[L2623]                    __tmp__Balance[this] := 0;
[L2624]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := 0;
[L2625]                    __tmp__startPrice_ValidatorAuction[this] := 0;
[L2626]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2627]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2628]        CALL        call __var_10 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2628]        RET         call __var_10 := FreshRefGenerator__fail();
[L2629]        COND FALSE  !(revert)
[L2634]                    __tmp__whitelist_ValidatorAuction[this] := __var_10;
[L2635]                    __tmp__M_Ref_bool_whitelist1[__tmp__whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2636]        CALL        call __var_11 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2636]        RET         call __var_11 := FreshRefGenerator__fail();
[L2637]        COND FALSE  !(revert)
[L2642]                    __tmp__bids_ValidatorAuction[this] := __var_11;
[L2643]                    __tmp__M_Ref_int_bids2[__tmp__bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2644]                    __tmp__sum_bids2[__tmp__bids_ValidatorAuction[this]] := 0;
[L2645]        CALL        call __var_12 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2645]        RET         call __var_12 := FreshRefGenerator__fail();
[L2646]        COND FALSE  !(revert)
[L2651]                    __tmp__bidders_ValidatorAuction[this] := __var_12;
[L2652]                    assume __tmp__Length[__tmp__bidders_ValidatorAuction[this]] == 0;
[L2653]                    __tmp__startTime_ValidatorAuction[this] := 0;
[L2654]                    __tmp__closeTime_ValidatorAuction[this] := 0;
[L2655]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := 0;
[L2656]                    assume _auctionDurationInDays_s578 >= 0;
[L2657]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2663]                    assume _auctionDurationInDays_s578 >= 0;
[L2664]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2670]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2671]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2677]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2678]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2684]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2685]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2686]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2692]                    assume _startPriceInWei_s578 >= 0;
[L2693]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2699]                    assume __tmp__startPrice_ValidatorAuction[this] >= 0;
[L2700]                    assume _startPriceInWei_s578 >= 0;
[L2701]                    __tmp__startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2702]                    assume __tmp__auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2703]                    assume _auctionDurationInDays_s578 >= 0;
[L2704]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2705]                    assume __tmp__maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2706]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2707]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2708]                    assume __tmp__minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2709]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2710]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2711]                    __tmp__depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2712]                    assume __tmp__lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2713]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2714]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2715]                    assume __var_9 >= 0;
[L2716]                    __tmp__auctionState_ValidatorAuction[this] := 0;
[L2855]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2856]        COND FALSE  !(revert)
[L791]         RET         call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L792]                     assume revert || gas < 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:55,730 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:55,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -1434676093, now seen corresponding path program 1 times
[2020-05-30 21:42:55,731 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:55,749 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:55,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 26 trivial. 0 not checked.
[2020-05-30 21:42:55,845 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:55,845 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:42:55,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:55,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:42:55,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:42:55,846 INFO  L87              Difference]: Start difference. First operand 15681 states and 17172 transitions. cyclomatic complexity: 1517 Second operand 4 states.
[2020-05-30 21:42:57,210 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:57,210 INFO  L93              Difference]: Finished difference Result 18181 states and 20396 transitions.
[2020-05-30 21:42:57,210 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 21:42:57,211 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18181 states and 20396 transitions.
[2020-05-30 21:42:57,239 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:42:57,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18181 states to 18017 states and 20230 transitions.
[2020-05-30 21:42:57,279 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 777
[2020-05-30 21:42:57,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 777
[2020-05-30 21:42:57,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18017 states and 20230 transitions.
[2020-05-30 21:42:57,289 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:57,289 INFO  L728         BuchiCegarLoop]: Abstraction has 18017 states and 20230 transitions.
[2020-05-30 21:42:57,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18017 states and 20230 transitions.
[2020-05-30 21:42:57,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18017 to 15559.
[2020-05-30 21:42:57,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15559 states.
[2020-05-30 21:42:57,403 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15559 states to 15559 states and 17041 transitions.
[2020-05-30 21:42:57,404 INFO  L751         BuchiCegarLoop]: Abstraction has 15559 states and 17041 transitions.
[2020-05-30 21:42:57,404 INFO  L631         BuchiCegarLoop]: Abstraction has 15559 states and 17041 transitions.
[2020-05-30 21:42:57,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 21:42:57,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15559 states and 17041 transitions.
[2020-05-30 21:42:57,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:57,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:57,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:57,422 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:57,422 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:57,428 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:57,428 INFO  L82        PathProgramCache]: Analyzing trace with hash -543368314, now seen corresponding path program 1 times
[2020-05-30 21:42:57,429 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:57,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:57,565 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-30 21:42:57,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:57,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:42:57,566 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:57,566 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:42:57,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:42:57,567 INFO  L87              Difference]: Start difference. First operand 15559 states and 17041 transitions. cyclomatic complexity: 1508 Second operand 4 states.
[2020-05-30 21:42:57,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:57,637 INFO  L93              Difference]: Finished difference Result 15639 states and 17125 transitions.
[2020-05-30 21:42:57,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:42:57,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15639 states and 17125 transitions.
[2020-05-30 21:42:57,663 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:57,694 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15639 states to 15623 states and 17109 transitions.
[2020-05-30 21:42:57,694 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 611
[2020-05-30 21:42:57,694 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 611
[2020-05-30 21:42:57,694 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15623 states and 17109 transitions.
[2020-05-30 21:42:57,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:57,705 INFO  L728         BuchiCegarLoop]: Abstraction has 15623 states and 17109 transitions.
[2020-05-30 21:42:57,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15623 states and 17109 transitions.
[2020-05-30 21:42:57,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15623 to 15623.
[2020-05-30 21:42:57,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15623 states.
[2020-05-30 21:42:57,808 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15623 states to 15623 states and 17109 transitions.
[2020-05-30 21:42:57,808 INFO  L751         BuchiCegarLoop]: Abstraction has 15623 states and 17109 transitions.
[2020-05-30 21:42:57,808 INFO  L631         BuchiCegarLoop]: Abstraction has 15623 states and 17109 transitions.
[2020-05-30 21:42:57,808 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 21:42:57,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15623 states and 17109 transitions.
[2020-05-30 21:42:57,825 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:57,825 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:57,825 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:57,827 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:57,827 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:57,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:57,833 INFO  L82        PathProgramCache]: Analyzing trace with hash -669326750, now seen corresponding path program 1 times
[2020-05-30 21:42:57,833 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:57,857 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:57,984 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-05-30 21:42:57,984 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:57,984 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:42:57,985 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:57,985 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:42:57,986 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:42:57,986 INFO  L87              Difference]: Start difference. First operand 15623 states and 17109 transitions. cyclomatic complexity: 1512 Second operand 8 states.
[2020-05-30 21:42:58,604 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:58,604 INFO  L93              Difference]: Finished difference Result 15871 states and 17373 transitions.
[2020-05-30 21:42:58,604 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:42:58,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15871 states and 17373 transitions.
[2020-05-30 21:42:58,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:58,664 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15871 states to 15719 states and 17209 transitions.
[2020-05-30 21:42:58,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 622
[2020-05-30 21:42:58,665 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 622
[2020-05-30 21:42:58,665 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15719 states and 17209 transitions.
[2020-05-30 21:42:58,672 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:58,672 INFO  L728         BuchiCegarLoop]: Abstraction has 15719 states and 17209 transitions.
[2020-05-30 21:42:58,684 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15719 states and 17209 transitions.
[2020-05-30 21:42:58,759 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15719 to 15655.
[2020-05-30 21:42:58,759 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15655 states.
[2020-05-30 21:42:58,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15655 states to 15655 states and 17141 transitions.
[2020-05-30 21:42:58,776 INFO  L751         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:42:58,776 INFO  L631         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:42:58,776 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 21:42:58,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15655 states and 17141 transitions.
[2020-05-30 21:42:58,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:58,793 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:58,793 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:58,795 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:58,795 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:58,801 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:58,801 INFO  L82        PathProgramCache]: Analyzing trace with hash 1700856543, now seen corresponding path program 1 times
[2020-05-30 21:42:58,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:58,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:58,995 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-05-30 21:42:58,996 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:58,996 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:42:58,996 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:58,996 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:42:58,996 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:42:58,997 INFO  L87              Difference]: Start difference. First operand 15655 states and 17141 transitions. cyclomatic complexity: 1512 Second operand 8 states.
[2020-05-30 21:42:59,390 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:42:59,390 INFO  L93              Difference]: Finished difference Result 15903 states and 17405 transitions.
[2020-05-30 21:42:59,390 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:42:59,390 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15903 states and 17405 transitions.
[2020-05-30 21:42:59,414 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:59,443 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15903 states to 15751 states and 17241 transitions.
[2020-05-30 21:42:59,443 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-05-30 21:42:59,443 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-05-30 21:42:59,443 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15751 states and 17241 transitions.
[2020-05-30 21:42:59,451 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:42:59,451 INFO  L728         BuchiCegarLoop]: Abstraction has 15751 states and 17241 transitions.
[2020-05-30 21:42:59,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15751 states and 17241 transitions.
[2020-05-30 21:42:59,536 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15751 to 15655.
[2020-05-30 21:42:59,536 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15655 states.
[2020-05-30 21:42:59,553 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15655 states to 15655 states and 17141 transitions.
[2020-05-30 21:42:59,554 INFO  L751         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:42:59,554 INFO  L631         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:42:59,554 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 21:42:59,554 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15655 states and 17141 transitions.
[2020-05-30 21:42:59,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:42:59,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:42:59,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:42:59,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:42:59,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:42:59,578 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:42:59,578 INFO  L82        PathProgramCache]: Analyzing trace with hash 505246523, now seen corresponding path program 1 times
[2020-05-30 21:42:59,578 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:42:59,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:42:59,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-05-30 21:42:59,726 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:42:59,726 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:42:59,727 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:42:59,727 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:42:59,727 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:42:59,727 INFO  L87              Difference]: Start difference. First operand 15655 states and 17141 transitions. cyclomatic complexity: 1512 Second operand 8 states.
[2020-05-30 21:43:00,571 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:00,571 INFO  L93              Difference]: Finished difference Result 15903 states and 17405 transitions.
[2020-05-30 21:43:00,572 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:43:00,572 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15903 states and 17405 transitions.
[2020-05-30 21:43:00,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:43:00,634 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15903 states to 15751 states and 17241 transitions.
[2020-05-30 21:43:00,634 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-05-30 21:43:00,634 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-05-30 21:43:00,634 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15751 states and 17241 transitions.
[2020-05-30 21:43:00,642 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:00,642 INFO  L728         BuchiCegarLoop]: Abstraction has 15751 states and 17241 transitions.
[2020-05-30 21:43:00,654 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15751 states and 17241 transitions.
[2020-05-30 21:43:00,728 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15751 to 15655.
[2020-05-30 21:43:00,728 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 15655 states.
[2020-05-30 21:43:00,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 15655 states to 15655 states and 17141 transitions.
[2020-05-30 21:43:00,745 INFO  L751         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:43:00,745 INFO  L631         BuchiCegarLoop]: Abstraction has 15655 states and 17141 transitions.
[2020-05-30 21:43:00,745 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 21:43:00,745 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 15655 states and 17141 transitions.
[2020-05-30 21:43:00,762 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 21:43:00,762 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:00,762 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:00,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:00,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:00,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:00,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -641875703, now seen corresponding path program 1 times
[2020-05-30 21:43:00,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:00,791 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:00,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 21:43:00,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:00,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:43:00,923 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:00,923 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:43:00,923 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:43:00,923 INFO  L87              Difference]: Start difference. First operand 15655 states and 17141 transitions. cyclomatic complexity: 1512 Second operand 12 states.
[2020-05-30 21:43:08,596 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:08,596 INFO  L93              Difference]: Finished difference Result 17730 states and 19830 transitions.
[2020-05-30 21:43:08,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:43:08,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17730 states and 19830 transitions.
[2020-05-30 21:43:08,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:43:08,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17730 states to 17730 states and 19830 transitions.
[2020-05-30 21:43:08,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 721
[2020-05-30 21:43:08,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 721
[2020-05-30 21:43:08,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17730 states and 19830 transitions.
[2020-05-30 21:43:08,687 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:08,687 INFO  L728         BuchiCegarLoop]: Abstraction has 17730 states and 19830 transitions.
[2020-05-30 21:43:08,700 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17730 states and 19830 transitions.
[2020-05-30 21:43:08,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17730 to 17530.
[2020-05-30 21:43:08,802 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17530 states.
[2020-05-30 21:43:08,822 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17530 states to 17530 states and 19591 transitions.
[2020-05-30 21:43:08,822 INFO  L751         BuchiCegarLoop]: Abstraction has 17530 states and 19591 transitions.
[2020-05-30 21:43:08,822 INFO  L631         BuchiCegarLoop]: Abstraction has 17530 states and 19591 transitions.
[2020-05-30 21:43:08,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 21:43:08,823 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17530 states and 19591 transitions.
[2020-05-30 21:43:08,839 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:43:08,839 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:08,839 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:08,841 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:08,841 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:08,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:08,845 INFO  L82        PathProgramCache]: Analyzing trace with hash 1417684582, now seen corresponding path program 1 times
[2020-05-30 21:43:08,846 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:08,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:09,001 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:43:09,001 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:09,001 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:43:09,002 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:09,002 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:43:09,002 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:43:09,002 INFO  L87              Difference]: Start difference. First operand 17530 states and 19591 transitions. cyclomatic complexity: 2087 Second operand 13 states.
[2020-05-30 21:43:19,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:19,685 INFO  L93              Difference]: Finished difference Result 19737 states and 22497 transitions.
[2020-05-30 21:43:19,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:43:19,685 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19737 states and 22497 transitions.
[2020-05-30 21:43:19,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:43:19,781 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19737 states to 19737 states and 22497 transitions.
[2020-05-30 21:43:19,781 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 796
[2020-05-30 21:43:19,782 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 796
[2020-05-30 21:43:19,782 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19737 states and 22497 transitions.
[2020-05-30 21:43:19,794 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:19,794 INFO  L728         BuchiCegarLoop]: Abstraction has 19737 states and 22497 transitions.
[2020-05-30 21:43:19,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19737 states and 22497 transitions.
[2020-05-30 21:43:19,917 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19737 to 19480.
[2020-05-30 21:43:19,917 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19480 states.
[2020-05-30 21:43:19,942 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19480 states to 19480 states and 22186 transitions.
[2020-05-30 21:43:19,942 INFO  L751         BuchiCegarLoop]: Abstraction has 19480 states and 22186 transitions.
[2020-05-30 21:43:19,942 INFO  L631         BuchiCegarLoop]: Abstraction has 19480 states and 22186 transitions.
[2020-05-30 21:43:19,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 21:43:19,943 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19480 states and 22186 transitions.
[2020-05-30 21:43:19,963 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:43:19,964 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:19,964 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:19,966 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:19,966 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:19,973 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:19,974 INFO  L82        PathProgramCache]: Analyzing trace with hash 1972256420, now seen corresponding path program 1 times
[2020-05-30 21:43:19,974 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:19,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:20,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 141 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-05-30 21:43:20,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:20,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:43:20,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:20,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:43:20,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:43:20,184 INFO  L87              Difference]: Start difference. First operand 19480 states and 22186 transitions. cyclomatic complexity: 2732 Second operand 8 states.
[2020-05-30 21:43:22,537 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:22,537 INFO  L93              Difference]: Finished difference Result 19696 states and 22329 transitions.
[2020-05-30 21:43:22,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:43:22,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19696 states and 22329 transitions.
[2020-05-30 21:43:22,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:43:22,639 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19696 states to 19408 states and 22029 transitions.
[2020-05-30 21:43:22,640 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 758
[2020-05-30 21:43:22,640 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 758
[2020-05-30 21:43:22,640 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19408 states and 22029 transitions.
[2020-05-30 21:43:22,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:22,740 INFO  L728         BuchiCegarLoop]: Abstraction has 19408 states and 22029 transitions.
[2020-05-30 21:43:22,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19408 states and 22029 transitions.
[2020-05-30 21:43:22,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19408 to 19262.
[2020-05-30 21:43:22,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19262 states.
[2020-05-30 21:43:22,871 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19262 states to 19262 states and 21877 transitions.
[2020-05-30 21:43:22,871 INFO  L751         BuchiCegarLoop]: Abstraction has 19262 states and 21877 transitions.
[2020-05-30 21:43:22,871 INFO  L631         BuchiCegarLoop]: Abstraction has 19262 states and 21877 transitions.
[2020-05-30 21:43:22,872 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 21:43:22,872 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19262 states and 21877 transitions.
[2020-05-30 21:43:22,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 21:43:22,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:22,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:22,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:22,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:22,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:22,912 INFO  L82        PathProgramCache]: Analyzing trace with hash 1801650308, now seen corresponding path program 1 times
[2020-05-30 21:43:22,913 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:22,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:23,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-05-30 21:43:23,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:23,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:43:23,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:23,064 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:43:23,064 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:43:23,064 INFO  L87              Difference]: Start difference. First operand 19262 states and 21877 transitions. cyclomatic complexity: 2641 Second operand 13 states.
[2020-05-30 21:43:33,558 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:33,558 INFO  L93              Difference]: Finished difference Result 21506 states and 24739 transitions.
[2020-05-30 21:43:33,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:43:33,559 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21506 states and 24739 transitions.
[2020-05-30 21:43:33,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:33,639 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21506 states to 21506 states and 24739 transitions.
[2020-05-30 21:43:33,639 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 840
[2020-05-30 21:43:33,640 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 840
[2020-05-30 21:43:33,640 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21506 states and 24739 transitions.
[2020-05-30 21:43:33,652 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:33,652 INFO  L728         BuchiCegarLoop]: Abstraction has 21506 states and 24739 transitions.
[2020-05-30 21:43:33,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21506 states and 24739 transitions.
[2020-05-30 21:43:33,777 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21506 to 21094.
[2020-05-30 21:43:33,777 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21094 states.
[2020-05-30 21:43:33,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21094 states to 21094 states and 24265 transitions.
[2020-05-30 21:43:33,806 INFO  L751         BuchiCegarLoop]: Abstraction has 21094 states and 24265 transitions.
[2020-05-30 21:43:33,806 INFO  L631         BuchiCegarLoop]: Abstraction has 21094 states and 24265 transitions.
[2020-05-30 21:43:33,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 21:43:33,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21094 states and 24265 transitions.
[2020-05-30 21:43:33,829 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:33,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:33,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:33,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:33,831 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:33,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:33,836 INFO  L82        PathProgramCache]: Analyzing trace with hash 944027341, now seen corresponding path program 1 times
[2020-05-30 21:43:33,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:33,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:34,027 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-05-30 21:43:34,027 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:34,027 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:43:34,028 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:34,028 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:43:34,028 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:43:34,028 INFO  L87              Difference]: Start difference. First operand 21094 states and 24265 transitions. cyclomatic complexity: 3197 Second operand 3 states.
[2020-05-30 21:43:34,115 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:34,116 INFO  L93              Difference]: Finished difference Result 21158 states and 24377 transitions.
[2020-05-30 21:43:34,116 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:43:34,116 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21158 states and 24377 transitions.
[2020-05-30 21:43:34,153 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:34,200 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21158 states to 21158 states and 24377 transitions.
[2020-05-30 21:43:34,201 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 804
[2020-05-30 21:43:34,201 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 804
[2020-05-30 21:43:34,201 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21158 states and 24377 transitions.
[2020-05-30 21:43:34,213 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:34,213 INFO  L728         BuchiCegarLoop]: Abstraction has 21158 states and 24377 transitions.
[2020-05-30 21:43:34,227 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21158 states and 24377 transitions.
[2020-05-30 21:43:34,340 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21158 to 21142.
[2020-05-30 21:43:34,341 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21142 states.
[2020-05-30 21:43:34,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21142 states to 21142 states and 24337 transitions.
[2020-05-30 21:43:34,371 INFO  L751         BuchiCegarLoop]: Abstraction has 21142 states and 24337 transitions.
[2020-05-30 21:43:34,371 INFO  L631         BuchiCegarLoop]: Abstraction has 21142 states and 24337 transitions.
[2020-05-30 21:43:34,371 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 21:43:34,371 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21142 states and 24337 transitions.
[2020-05-30 21:43:34,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:34,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:34,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:34,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:34,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:34,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:34,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -737379677, now seen corresponding path program 1 times
[2020-05-30 21:43:34,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:34,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:34,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 2 proven. 32 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-05-30 21:43:34,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:43:34,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:43:34,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:34,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:43:34,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:43:34,606 INFO  L87              Difference]: Start difference. First operand 21142 states and 24337 transitions. cyclomatic complexity: 3221 Second operand 13 states.
[2020-05-30 21:43:41,398 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:41,398 INFO  L93              Difference]: Finished difference Result 21154 states and 24288 transitions.
[2020-05-30 21:43:41,399 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:43:41,399 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21154 states and 24288 transitions.
[2020-05-30 21:43:41,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:41,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21154 states to 21130 states and 24256 transitions.
[2020-05-30 21:43:41,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 820
[2020-05-30 21:43:41,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 820
[2020-05-30 21:43:41,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21130 states and 24256 transitions.
[2020-05-30 21:43:41,516 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:41,516 INFO  L728         BuchiCegarLoop]: Abstraction has 21130 states and 24256 transitions.
[2020-05-30 21:43:41,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21130 states and 24256 transitions.
[2020-05-30 21:43:41,649 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21130 to 20743.
[2020-05-30 21:43:41,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20743 states.
[2020-05-30 21:43:41,679 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20743 states to 20743 states and 23825 transitions.
[2020-05-30 21:43:41,680 INFO  L751         BuchiCegarLoop]: Abstraction has 20743 states and 23825 transitions.
[2020-05-30 21:43:41,680 INFO  L631         BuchiCegarLoop]: Abstraction has 20743 states and 23825 transitions.
[2020-05-30 21:43:41,680 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 21:43:41,680 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20743 states and 23825 transitions.
[2020-05-30 21:43:41,703 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 21:43:41,703 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:41,703 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:41,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:41,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:41,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:41,711 INFO  L82        PathProgramCache]: Analyzing trace with hash 1564217729, now seen corresponding path program 1 times
[2020-05-30 21:43:41,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:41,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:41,931 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-30 21:43:41,931 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:43:41,932 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:43:41,932 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:41,932 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:43:41,932 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:43:41,932 INFO  L87              Difference]: Start difference. First operand 20743 states and 23825 transitions. cyclomatic complexity: 3108 Second operand 13 states.
[2020-05-30 21:43:54,710 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:43:54,710 INFO  L93              Difference]: Finished difference Result 25706 states and 30532 transitions.
[2020-05-30 21:43:54,711 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 21:43:54,711 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25706 states and 30532 transitions.
[2020-05-30 21:43:54,759 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 32
[2020-05-30 21:43:54,819 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25706 states to 22217 states and 25839 transitions.
[2020-05-30 21:43:54,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 891
[2020-05-30 21:43:54,819 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 891
[2020-05-30 21:43:54,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22217 states and 25839 transitions.
[2020-05-30 21:43:54,833 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:43:54,834 INFO  L728         BuchiCegarLoop]: Abstraction has 22217 states and 25839 transitions.
[2020-05-30 21:43:54,847 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22217 states and 25839 transitions.
[2020-05-30 21:43:54,961 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22217 to 20543.
[2020-05-30 21:43:54,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20543 states.
[2020-05-30 21:43:54,991 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20543 states to 20543 states and 23483 transitions.
[2020-05-30 21:43:54,991 INFO  L751         BuchiCegarLoop]: Abstraction has 20543 states and 23483 transitions.
[2020-05-30 21:43:54,991 INFO  L631         BuchiCegarLoop]: Abstraction has 20543 states and 23483 transitions.
[2020-05-30 21:43:54,991 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 21:43:54,992 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20543 states and 23483 transitions.
[2020-05-30 21:43:55,013 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:43:55,014 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:43:55,014 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:43:55,016 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:43:55,016 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(low == lowestSlotPrice_ValidatorAuction[this]);
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(low == lowestSlotPrice_ValidatorAuction[this]);
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:43:55,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:43:55,022 INFO  L82        PathProgramCache]: Analyzing trace with hash -1184851387, now seen corresponding path program 1 times
[2020-05-30 21:43:55,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:43:55,045 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:43:55,261 INFO  L134       CoverageAnalysis]: Checked inductivity of 210 backedges. 71 proven. 2 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-05-30 21:43:55,262 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:43:55,262 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:43:55,262 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:43:55,262 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:43:55,262 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:43:55,263 INFO  L87              Difference]: Start difference. First operand 20543 states and 23483 transitions. cyclomatic complexity: 2972 Second operand 13 states.
[2020-05-30 21:44:02,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:44:02,378 INFO  L93              Difference]: Finished difference Result 20607 states and 23463 transitions.
[2020-05-30 21:44:02,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:44:02,379 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20607 states and 23463 transitions.
[2020-05-30 21:44:02,421 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:02,477 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20607 states to 20583 states and 23431 transitions.
[2020-05-30 21:44:02,477 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 833
[2020-05-30 21:44:02,477 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 833
[2020-05-30 21:44:02,477 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20583 states and 23431 transitions.
[2020-05-30 21:44:02,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:44:02,491 INFO  L728         BuchiCegarLoop]: Abstraction has 20583 states and 23431 transitions.
[2020-05-30 21:44:02,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20583 states and 23431 transitions.
[2020-05-30 21:44:02,611 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20583 to 20134.
[2020-05-30 21:44:02,611 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20134 states.
[2020-05-30 21:44:02,640 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20134 states to 20134 states and 22930 transitions.
[2020-05-30 21:44:02,640 INFO  L751         BuchiCegarLoop]: Abstraction has 20134 states and 22930 transitions.
[2020-05-30 21:44:02,641 INFO  L631         BuchiCegarLoop]: Abstraction has 20134 states and 22930 transitions.
[2020-05-30 21:44:02,641 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 21:44:02,641 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20134 states and 22930 transitions.
[2020-05-30 21:44:02,662 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:02,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:44:02,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:44:02,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:44:02,664 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:44:02,669 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:44:02,670 INFO  L82        PathProgramCache]: Analyzing trace with hash -801308482, now seen corresponding path program 1 times
[2020-05-30 21:44:02,670 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:44:02,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:44:02,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 118 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 116 trivial. 0 not checked.
[2020-05-30 21:44:02,910 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:44:02,910 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 21:44:02,910 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:44:02,911 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 21:44:02,911 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 21:44:02,911 INFO  L87              Difference]: Start difference. First operand 20134 states and 22930 transitions. cyclomatic complexity: 2828 Second operand 10 states.
[2020-05-30 21:44:09,877 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:44:09,877 INFO  L93              Difference]: Finished difference Result 20399 states and 23328 transitions.
[2020-05-30 21:44:09,877 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 21:44:09,877 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20399 states and 23328 transitions.
[2020-05-30 21:44:09,921 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:09,979 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20399 states to 20399 states and 23328 transitions.
[2020-05-30 21:44:09,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 813
[2020-05-30 21:44:09,980 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 813
[2020-05-30 21:44:09,980 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20399 states and 23328 transitions.
[2020-05-30 21:44:09,993 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:44:09,993 INFO  L728         BuchiCegarLoop]: Abstraction has 20399 states and 23328 transitions.
[2020-05-30 21:44:10,008 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20399 states and 23328 transitions.
[2020-05-30 21:44:10,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20399 to 20207.
[2020-05-30 21:44:10,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20207 states.
[2020-05-30 21:44:10,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20207 states to 20207 states and 23101 transitions.
[2020-05-30 21:44:10,149 INFO  L751         BuchiCegarLoop]: Abstraction has 20207 states and 23101 transitions.
[2020-05-30 21:44:10,149 INFO  L631         BuchiCegarLoop]: Abstraction has 20207 states and 23101 transitions.
[2020-05-30 21:44:10,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 21:44:10,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20207 states and 23101 transitions.
[2020-05-30 21:44:10,170 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:10,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:44:10,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:44:10,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:44:10,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:44:10,178 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:44:10,179 INFO  L82        PathProgramCache]: Analyzing trace with hash 206481945, now seen corresponding path program 1 times
[2020-05-30 21:44:10,179 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:44:10,202 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:44:10,399 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 36 proven. 35 refuted. 0 times theorem prover too weak. 152 trivial. 0 not checked.
[2020-05-30 21:44:10,399 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:44:10,399 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:44:10,400 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:44:10,400 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:44:10,400 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:44:10,400 INFO  L87              Difference]: Start difference. First operand 20207 states and 23101 transitions. cyclomatic complexity: 2929 Second operand 11 states.
[2020-05-30 21:44:17,535 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:44:17,536 INFO  L93              Difference]: Finished difference Result 20509 states and 23467 transitions.
[2020-05-30 21:44:17,536 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:44:17,536 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20509 states and 23467 transitions.
[2020-05-30 21:44:17,586 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:17,645 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20509 states to 20461 states and 23403 transitions.
[2020-05-30 21:44:17,645 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 828
[2020-05-30 21:44:17,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 828
[2020-05-30 21:44:17,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20461 states and 23403 transitions.
[2020-05-30 21:44:17,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:44:17,660 INFO  L728         BuchiCegarLoop]: Abstraction has 20461 states and 23403 transitions.
[2020-05-30 21:44:17,675 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20461 states and 23403 transitions.
[2020-05-30 21:44:17,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20461 to 20033.
[2020-05-30 21:44:17,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20033 states.
[2020-05-30 21:44:17,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20033 states to 20033 states and 22919 transitions.
[2020-05-30 21:44:17,816 INFO  L751         BuchiCegarLoop]: Abstraction has 20033 states and 22919 transitions.
[2020-05-30 21:44:17,816 INFO  L631         BuchiCegarLoop]: Abstraction has 20033 states and 22919 transitions.
[2020-05-30 21:44:17,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 21:44:17,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20033 states and 22919 transitions.
[2020-05-30 21:44:17,838 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-30 21:44:17,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:44:17,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:44:17,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:44:17,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:44:17,846 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:44:17,846 INFO  L82        PathProgramCache]: Analyzing trace with hash 1346062386, now seen corresponding path program 1 times
[2020-05-30 21:44:17,847 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:44:17,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:44:18,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:44:18,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:44:18,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:44:18,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:44:18,112 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:44:18,112 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:44:18,112 INFO  L87              Difference]: Start difference. First operand 20033 states and 22919 transitions. cyclomatic complexity: 2921 Second operand 12 states.
[2020-05-30 21:44:28,525 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:44:28,525 INFO  L93              Difference]: Finished difference Result 22010 states and 25559 transitions.
[2020-05-30 21:44:28,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:44:28,526 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22010 states and 25559 transitions.
[2020-05-30 21:44:28,584 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 20
[2020-05-30 21:44:28,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22010 states to 22010 states and 25559 transitions.
[2020-05-30 21:44:28,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 852
[2020-05-30 21:44:28,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 852
[2020-05-30 21:44:28,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22010 states and 25559 transitions.
[2020-05-30 21:44:28,673 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:44:28,673 INFO  L728         BuchiCegarLoop]: Abstraction has 22010 states and 25559 transitions.
[2020-05-30 21:44:28,688 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22010 states and 25559 transitions.
[2020-05-30 21:44:28,814 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22010 to 21931.
[2020-05-30 21:44:28,815 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21931 states.
[2020-05-30 21:44:28,852 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21931 states to 21931 states and 25414 transitions.
[2020-05-30 21:44:28,852 INFO  L751         BuchiCegarLoop]: Abstraction has 21931 states and 25414 transitions.
[2020-05-30 21:44:28,852 INFO  L631         BuchiCegarLoop]: Abstraction has 21931 states and 25414 transitions.
[2020-05-30 21:44:28,853 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 21:44:28,853 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21931 states and 25414 transitions.
[2020-05-30 21:44:28,876 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 20
[2020-05-30 21:44:28,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:44:28,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:44:28,878 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:44:28,878 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND TRUE   choice == 9
[L4937]              gas := gas - 21000;
[L4938]  COND FALSE  !(gas >= 0)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:44:28,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:44:28,884 INFO  L82        PathProgramCache]: Analyzing trace with hash 1996359653, now seen corresponding path program 1 times
[2020-05-30 21:44:28,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:44:28,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:44:29,174 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 15 proven. 0 refuted. 0 times theorem prover too weak. 208 trivial. 0 not checked.
[2020-05-30 21:44:29,174 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:44:29,175 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:44:29,175 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:44:29,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:44:29,176 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:44:29,176 INFO  L87              Difference]: Start difference. First operand 21931 states and 25414 transitions. cyclomatic complexity: 3518 Second operand 16 states.
[2020-05-30 21:44:46,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:44:46,896 INFO  L93              Difference]: Finished difference Result 27530 states and 32322 transitions.
[2020-05-30 21:44:46,896 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:44:46,896 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27530 states and 32322 transitions.
[2020-05-30 21:44:46,954 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 40
[2020-05-30 21:44:47,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27530 states to 27152 states and 31873 transitions.
[2020-05-30 21:44:47,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1348
[2020-05-30 21:44:47,051 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1348
[2020-05-30 21:44:47,051 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 27152 states and 31873 transitions.
[2020-05-30 21:44:47,072 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:44:47,072 INFO  L728         BuchiCegarLoop]: Abstraction has 27152 states and 31873 transitions.
[2020-05-30 21:44:47,089 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 27152 states and 31873 transitions.
[2020-05-30 21:44:47,232 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 27152 to 21261.
[2020-05-30 21:44:47,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21261 states.
[2020-05-30 21:44:47,266 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21261 states to 21261 states and 23882 transitions.
[2020-05-30 21:44:47,266 INFO  L751         BuchiCegarLoop]: Abstraction has 21261 states and 23882 transitions.
[2020-05-30 21:44:47,266 INFO  L631         BuchiCegarLoop]: Abstraction has 21261 states and 23882 transitions.
[2020-05-30 21:44:47,267 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 21:44:47,267 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21261 states and 23882 transitions.
[2020-05-30 21:44:47,289 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 20
[2020-05-30 21:44:47,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:44:47,290 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:44:47,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:44:47,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:44:47,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:44:47,298 INFO  L82        PathProgramCache]: Analyzing trace with hash 1895674875, now seen corresponding path program 1 times
[2020-05-30 21:44:47,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:44:47,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:44:47,914 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:44:47,914 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:44:47,914 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-05-30 21:44:47,915 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:44:47,915 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-05-30 21:44:47,915 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=532, Unknown=0, NotChecked=0, Total=600
[2020-05-30 21:44:47,915 INFO  L87              Difference]: Start difference. First operand 21261 states and 23882 transitions. cyclomatic complexity: 2656 Second operand 25 states.
[2020-05-30 21:45:31,528 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:45:31,529 INFO  L93              Difference]: Finished difference Result 38196 states and 44996 transitions.
[2020-05-30 21:45:31,529 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 52 states. 
[2020-05-30 21:45:31,529 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 38196 states and 44996 transitions.
[2020-05-30 21:45:31,630 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:31,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 38196 states to 38196 states and 44984 transitions.
[2020-05-30 21:45:31,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1209
[2020-05-30 21:45:31,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1209
[2020-05-30 21:45:31,778 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 38196 states and 44984 transitions.
[2020-05-30 21:45:31,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:45:31,806 INFO  L728         BuchiCegarLoop]: Abstraction has 38196 states and 44984 transitions.
[2020-05-30 21:45:31,926 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 38196 states and 44984 transitions.
[2020-05-30 21:45:32,146 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 38196 to 36290.
[2020-05-30 21:45:32,146 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36290 states.
[2020-05-30 21:45:32,215 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36290 states to 36290 states and 42389 transitions.
[2020-05-30 21:45:32,215 INFO  L751         BuchiCegarLoop]: Abstraction has 36290 states and 42389 transitions.
[2020-05-30 21:45:32,215 INFO  L631         BuchiCegarLoop]: Abstraction has 36290 states and 42389 transitions.
[2020-05-30 21:45:32,215 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 21:45:32,215 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36290 states and 42389 transitions.
[2020-05-30 21:45:32,253 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:32,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:45:32,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:45:32,255 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:45:32,256 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:45:32,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:45:32,268 INFO  L82        PathProgramCache]: Analyzing trace with hash 1249437705, now seen corresponding path program 1 times
[2020-05-30 21:45:32,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:45:32,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:45:32,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 137 backedges. 2 proven. 37 refuted. 0 times theorem prover too weak. 98 trivial. 0 not checked.
[2020-05-30 21:45:32,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:45:32,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:45:32,456 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:45:32,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:45:32,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:45:32,456 INFO  L87              Difference]: Start difference. First operand 36290 states and 42389 transitions. cyclomatic complexity: 6191 Second operand 12 states.
[2020-05-30 21:45:46,380 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:45:46,380 INFO  L93              Difference]: Finished difference Result 36588 states and 42821 transitions.
[2020-05-30 21:45:46,380 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:45:46,380 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36588 states and 42821 transitions.
[2020-05-30 21:45:46,486 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:46,633 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36588 states to 36588 states and 42821 transitions.
[2020-05-30 21:45:46,633 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1134
[2020-05-30 21:45:46,634 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1134
[2020-05-30 21:45:46,634 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36588 states and 42821 transitions.
[2020-05-30 21:45:46,665 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:45:46,665 INFO  L728         BuchiCegarLoop]: Abstraction has 36588 states and 42821 transitions.
[2020-05-30 21:45:46,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36588 states and 42821 transitions.
[2020-05-30 21:45:46,928 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36588 to 36284.
[2020-05-30 21:45:46,928 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36284 states.
[2020-05-30 21:45:47,002 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36284 states to 36284 states and 42355 transitions.
[2020-05-30 21:45:47,002 INFO  L751         BuchiCegarLoop]: Abstraction has 36284 states and 42355 transitions.
[2020-05-30 21:45:47,002 INFO  L631         BuchiCegarLoop]: Abstraction has 36284 states and 42355 transitions.
[2020-05-30 21:45:47,002 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 21:45:47,002 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36284 states and 42355 transitions.
[2020-05-30 21:45:47,162 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:47,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:45:47,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:45:47,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:45:47,164 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND FALSE  !(Balance[from] >= amount)
[L4507]                    success := false;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:45:47,179 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:45:47,179 INFO  L82        PathProgramCache]: Analyzing trace with hash -1264236227, now seen corresponding path program 1 times
[2020-05-30 21:45:47,180 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:45:47,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:45:47,438 INFO  L134       CoverageAnalysis]: Checked inductivity of 326 backedges. 8 proven. 14 refuted. 0 times theorem prover too weak. 304 trivial. 0 not checked.
[2020-05-30 21:45:47,438 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:45:47,438 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 21:45:47,439 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:45:47,439 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:45:47,439 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:45:47,439 INFO  L87              Difference]: Start difference. First operand 36284 states and 42355 transitions. cyclomatic complexity: 6163 Second operand 4 states.
[2020-05-30 21:45:47,650 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:45:47,650 INFO  L93              Difference]: Finished difference Result 36404 states and 42469 transitions.
[2020-05-30 21:45:47,650 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:45:47,650 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36404 states and 42469 transitions.
[2020-05-30 21:45:47,748 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:47,888 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36404 states to 35768 states and 41779 transitions.
[2020-05-30 21:45:47,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1091
[2020-05-30 21:45:47,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1091
[2020-05-30 21:45:47,889 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35768 states and 41779 transitions.
[2020-05-30 21:45:47,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:45:47,921 INFO  L728         BuchiCegarLoop]: Abstraction has 35768 states and 41779 transitions.
[2020-05-30 21:45:47,943 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35768 states and 41779 transitions.
[2020-05-30 21:45:48,172 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35768 to 35768.
[2020-05-30 21:45:48,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35768 states.
[2020-05-30 21:45:48,241 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35768 states to 35768 states and 41779 transitions.
[2020-05-30 21:45:48,241 INFO  L751         BuchiCegarLoop]: Abstraction has 35768 states and 41779 transitions.
[2020-05-30 21:45:48,241 INFO  L631         BuchiCegarLoop]: Abstraction has 35768 states and 41779 transitions.
[2020-05-30 21:45:48,241 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 21:45:48,241 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35768 states and 41779 transitions.
[2020-05-30 21:45:48,278 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:48,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:45:48,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:45:48,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:45:48,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:45:48,286 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:45:48,286 INFO  L82        PathProgramCache]: Analyzing trace with hash 518562346, now seen corresponding path program 1 times
[2020-05-30 21:45:48,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:45:48,322 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:45:48,564 INFO  L134       CoverageAnalysis]: Checked inductivity of 335 backedges. 8 proven. 18 refuted. 0 times theorem prover too weak. 309 trivial. 0 not checked.
[2020-05-30 21:45:48,564 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:45:48,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 21:45:48,565 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:45:48,565 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 21:45:48,565 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 21:45:48,565 INFO  L87              Difference]: Start difference. First operand 35768 states and 41779 transitions. cyclomatic complexity: 6103 Second operand 7 states.
[2020-05-30 21:45:48,935 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:45:48,935 INFO  L93              Difference]: Finished difference Result 35912 states and 41917 transitions.
[2020-05-30 21:45:48,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 21:45:48,936 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35912 states and 41917 transitions.
[2020-05-30 21:45:49,021 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:49,160 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35912 states to 35744 states and 41731 transitions.
[2020-05-30 21:45:49,161 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1089
[2020-05-30 21:45:49,161 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1089
[2020-05-30 21:45:49,161 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35744 states and 41731 transitions.
[2020-05-30 21:45:49,193 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:45:49,193 INFO  L728         BuchiCegarLoop]: Abstraction has 35744 states and 41731 transitions.
[2020-05-30 21:45:49,215 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35744 states and 41731 transitions.
[2020-05-30 21:45:49,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35744 to 35744.
[2020-05-30 21:45:49,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35744 states.
[2020-05-30 21:45:49,507 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35744 states to 35744 states and 41731 transitions.
[2020-05-30 21:45:49,507 INFO  L751         BuchiCegarLoop]: Abstraction has 35744 states and 41731 transitions.
[2020-05-30 21:45:49,507 INFO  L631         BuchiCegarLoop]: Abstraction has 35744 states and 41731 transitions.
[2020-05-30 21:45:49,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 21:45:49,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35744 states and 41731 transitions.
[2020-05-30 21:45:49,545 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:45:49,545 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:45:49,545 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:45:49,547 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:45:49,547 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_bid_ValidatorAuction_2_0 - low;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:45:49,552 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:45:49,552 INFO  L82        PathProgramCache]: Analyzing trace with hash 1950604359, now seen corresponding path program 1 times
[2020-05-30 21:45:49,553 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:45:49,587 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:45:49,906 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 2 proven. 36 refuted. 0 times theorem prover too weak. 227 trivial. 0 not checked.
[2020-05-30 21:45:49,906 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:45:49,906 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:45:49,907 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:45:49,907 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:45:49,907 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:45:49,907 INFO  L87              Difference]: Start difference. First operand 35744 states and 41731 transitions. cyclomatic complexity: 6079 Second operand 12 states.
[2020-05-30 21:46:08,464 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:46:08,464 INFO  L93              Difference]: Finished difference Result 35868 states and 41943 transitions.
[2020-05-30 21:46:08,465 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:46:08,465 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35868 states and 41943 transitions.
[2020-05-30 21:46:08,571 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:46:08,713 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35868 states to 35868 states and 41943 transitions.
[2020-05-30 21:46:08,714 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1100
[2020-05-30 21:46:08,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1100
[2020-05-30 21:46:08,715 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35868 states and 41943 transitions.
[2020-05-30 21:46:08,747 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:46:08,747 INFO  L728         BuchiCegarLoop]: Abstraction has 35868 states and 41943 transitions.
[2020-05-30 21:46:08,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35868 states and 41943 transitions.
[2020-05-30 21:46:09,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35868 to 35702.
[2020-05-30 21:46:09,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35702 states.
[2020-05-30 21:46:09,073 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35702 states to 35702 states and 41570 transitions.
[2020-05-30 21:46:09,073 INFO  L751         BuchiCegarLoop]: Abstraction has 35702 states and 41570 transitions.
[2020-05-30 21:46:09,073 INFO  L631         BuchiCegarLoop]: Abstraction has 35702 states and 41570 transitions.
[2020-05-30 21:46:09,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 21:46:09,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35702 states and 41570 transitions.
[2020-05-30 21:46:09,112 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:46:09,112 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:46:09,112 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:46:09,114 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:46:09,114 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:46:09,119 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:46:09,120 INFO  L82        PathProgramCache]: Analyzing trace with hash -57546193, now seen corresponding path program 1 times
[2020-05-30 21:46:09,120 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:46:09,155 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:46:09,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 334 backedges. 12 proven. 26 refuted. 0 times theorem prover too weak. 296 trivial. 0 not checked.
[2020-05-30 21:46:09,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:46:09,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:46:09,515 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:46:09,516 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:46:09,516 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:46:09,516 INFO  L87              Difference]: Start difference. First operand 35702 states and 41570 transitions. cyclomatic complexity: 5954 Second operand 8 states.
[2020-05-30 21:46:11,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:46:11,282 INFO  L93              Difference]: Finished difference Result 35906 states and 41762 transitions.
[2020-05-30 21:46:11,282 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:46:11,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35906 states and 41762 transitions.
[2020-05-30 21:46:11,378 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:46:11,511 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35906 states to 35486 states and 41336 transitions.
[2020-05-30 21:46:11,511 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1072
[2020-05-30 21:46:11,512 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1072
[2020-05-30 21:46:11,512 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35486 states and 41336 transitions.
[2020-05-30 21:46:11,542 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:46:11,542 INFO  L728         BuchiCegarLoop]: Abstraction has 35486 states and 41336 transitions.
[2020-05-30 21:46:11,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35486 states and 41336 transitions.
[2020-05-30 21:46:11,783 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35486 to 35486.
[2020-05-30 21:46:11,783 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35486 states.
[2020-05-30 21:46:11,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35486 states to 35486 states and 41336 transitions.
[2020-05-30 21:46:11,846 INFO  L751         BuchiCegarLoop]: Abstraction has 35486 states and 41336 transitions.
[2020-05-30 21:46:11,847 INFO  L631         BuchiCegarLoop]: Abstraction has 35486 states and 41336 transitions.
[2020-05-30 21:46:11,847 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 21:46:11,847 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35486 states and 41336 transitions.
[2020-05-30 21:46:11,882 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 52
[2020-05-30 21:46:11,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:46:11,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:46:11,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:46:11,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:46:11,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:46:11,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 2022702474, now seen corresponding path program 1 times
[2020-05-30 21:46:11,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:46:11,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:46:12,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 38 proven. 51 refuted. 0 times theorem prover too weak. 256 trivial. 0 not checked.
[2020-05-30 21:46:12,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:46:12,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:46:12,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:46:12,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:46:12,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:46:12,184 INFO  L87              Difference]: Start difference. First operand 35486 states and 41336 transitions. cyclomatic complexity: 5936 Second operand 12 states.
[2020-05-30 21:46:24,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:46:24,307 INFO  L93              Difference]: Finished difference Result 36593 states and 42874 transitions.
[2020-05-30 21:46:24,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:46:24,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36593 states and 42874 transitions.
[2020-05-30 21:46:24,406 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:46:24,545 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36593 states to 36593 states and 42874 transitions.
[2020-05-30 21:46:24,545 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1125
[2020-05-30 21:46:24,546 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1125
[2020-05-30 21:46:24,546 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36593 states and 42874 transitions.
[2020-05-30 21:46:24,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:46:24,577 INFO  L728         BuchiCegarLoop]: Abstraction has 36593 states and 42874 transitions.
[2020-05-30 21:46:24,597 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36593 states and 42874 transitions.
[2020-05-30 21:46:24,827 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36593 to 36401.
[2020-05-30 21:46:24,828 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36401 states.
[2020-05-30 21:46:24,898 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36401 states to 36401 states and 42564 transitions.
[2020-05-30 21:46:24,898 INFO  L751         BuchiCegarLoop]: Abstraction has 36401 states and 42564 transitions.
[2020-05-30 21:46:24,898 INFO  L631         BuchiCegarLoop]: Abstraction has 36401 states and 42564 transitions.
[2020-05-30 21:46:24,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 21:46:24,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36401 states and 42564 transitions.
[2020-05-30 21:46:24,935 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:46:24,936 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:46:24,936 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:46:24,938 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:46:24,938 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:46:24,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:46:24,943 INFO  L82        PathProgramCache]: Analyzing trace with hash -1370608899, now seen corresponding path program 1 times
[2020-05-30 21:46:24,943 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:46:24,986 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:46:25,531 INFO  L134       CoverageAnalysis]: Checked inductivity of 387 backedges. 4 proven. 145 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-05-30 21:46:25,532 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:46:25,532 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-30 21:46:25,532 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:46:25,532 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-05-30 21:46:25,532 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=432, Unknown=0, NotChecked=0, Total=506
[2020-05-30 21:46:25,533 INFO  L87              Difference]: Start difference. First operand 36401 states and 42564 transitions. cyclomatic complexity: 6257 Second operand 23 states.
[2020-05-30 21:46:54,543 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:46:54,543 INFO  L93              Difference]: Finished difference Result 36905 states and 44080 transitions.
[2020-05-30 21:46:54,543 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-05-30 21:46:54,544 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36905 states and 44080 transitions.
[2020-05-30 21:46:54,652 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:46:54,812 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36905 states to 36905 states and 44080 transitions.
[2020-05-30 21:46:54,812 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1134
[2020-05-30 21:46:54,813 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1134
[2020-05-30 21:46:54,813 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36905 states and 44080 transitions.
[2020-05-30 21:46:54,848 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:46:54,848 INFO  L728         BuchiCegarLoop]: Abstraction has 36905 states and 44080 transitions.
[2020-05-30 21:46:54,869 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36905 states and 44080 transitions.
[2020-05-30 21:46:55,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36905 to 36498.
[2020-05-30 21:46:55,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36498 states.
[2020-05-30 21:46:55,204 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36498 states to 36498 states and 43301 transitions.
[2020-05-30 21:46:55,204 INFO  L751         BuchiCegarLoop]: Abstraction has 36498 states and 43301 transitions.
[2020-05-30 21:46:55,204 INFO  L631         BuchiCegarLoop]: Abstraction has 36498 states and 43301 transitions.
[2020-05-30 21:46:55,204 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 21:46:55,204 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36498 states and 43301 transitions.
[2020-05-30 21:46:55,243 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:46:55,243 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:46:55,243 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:46:55,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:46:55,245 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:46:55,250 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:46:55,250 INFO  L82        PathProgramCache]: Analyzing trace with hash 756649499, now seen corresponding path program 1 times
[2020-05-30 21:46:55,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:46:55,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:46:55,524 INFO  L134       CoverageAnalysis]: Checked inductivity of 332 backedges. 68 proven. 30 refuted. 0 times theorem prover too weak. 234 trivial. 0 not checked.
[2020-05-30 21:46:55,524 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:46:55,524 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:46:55,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:46:55,525 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:46:55,525 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:46:55,525 INFO  L87              Difference]: Start difference. First operand 36498 states and 43301 transitions. cyclomatic complexity: 6926 Second operand 12 states.
[2020-05-30 21:47:09,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:47:09,887 INFO  L93              Difference]: Finished difference Result 36619 states and 43508 transitions.
[2020-05-30 21:47:09,887 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:47:09,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36619 states and 43508 transitions.
[2020-05-30 21:47:09,995 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:47:10,145 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36619 states to 36619 states and 43508 transitions.
[2020-05-30 21:47:10,145 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-05-30 21:47:10,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-05-30 21:47:10,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36619 states and 43508 transitions.
[2020-05-30 21:47:10,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:47:10,179 INFO  L728         BuchiCegarLoop]: Abstraction has 36619 states and 43508 transitions.
[2020-05-30 21:47:10,201 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36619 states and 43508 transitions.
[2020-05-30 21:47:10,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36619 to 36482.
[2020-05-30 21:47:10,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 36482 states.
[2020-05-30 21:47:10,538 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 36482 states to 36482 states and 43257 transitions.
[2020-05-30 21:47:10,538 INFO  L751         BuchiCegarLoop]: Abstraction has 36482 states and 43257 transitions.
[2020-05-30 21:47:10,538 INFO  L631         BuchiCegarLoop]: Abstraction has 36482 states and 43257 transitions.
[2020-05-30 21:47:10,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 21:47:10,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 36482 states and 43257 transitions.
[2020-05-30 21:47:10,582 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 56
[2020-05-30 21:47:10,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:47:10,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:47:10,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:47:10,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:47:10,591 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:47:10,591 INFO  L82        PathProgramCache]: Analyzing trace with hash -1773332132, now seen corresponding path program 1 times
[2020-05-30 21:47:10,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:47:10,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:47:10,927 INFO  L134       CoverageAnalysis]: Checked inductivity of 455 backedges. 44 proven. 98 refuted. 0 times theorem prover too weak. 313 trivial. 0 not checked.
[2020-05-30 21:47:10,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:47:10,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:47:10,928 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:47:10,928 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:47:10,928 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:47:10,928 INFO  L87              Difference]: Start difference. First operand 36482 states and 43257 transitions. cyclomatic complexity: 6898 Second operand 12 states.
[2020-05-30 21:47:29,392 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:47:29,393 INFO  L93              Difference]: Finished difference Result 41197 states and 49780 transitions.
[2020-05-30 21:47:29,393 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:47:29,393 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 41197 states and 49780 transitions.
[2020-05-30 21:47:29,518 INFO  L131   ngComponentsAnalysis]: Automaton has 19 accepting balls. 72
[2020-05-30 21:47:29,691 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 41197 states to 40127 states and 48393 transitions.
[2020-05-30 21:47:29,692 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1212
[2020-05-30 21:47:29,693 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1212
[2020-05-30 21:47:29,693 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 40127 states and 48393 transitions.
[2020-05-30 21:47:29,730 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:47:29,730 INFO  L728         BuchiCegarLoop]: Abstraction has 40127 states and 48393 transitions.
[2020-05-30 21:47:29,753 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 40127 states and 48393 transitions.
[2020-05-30 21:47:30,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 40127 to 39934.
[2020-05-30 21:47:30,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39934 states.
[2020-05-30 21:47:30,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39934 states to 39934 states and 48014 transitions.
[2020-05-30 21:47:30,120 INFO  L751         BuchiCegarLoop]: Abstraction has 39934 states and 48014 transitions.
[2020-05-30 21:47:30,120 INFO  L631         BuchiCegarLoop]: Abstraction has 39934 states and 48014 transitions.
[2020-05-30 21:47:30,120 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 21:47:30,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39934 states and 48014 transitions.
[2020-05-30 21:47:30,160 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 70
[2020-05-30 21:47:30,160 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:47:30,160 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:47:30,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:47:30,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:47:30,167 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:47:30,168 INFO  L82        PathProgramCache]: Analyzing trace with hash -45383262, now seen corresponding path program 2 times
[2020-05-30 21:47:30,168 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:47:30,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:47:30,456 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 4 proven. 83 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-05-30 21:47:30,456 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:47:30,456 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:47:30,456 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:47:30,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:47:30,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:47:30,457 INFO  L87              Difference]: Start difference. First operand 39934 states and 48014 transitions. cyclomatic complexity: 8217 Second operand 13 states.
[2020-05-30 21:47:47,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:47:47,994 INFO  L93              Difference]: Finished difference Result 39614 states and 47632 transitions.
[2020-05-30 21:47:47,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:47:47,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 39614 states and 47632 transitions.
[2020-05-30 21:47:48,112 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 66
[2020-05-30 21:47:48,278 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 39614 states to 39614 states and 47632 transitions.
[2020-05-30 21:47:48,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-05-30 21:47:48,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-05-30 21:47:48,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 39614 states and 47632 transitions.
[2020-05-30 21:47:48,316 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:47:48,316 INFO  L728         BuchiCegarLoop]: Abstraction has 39614 states and 47632 transitions.
[2020-05-30 21:47:48,339 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 39614 states and 47632 transitions.
[2020-05-30 21:47:48,619 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 39614 to 39514.
[2020-05-30 21:47:48,619 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39514 states.
[2020-05-30 21:47:48,703 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39514 states to 39514 states and 47456 transitions.
[2020-05-30 21:47:48,704 INFO  L751         BuchiCegarLoop]: Abstraction has 39514 states and 47456 transitions.
[2020-05-30 21:47:48,704 INFO  L631         BuchiCegarLoop]: Abstraction has 39514 states and 47456 transitions.
[2020-05-30 21:47:48,704 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 21:47:48,704 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39514 states and 47456 transitions.
[2020-05-30 21:47:48,744 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 66
[2020-05-30 21:47:48,744 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:47:48,744 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:47:48,746 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:47:48,746 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:47:48,751 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:47:48,751 INFO  L82        PathProgramCache]: Analyzing trace with hash -1673484303, now seen corresponding path program 1 times
[2020-05-30 21:47:48,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:47:48,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:47:49,070 INFO  L134       CoverageAnalysis]: Checked inductivity of 458 backedges. 7 proven. 169 refuted. 0 times theorem prover too weak. 282 trivial. 0 not checked.
[2020-05-30 21:47:49,070 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:47:49,070 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:47:49,071 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:47:49,071 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:47:49,071 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:47:49,071 INFO  L87              Difference]: Start difference. First operand 39514 states and 47456 transitions. cyclomatic complexity: 8074 Second operand 12 states.
[2020-05-30 21:48:03,010 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:48:03,010 INFO  L93              Difference]: Finished difference Result 39718 states and 47630 transitions.
[2020-05-30 21:48:03,010 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:48:03,010 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 39718 states and 47630 transitions.
[2020-05-30 21:48:03,131 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 66
[2020-05-30 21:48:03,308 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 39718 states to 39718 states and 47630 transitions.
[2020-05-30 21:48:03,308 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-05-30 21:48:03,309 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-05-30 21:48:03,309 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 39718 states and 47630 transitions.
[2020-05-30 21:48:03,346 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:48:03,346 INFO  L728         BuchiCegarLoop]: Abstraction has 39718 states and 47630 transitions.
[2020-05-30 21:48:03,369 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 39718 states and 47630 transitions.
[2020-05-30 21:48:03,649 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 39718 to 39490.
[2020-05-30 21:48:03,649 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 39490 states.
[2020-05-30 21:48:03,732 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 39490 states to 39490 states and 47307 transitions.
[2020-05-30 21:48:03,732 INFO  L751         BuchiCegarLoop]: Abstraction has 39490 states and 47307 transitions.
[2020-05-30 21:48:03,732 INFO  L631         BuchiCegarLoop]: Abstraction has 39490 states and 47307 transitions.
[2020-05-30 21:48:03,732 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 21:48:03,732 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 39490 states and 47307 transitions.
[2020-05-30 21:48:03,776 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 66
[2020-05-30 21:48:03,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:48:03,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:48:03,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:48:03,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:48:03,784 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:48:03,784 INFO  L82        PathProgramCache]: Analyzing trace with hash 577362835, now seen corresponding path program 1 times
[2020-05-30 21:48:03,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:48:03,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:48:04,042 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-05-30 21:48:04,042 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:48:04,042 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:48:04,043 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:48:04,043 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:48:04,043 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:48:04,043 INFO  L87              Difference]: Start difference. First operand 39490 states and 47307 transitions. cyclomatic complexity: 7940 Second operand 13 states.
[2020-05-30 21:48:22,206 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:48:22,206 INFO  L93              Difference]: Finished difference Result 43424 states and 52355 transitions.
[2020-05-30 21:48:22,206 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:48:22,206 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 43424 states and 52355 transitions.
[2020-05-30 21:48:22,337 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 74
[2020-05-30 21:48:22,527 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 43424 states to 42640 states and 51364 transitions.
[2020-05-30 21:48:22,527 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1233
[2020-05-30 21:48:22,528 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1233
[2020-05-30 21:48:22,528 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42640 states and 51364 transitions.
[2020-05-30 21:48:22,570 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:48:22,570 INFO  L728         BuchiCegarLoop]: Abstraction has 42640 states and 51364 transitions.
[2020-05-30 21:48:22,594 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42640 states and 51364 transitions.
[2020-05-30 21:48:22,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42640 to 42584.
[2020-05-30 21:48:22,893 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42584 states.
[2020-05-30 21:48:22,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42584 states to 42584 states and 51283 transitions.
[2020-05-30 21:48:22,987 INFO  L751         BuchiCegarLoop]: Abstraction has 42584 states and 51283 transitions.
[2020-05-30 21:48:22,987 INFO  L631         BuchiCegarLoop]: Abstraction has 42584 states and 51283 transitions.
[2020-05-30 21:48:22,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 21:48:22,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42584 states and 51283 transitions.
[2020-05-30 21:48:23,029 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 74
[2020-05-30 21:48:23,029 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:48:23,029 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:48:23,031 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:48:23,031 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:48:23,035 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:48:23,035 INFO  L82        PathProgramCache]: Analyzing trace with hash 655175632, now seen corresponding path program 1 times
[2020-05-30 21:48:23,035 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:48:23,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:48:23,282 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 244 trivial. 0 not checked.
[2020-05-30 21:48:23,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:48:23,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:48:23,283 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:48:23,283 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:48:23,283 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:48:23,283 INFO  L87              Difference]: Start difference. First operand 42584 states and 51283 transitions. cyclomatic complexity: 8834 Second operand 13 states.
[2020-05-30 21:48:38,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:48:38,609 INFO  L93              Difference]: Finished difference Result 23921 states and 27625 transitions.
[2020-05-30 21:48:38,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:48:38,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23921 states and 27625 transitions.
[2020-05-30 21:48:38,678 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:48:38,763 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23921 states to 23230 states and 26877 transitions.
[2020-05-30 21:48:38,763 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 734
[2020-05-30 21:48:38,764 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 734
[2020-05-30 21:48:38,764 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23230 states and 26877 transitions.
[2020-05-30 21:48:38,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:48:38,783 INFO  L728         BuchiCegarLoop]: Abstraction has 23230 states and 26877 transitions.
[2020-05-30 21:48:38,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23230 states and 26877 transitions.
[2020-05-30 21:48:38,933 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23230 to 23152.
[2020-05-30 21:48:38,933 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23152 states.
[2020-05-30 21:48:38,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23152 states to 23152 states and 26780 transitions.
[2020-05-30 21:48:38,975 INFO  L751         BuchiCegarLoop]: Abstraction has 23152 states and 26780 transitions.
[2020-05-30 21:48:38,975 INFO  L631         BuchiCegarLoop]: Abstraction has 23152 states and 26780 transitions.
[2020-05-30 21:48:38,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 21:48:38,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23152 states and 26780 transitions.
[2020-05-30 21:48:38,999 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:48:38,999 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:48:38,999 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:48:39,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:48:39,001 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:48:39,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:48:39,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -438957860, now seen corresponding path program 1 times
[2020-05-30 21:48:39,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:48:39,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:48:39,391 INFO  L134       CoverageAnalysis]: Checked inductivity of 260 backedges. 4 proven. 73 refuted. 0 times theorem prover too weak. 183 trivial. 0 not checked.
[2020-05-30 21:48:39,392 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:48:39,392 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:48:39,392 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:48:39,392 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:48:39,393 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:48:39,393 INFO  L87              Difference]: Start difference. First operand 23152 states and 26780 transitions. cyclomatic complexity: 3707 Second operand 12 states.
[2020-05-30 21:48:50,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:48:50,607 INFO  L93              Difference]: Finished difference Result 23227 states and 26854 transitions.
[2020-05-30 21:48:50,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 21:48:50,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23227 states and 26854 transitions.
[2020-05-30 21:48:50,679 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:48:50,769 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23227 states to 23215 states and 26823 transitions.
[2020-05-30 21:48:50,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 737
[2020-05-30 21:48:50,770 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 737
[2020-05-30 21:48:50,770 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23215 states and 26823 transitions.
[2020-05-30 21:48:50,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:48:50,789 INFO  L728         BuchiCegarLoop]: Abstraction has 23215 states and 26823 transitions.
[2020-05-30 21:48:50,803 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23215 states and 26823 transitions.
[2020-05-30 21:48:50,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23215 to 22990.
[2020-05-30 21:48:50,953 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22990 states.
[2020-05-30 21:48:50,997 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22990 states to 22990 states and 26555 transitions.
[2020-05-30 21:48:50,997 INFO  L751         BuchiCegarLoop]: Abstraction has 22990 states and 26555 transitions.
[2020-05-30 21:48:50,997 INFO  L631         BuchiCegarLoop]: Abstraction has 22990 states and 26555 transitions.
[2020-05-30 21:48:50,997 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 21:48:50,997 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22990 states and 26555 transitions.
[2020-05-30 21:48:51,022 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:48:51,022 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:48:51,022 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:48:51,024 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:48:51,024 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:48:51,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:48:51,029 INFO  L82        PathProgramCache]: Analyzing trace with hash 170545318, now seen corresponding path program 1 times
[2020-05-30 21:48:51,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:48:51,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:48:51,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 221 trivial. 0 not checked.
[2020-05-30 21:48:51,595 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:48:51,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-05-30 21:48:51,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:48:51,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-05-30 21:48:51,596 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=453, Unknown=0, NotChecked=0, Total=506
[2020-05-30 21:48:51,596 INFO  L87              Difference]: Start difference. First operand 22990 states and 26555 transitions. cyclomatic complexity: 3642 Second operand 23 states.
[2020-05-30 21:49:29,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:49:29,469 INFO  L93              Difference]: Finished difference Result 25063 states and 29571 transitions.
[2020-05-30 21:49:29,469 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-05-30 21:49:29,469 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25063 states and 29571 transitions.
[2020-05-30 21:49:29,529 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:49:29,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25063 states to 25063 states and 29563 transitions.
[2020-05-30 21:49:29,623 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 733
[2020-05-30 21:49:29,623 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 733
[2020-05-30 21:49:29,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25063 states and 29563 transitions.
[2020-05-30 21:49:29,645 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:49:29,645 INFO  L728         BuchiCegarLoop]: Abstraction has 25063 states and 29563 transitions.
[2020-05-30 21:49:29,658 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25063 states and 29563 transitions.
[2020-05-30 21:49:29,801 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25063 to 22712.
[2020-05-30 21:49:29,801 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22712 states.
[2020-05-30 21:49:29,841 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22712 states to 22712 states and 25977 transitions.
[2020-05-30 21:49:29,841 INFO  L751         BuchiCegarLoop]: Abstraction has 22712 states and 25977 transitions.
[2020-05-30 21:49:29,841 INFO  L631         BuchiCegarLoop]: Abstraction has 22712 states and 25977 transitions.
[2020-05-30 21:49:29,841 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 21:49:29,841 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22712 states and 25977 transitions.
[2020-05-30 21:49:29,864 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-05-30 21:49:29,864 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:49:29,864 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:49:29,866 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:49:29,866 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:49:29,871 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:49:29,871 INFO  L82        PathProgramCache]: Analyzing trace with hash 673005659, now seen corresponding path program 1 times
[2020-05-30 21:49:29,872 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:49:29,906 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:49:30,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 268 backedges. 2 proven. 35 refuted. 0 times theorem prover too weak. 231 trivial. 0 not checked.
[2020-05-30 21:49:30,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:49:30,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:49:30,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:49:30,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:49:30,145 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:49:30,145 INFO  L87              Difference]: Start difference. First operand 22712 states and 25977 transitions. cyclomatic complexity: 3342 Second operand 13 states.
[2020-05-30 21:49:41,448 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:49:41,448 INFO  L93              Difference]: Finished difference Result 22849 states and 26097 transitions.
[2020-05-30 21:49:41,448 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:49:41,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22849 states and 26097 transitions.
[2020-05-30 21:49:41,501 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 16
[2020-05-30 21:49:41,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22849 states to 21804 states and 24855 transitions.
[2020-05-30 21:49:41,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 725
[2020-05-30 21:49:41,569 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 735
[2020-05-30 21:49:41,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21804 states and 24855 transitions.
[2020-05-30 21:49:41,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:49:41,585 INFO  L728         BuchiCegarLoop]: Abstraction has 21804 states and 24855 transitions.
[2020-05-30 21:49:41,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21804 states and 24855 transitions.
[2020-05-30 21:49:41,716 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21804 to 21796.
[2020-05-30 21:49:41,717 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21796 states.
[2020-05-30 21:49:41,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21796 states to 21796 states and 24839 transitions.
[2020-05-30 21:49:41,755 INFO  L751         BuchiCegarLoop]: Abstraction has 21796 states and 24839 transitions.
[2020-05-30 21:49:41,755 INFO  L631         BuchiCegarLoop]: Abstraction has 21796 states and 24839 transitions.
[2020-05-30 21:49:41,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 21:49:41,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21796 states and 24839 transitions.
[2020-05-30 21:49:41,776 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 16
[2020-05-30 21:49:41,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:49:41,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:49:41,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:49:41,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:49:41,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:49:41,783 INFO  L82        PathProgramCache]: Analyzing trace with hash 107560697, now seen corresponding path program 1 times
[2020-05-30 21:49:41,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:49:41,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:49:42,053 INFO  L134       CoverageAnalysis]: Checked inductivity of 268 backedges. 2 proven. 35 refuted. 0 times theorem prover too weak. 231 trivial. 0 not checked.
[2020-05-30 21:49:42,053 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:49:42,053 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:49:42,054 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:49:42,054 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:49:42,054 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:49:42,054 INFO  L87              Difference]: Start difference. First operand 21796 states and 24839 transitions. cyclomatic complexity: 3129 Second operand 13 states.
[2020-05-30 21:49:53,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:49:53,143 INFO  L93              Difference]: Finished difference Result 21330 states and 24149 transitions.
[2020-05-30 21:49:53,143 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:49:53,143 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21330 states and 24149 transitions.
[2020-05-30 21:49:53,207 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 16
[2020-05-30 21:49:53,283 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21330 states to 21171 states and 23959 transitions.
[2020-05-30 21:49:53,284 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 735
[2020-05-30 21:49:53,284 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 756
[2020-05-30 21:49:53,284 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21171 states and 23959 transitions.
[2020-05-30 21:49:53,301 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:49:53,301 INFO  L728         BuchiCegarLoop]: Abstraction has 21171 states and 23959 transitions.
[2020-05-30 21:49:53,314 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21171 states and 23959 transitions.
[2020-05-30 21:49:53,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21171 to 21152.
[2020-05-30 21:49:53,442 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21152 states.
[2020-05-30 21:49:53,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21152 states to 21152 states and 23884 transitions.
[2020-05-30 21:49:53,480 INFO  L751         BuchiCegarLoop]: Abstraction has 21152 states and 23884 transitions.
[2020-05-30 21:49:53,480 INFO  L631         BuchiCegarLoop]: Abstraction has 21152 states and 23884 transitions.
[2020-05-30 21:49:53,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 21:49:53,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21152 states and 23884 transitions.
[2020-05-30 21:49:53,503 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 16
[2020-05-30 21:49:53,504 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:49:53,504 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:49:53,506 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:49:53,506 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:49:53,511 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:49:53,511 INFO  L82        PathProgramCache]: Analyzing trace with hash -9976454, now seen corresponding path program 1 times
[2020-05-30 21:49:53,512 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:49:53,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:49:53,799 INFO  L134       CoverageAnalysis]: Checked inductivity of 235 backedges. 2 proven. 4 refuted. 0 times theorem prover too weak. 229 trivial. 0 not checked.
[2020-05-30 21:49:53,799 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:49:53,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 21:49:53,834 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:49:53,834 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 21:49:53,834 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-05-30 21:49:53,834 INFO  L87              Difference]: Start difference. First operand 21152 states and 23884 transitions. cyclomatic complexity: 2820 Second operand 14 states.
[2020-05-30 21:50:04,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:04,566 INFO  L93              Difference]: Finished difference Result 20021 states and 22294 transitions.
[2020-05-30 21:50:04,566 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:50:04,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20021 states and 22294 transitions.
[2020-05-30 21:50:04,620 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 16
[2020-05-30 21:50:04,664 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20021 states to 14458 states and 16132 transitions.
[2020-05-30 21:50:04,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 756
[2020-05-30 21:50:04,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 756
[2020-05-30 21:50:04,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14458 states and 16132 transitions.
[2020-05-30 21:50:04,674 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:04,674 INFO  L728         BuchiCegarLoop]: Abstraction has 14458 states and 16132 transitions.
[2020-05-30 21:50:04,683 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14458 states and 16132 transitions.
[2020-05-30 21:50:04,760 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14458 to 14403.
[2020-05-30 21:50:04,760 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14403 states.
[2020-05-30 21:50:04,782 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14403 states to 14403 states and 16051 transitions.
[2020-05-30 21:50:04,783 INFO  L751         BuchiCegarLoop]: Abstraction has 14403 states and 16051 transitions.
[2020-05-30 21:50:04,783 INFO  L631         BuchiCegarLoop]: Abstraction has 14403 states and 16051 transitions.
[2020-05-30 21:50:04,783 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 21:50:04,783 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14403 states and 16051 transitions.
[2020-05-30 21:50:04,798 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 16
[2020-05-30 21:50:04,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:04,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:04,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:04,801 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:04,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:04,807 INFO  L82        PathProgramCache]: Analyzing trace with hash 261145420, now seen corresponding path program 1 times
[2020-05-30 21:50:04,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:04,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:05,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 355 backedges. 8 proven. 3 refuted. 0 times theorem prover too weak. 344 trivial. 0 not checked.
[2020-05-30 21:50:05,213 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:50:05,213 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:50:05,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:05,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:50:05,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:50:05,214 INFO  L87              Difference]: Start difference. First operand 14403 states and 16051 transitions. cyclomatic complexity: 1704 Second operand 8 states.
[2020-05-30 21:50:06,916 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:06,916 INFO  L93              Difference]: Finished difference Result 12531 states and 13683 transitions.
[2020-05-30 21:50:06,917 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:50:06,917 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12531 states and 13683 transitions.
[2020-05-30 21:50:06,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:06,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12531 states to 8959 states and 9756 transitions.
[2020-05-30 21:50:06,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 423
[2020-05-30 21:50:06,969 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 526
[2020-05-30 21:50:06,969 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8959 states and 9756 transitions.
[2020-05-30 21:50:06,973 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:06,973 INFO  L728         BuchiCegarLoop]: Abstraction has 8959 states and 9756 transitions.
[2020-05-30 21:50:06,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8959 states and 9756 transitions.
[2020-05-30 21:50:07,018 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8959 to 8955.
[2020-05-30 21:50:07,018 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8955 states.
[2020-05-30 21:50:07,029 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8955 states to 8955 states and 9752 transitions.
[2020-05-30 21:50:07,029 INFO  L751         BuchiCegarLoop]: Abstraction has 8955 states and 9752 transitions.
[2020-05-30 21:50:07,029 INFO  L631         BuchiCegarLoop]: Abstraction has 8955 states and 9752 transitions.
[2020-05-30 21:50:07,029 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 21:50:07,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8955 states and 9752 transitions.
[2020-05-30 21:50:07,037 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:07,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:07,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:07,039 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:07,039 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:07,044 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:07,045 INFO  L82        PathProgramCache]: Analyzing trace with hash -422926724, now seen corresponding path program 1 times
[2020-05-30 21:50:07,045 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:07,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:07,625 INFO  L134       CoverageAnalysis]: Checked inductivity of 281 backedges. 4 proven. 39 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-05-30 21:50:07,625 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:50:07,626 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-30 21:50:07,626 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:07,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:50:07,626 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=289, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:50:07,626 INFO  L87              Difference]: Start difference. First operand 8955 states and 9752 transitions. cyclomatic complexity: 827 Second operand 19 states.
[2020-05-30 21:50:18,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:18,057 INFO  L93              Difference]: Finished difference Result 9195 states and 10133 transitions.
[2020-05-30 21:50:18,057 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-30 21:50:18,057 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9195 states and 10133 transitions.
[2020-05-30 21:50:18,071 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:50:18,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9195 states to 9195 states and 10133 transitions.
[2020-05-30 21:50:18,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 542
[2020-05-30 21:50:18,087 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 542
[2020-05-30 21:50:18,088 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9195 states and 10133 transitions.
[2020-05-30 21:50:18,092 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:18,092 INFO  L728         BuchiCegarLoop]: Abstraction has 9195 states and 10133 transitions.
[2020-05-30 21:50:18,096 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9195 states and 10133 transitions.
[2020-05-30 21:50:18,131 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9195 to 9053.
[2020-05-30 21:50:18,132 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9053 states.
[2020-05-30 21:50:18,142 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9053 states to 9053 states and 9937 transitions.
[2020-05-30 21:50:18,142 INFO  L751         BuchiCegarLoop]: Abstraction has 9053 states and 9937 transitions.
[2020-05-30 21:50:18,142 INFO  L631         BuchiCegarLoop]: Abstraction has 9053 states and 9937 transitions.
[2020-05-30 21:50:18,142 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 21:50:18,142 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9053 states and 9937 transitions.
[2020-05-30 21:50:18,150 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:18,150 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:18,150 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:18,152 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:18,152 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:18,157 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:18,157 INFO  L82        PathProgramCache]: Analyzing trace with hash -25504966, now seen corresponding path program 2 times
[2020-05-30 21:50:18,158 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:18,199 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:19,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 292 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 283 trivial. 0 not checked.
[2020-05-30 21:50:19,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:50:19,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-30 21:50:19,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:19,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-30 21:50:19,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=719, Unknown=0, NotChecked=0, Total=812
[2020-05-30 21:50:19,066 INFO  L87              Difference]: Start difference. First operand 9053 states and 9937 transitions. cyclomatic complexity: 925 Second operand 29 states.
[2020-05-30 21:50:38,184 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:38,185 INFO  L93              Difference]: Finished difference Result 9847 states and 11053 transitions.
[2020-05-30 21:50:38,185 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-05-30 21:50:38,185 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9847 states and 11053 transitions.
[2020-05-30 21:50:38,207 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:38,229 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9847 states to 9847 states and 11051 transitions.
[2020-05-30 21:50:38,229 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 527
[2020-05-30 21:50:38,230 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 527
[2020-05-30 21:50:38,230 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9847 states and 11051 transitions.
[2020-05-30 21:50:38,236 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:38,236 INFO  L728         BuchiCegarLoop]: Abstraction has 9847 states and 11051 transitions.
[2020-05-30 21:50:38,241 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9847 states and 11051 transitions.
[2020-05-30 21:50:38,283 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9847 to 9182.
[2020-05-30 21:50:38,284 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9182 states.
[2020-05-30 21:50:38,295 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9182 states to 9182 states and 10160 transitions.
[2020-05-30 21:50:38,295 INFO  L751         BuchiCegarLoop]: Abstraction has 9182 states and 10160 transitions.
[2020-05-30 21:50:38,295 INFO  L631         BuchiCegarLoop]: Abstraction has 9182 states and 10160 transitions.
[2020-05-30 21:50:38,295 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 21:50:38,295 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9182 states and 10160 transitions.
[2020-05-30 21:50:38,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:38,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:38,304 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:38,306 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:38,306 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:38,311 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:38,311 INFO  L82        PathProgramCache]: Analyzing trace with hash 1494439111, now seen corresponding path program 1 times
[2020-05-30 21:50:38,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:38,379 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:38,671 INFO  L134       CoverageAnalysis]: Checked inductivity of 563 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 554 trivial. 0 not checked.
[2020-05-30 21:50:38,671 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:50:38,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:50:38,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:38,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:50:38,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:50:38,672 INFO  L87              Difference]: Start difference. First operand 9182 states and 10160 transitions. cyclomatic complexity: 1024 Second operand 3 states.
[2020-05-30 21:50:38,716 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:38,716 INFO  L93              Difference]: Finished difference Result 9158 states and 10110 transitions.
[2020-05-30 21:50:38,716 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:50:38,716 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9158 states and 10110 transitions.
[2020-05-30 21:50:38,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:38,747 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9158 states to 9158 states and 10110 transitions.
[2020-05-30 21:50:38,747 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 522
[2020-05-30 21:50:38,747 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 522
[2020-05-30 21:50:38,747 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9158 states and 10110 transitions.
[2020-05-30 21:50:38,752 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:38,752 INFO  L728         BuchiCegarLoop]: Abstraction has 9158 states and 10110 transitions.
[2020-05-30 21:50:38,756 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9158 states and 10110 transitions.
[2020-05-30 21:50:38,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9158 to 9158.
[2020-05-30 21:50:38,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9158 states.
[2020-05-30 21:50:38,800 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9158 states to 9158 states and 10110 transitions.
[2020-05-30 21:50:38,800 INFO  L751         BuchiCegarLoop]: Abstraction has 9158 states and 10110 transitions.
[2020-05-30 21:50:38,800 INFO  L631         BuchiCegarLoop]: Abstraction has 9158 states and 10110 transitions.
[2020-05-30 21:50:38,800 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 21:50:38,800 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9158 states and 10110 transitions.
[2020-05-30 21:50:38,807 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:38,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:38,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:38,810 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:38,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:38,815 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:38,815 INFO  L82        PathProgramCache]: Analyzing trace with hash -1039837332, now seen corresponding path program 1 times
[2020-05-30 21:50:38,815 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:38,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:39,441 INFO  L134       CoverageAnalysis]: Checked inductivity of 716 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 702 trivial. 0 not checked.
[2020-05-30 21:50:39,441 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:50:39,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-30 21:50:39,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:39,442 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:50:39,442 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=289, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:50:39,442 INFO  L87              Difference]: Start difference. First operand 9158 states and 10110 transitions. cyclomatic complexity: 998 Second operand 19 states.
[2020-05-30 21:50:50,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:50:50,433 INFO  L93              Difference]: Finished difference Result 9278 states and 10233 transitions.
[2020-05-30 21:50:50,433 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:50:50,433 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9278 states and 10233 transitions.
[2020-05-30 21:50:50,454 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:50:50,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9278 states to 9278 states and 10233 transitions.
[2020-05-30 21:50:50,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 542
[2020-05-30 21:50:50,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 542
[2020-05-30 21:50:50,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9278 states and 10233 transitions.
[2020-05-30 21:50:50,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:50:50,480 INFO  L728         BuchiCegarLoop]: Abstraction has 9278 states and 10233 transitions.
[2020-05-30 21:50:50,485 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9278 states and 10233 transitions.
[2020-05-30 21:50:50,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9278 to 9144.
[2020-05-30 21:50:50,524 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9144 states.
[2020-05-30 21:50:50,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9144 states to 9144 states and 10059 transitions.
[2020-05-30 21:50:50,534 INFO  L751         BuchiCegarLoop]: Abstraction has 9144 states and 10059 transitions.
[2020-05-30 21:50:50,534 INFO  L631         BuchiCegarLoop]: Abstraction has 9144 states and 10059 transitions.
[2020-05-30 21:50:50,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-30 21:50:50,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9144 states and 10059 transitions.
[2020-05-30 21:50:50,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:50:50,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:50:50,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:50:50,545 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:50:50,545 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:50:50,550 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:50:50,550 INFO  L82        PathProgramCache]: Analyzing trace with hash -610229572, now seen corresponding path program 1 times
[2020-05-30 21:50:50,550 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:50:50,599 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:50:51,831 INFO  L134       CoverageAnalysis]: Checked inductivity of 456 backedges. 0 proven. 84 refuted. 0 times theorem prover too weak. 372 trivial. 0 not checked.
[2020-05-30 21:50:51,831 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:50:51,831 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-30 21:50:51,832 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:50:51,832 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-30 21:50:51,832 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1056, Unknown=0, NotChecked=0, Total=1190
[2020-05-30 21:50:51,832 INFO  L87              Difference]: Start difference. First operand 9144 states and 10059 transitions. cyclomatic complexity: 956 Second operand 35 states.
[2020-05-30 21:51:09,429 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:51:09,430 INFO  L93              Difference]: Finished difference Result 9638 states and 10692 transitions.
[2020-05-30 21:51:09,430 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-30 21:51:09,430 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9638 states and 10692 transitions.
[2020-05-30 21:51:09,448 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:09,467 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9638 states to 9245 states and 10232 transitions.
[2020-05-30 21:51:09,467 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 527
[2020-05-30 21:51:09,468 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 527
[2020-05-30 21:51:09,468 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9245 states and 10232 transitions.
[2020-05-30 21:51:09,472 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:51:09,472 INFO  L728         BuchiCegarLoop]: Abstraction has 9245 states and 10232 transitions.
[2020-05-30 21:51:09,476 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9245 states and 10232 transitions.
[2020-05-30 21:51:09,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9245 to 9144.
[2020-05-30 21:51:09,512 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9144 states.
[2020-05-30 21:51:09,523 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9144 states to 9144 states and 10058 transitions.
[2020-05-30 21:51:09,523 INFO  L751         BuchiCegarLoop]: Abstraction has 9144 states and 10058 transitions.
[2020-05-30 21:51:09,523 INFO  L631         BuchiCegarLoop]: Abstraction has 9144 states and 10058 transitions.
[2020-05-30 21:51:09,523 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-30 21:51:09,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9144 states and 10058 transitions.
[2020-05-30 21:51:09,531 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:09,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:51:09,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:51:09,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:51:09,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:51:09,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:51:09,538 INFO  L82        PathProgramCache]: Analyzing trace with hash 924505557, now seen corresponding path program 1 times
[2020-05-30 21:51:09,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:51:09,586 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:51:10,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 727 backedges. 25 proven. 77 refuted. 0 times theorem prover too weak. 625 trivial. 0 not checked.
[2020-05-30 21:51:10,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:51:10,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-05-30 21:51:10,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:51:10,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-05-30 21:51:10,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=779, Unknown=0, NotChecked=0, Total=870
[2020-05-30 21:51:10,619 INFO  L87              Difference]: Start difference. First operand 9144 states and 10058 transitions. cyclomatic complexity: 955 Second operand 30 states.
[2020-05-30 21:51:27,676 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:51:27,676 INFO  L93              Difference]: Finished difference Result 9323 states and 10311 transitions.
[2020-05-30 21:51:27,676 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-05-30 21:51:27,676 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9323 states and 10311 transitions.
[2020-05-30 21:51:27,694 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:27,710 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9323 states to 8930 states and 9851 transitions.
[2020-05-30 21:51:27,710 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 527
[2020-05-30 21:51:27,710 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 527
[2020-05-30 21:51:27,711 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8930 states and 9851 transitions.
[2020-05-30 21:51:27,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:51:27,715 INFO  L728         BuchiCegarLoop]: Abstraction has 8930 states and 9851 transitions.
[2020-05-30 21:51:27,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8930 states and 9851 transitions.
[2020-05-30 21:51:27,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8930 to 8881.
[2020-05-30 21:51:27,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8881 states.
[2020-05-30 21:51:27,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8881 states to 8881 states and 9752 transitions.
[2020-05-30 21:51:27,766 INFO  L751         BuchiCegarLoop]: Abstraction has 8881 states and 9752 transitions.
[2020-05-30 21:51:27,766 INFO  L631         BuchiCegarLoop]: Abstraction has 8881 states and 9752 transitions.
[2020-05-30 21:51:27,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-05-30 21:51:27,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8881 states and 9752 transitions.
[2020-05-30 21:51:27,774 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:27,774 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:51:27,774 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:51:27,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:51:27,776 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:51:27,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:51:27,780 INFO  L82        PathProgramCache]: Analyzing trace with hash -436650691, now seen corresponding path program 1 times
[2020-05-30 21:51:27,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:51:27,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:51:28,590 INFO  L134       CoverageAnalysis]: Checked inductivity of 292 backedges. 29 proven. 9 refuted. 0 times theorem prover too weak. 254 trivial. 0 not checked.
[2020-05-30 21:51:28,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:51:28,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-30 21:51:28,591 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:51:28,591 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-30 21:51:28,591 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=721, Unknown=0, NotChecked=0, Total=812
[2020-05-30 21:51:28,591 INFO  L87              Difference]: Start difference. First operand 8881 states and 9752 transitions. cyclomatic complexity: 910 Second operand 29 states.
[2020-05-30 21:51:47,082 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:51:47,082 INFO  L93              Difference]: Finished difference Result 9193 states and 10159 transitions.
[2020-05-30 21:51:47,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-05-30 21:51:47,083 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9193 states and 10159 transitions.
[2020-05-30 21:51:47,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:47,117 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9193 states to 9193 states and 10157 transitions.
[2020-05-30 21:51:47,117 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 527
[2020-05-30 21:51:47,118 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 527
[2020-05-30 21:51:47,118 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9193 states and 10157 transitions.
[2020-05-30 21:51:47,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:51:47,122 INFO  L728         BuchiCegarLoop]: Abstraction has 9193 states and 10157 transitions.
[2020-05-30 21:51:47,126 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9193 states and 10157 transitions.
[2020-05-30 21:51:47,163 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9193 to 9148.
[2020-05-30 21:51:47,163 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9148 states.
[2020-05-30 21:51:47,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9148 states to 9148 states and 10074 transitions.
[2020-05-30 21:51:47,173 INFO  L751         BuchiCegarLoop]: Abstraction has 9148 states and 10074 transitions.
[2020-05-30 21:51:47,173 INFO  L631         BuchiCegarLoop]: Abstraction has 9148 states and 10074 transitions.
[2020-05-30 21:51:47,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-05-30 21:51:47,174 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9148 states and 10074 transitions.
[2020-05-30 21:51:47,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:51:47,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:51:47,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:51:47,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:51:47,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:51:47,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:51:47,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 1462736996, now seen corresponding path program 1 times
[2020-05-30 21:51:47,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:51:47,221 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:51:47,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 553 backedges. 177 proven. 21 refuted. 0 times theorem prover too weak. 355 trivial. 0 not checked.
[2020-05-30 21:51:47,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:51:47,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-05-30 21:51:47,571 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:51:47,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-05-30 21:51:47,572 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-05-30 21:51:47,572 INFO  L87              Difference]: Start difference. First operand 9148 states and 10074 transitions. cyclomatic complexity: 968 Second operand 15 states.
[2020-05-30 21:51:54,427 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:51:54,427 INFO  L93              Difference]: Finished difference Result 10121 states and 11201 transitions.
[2020-05-30 21:51:54,427 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:51:54,427 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10121 states and 11201 transitions.
[2020-05-30 21:51:54,451 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:51:54,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10121 states to 10117 states and 11189 transitions.
[2020-05-30 21:51:54,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 542
[2020-05-30 21:51:54,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 542
[2020-05-30 21:51:54,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10117 states and 11189 transitions.
[2020-05-30 21:51:54,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:51:54,480 INFO  L728         BuchiCegarLoop]: Abstraction has 10117 states and 11189 transitions.
[2020-05-30 21:51:54,485 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10117 states and 11189 transitions.
[2020-05-30 21:51:54,528 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10117 to 10092.
[2020-05-30 21:51:54,528 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10092 states.
[2020-05-30 21:51:54,541 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10092 states to 10092 states and 11122 transitions.
[2020-05-30 21:51:54,541 INFO  L751         BuchiCegarLoop]: Abstraction has 10092 states and 11122 transitions.
[2020-05-30 21:51:54,541 INFO  L631         BuchiCegarLoop]: Abstraction has 10092 states and 11122 transitions.
[2020-05-30 21:51:54,541 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-05-30 21:51:54,541 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10092 states and 11122 transitions.
[2020-05-30 21:51:54,550 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:51:54,550 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:51:54,550 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:51:54,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:51:54,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND TRUE   slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this]
[L3193]                    gas := gas - 20014;
[L3194]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3195]                    assume slotPrice_s709 >= 0;
[L3196]                    lowestSlotPrice_ValidatorAuction[this] := slotPrice_s709;
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3);
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:51:54,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:51:54,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 1236869951, now seen corresponding path program 1 times
[2020-05-30 21:51:54,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:51:54,605 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:51:55,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 456 backedges. 29 proven. 84 refuted. 0 times theorem prover too weak. 343 trivial. 0 not checked.
[2020-05-30 21:51:55,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:51:55,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-30 21:51:55,694 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:51:55,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 21:51:55,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1126, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 21:51:55,695 INFO  L87              Difference]: Start difference. First operand 10092 states and 11122 transitions. cyclomatic complexity: 1067 Second operand 36 states.
[2020-05-30 21:52:15,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:15,999 INFO  L93              Difference]: Finished difference Result 10269 states and 11346 transitions.
[2020-05-30 21:52:15,999 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-30 21:52:15,999 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10269 states and 11346 transitions.
[2020-05-30 21:52:16,017 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-30 21:52:16,035 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10269 states to 9876 states and 10886 transitions.
[2020-05-30 21:52:16,035 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 550
[2020-05-30 21:52:16,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 550
[2020-05-30 21:52:16,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9876 states and 10886 transitions.
[2020-05-30 21:52:16,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:16,041 INFO  L728         BuchiCegarLoop]: Abstraction has 9876 states and 10886 transitions.
[2020-05-30 21:52:16,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9876 states and 10886 transitions.
[2020-05-30 21:52:16,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9876 to 9255.
[2020-05-30 21:52:16,082 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9255 states.
[2020-05-30 21:52:16,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9255 states to 9255 states and 10092 transitions.
[2020-05-30 21:52:16,093 INFO  L751         BuchiCegarLoop]: Abstraction has 9255 states and 10092 transitions.
[2020-05-30 21:52:16,093 INFO  L631         BuchiCegarLoop]: Abstraction has 9255 states and 10092 transitions.
[2020-05-30 21:52:16,094 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-05-30 21:52:16,094 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9255 states and 10092 transitions.
[2020-05-30 21:52:16,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 21:52:16,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:16,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:16,104 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:16,104 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc low;
[L7]                       havoc user;
[L5032]                    assume null == 0;
[L5033]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5033]        RET         call this := FreshRefGenerator__success();
[L5034]                    assume now >= 0;
[L5035]                    assume DType[this] == ValidatorAuction;
[L5036]                    gas := gas - 53000;
[L5037]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5037]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5038]                    assume !revert && gas >= 0;
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND FALSE  !(choice == 4)
[L4989]        COND TRUE   choice == 3
[L4991]                    gas := gas - 21000;
[L4992]        COND TRUE   gas >= 0
[L4994]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L4994]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L4995]                    assume msgvalue_MSG == 0;
[L4996]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L4996]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND TRUE   choice == 6
[L4964]                    gas := gas - 21000;
[L4965]        COND TRUE   gas >= 0
[L4967]                    assume msgvalue_MSG == 0;
[L4968]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4530]                    gas := gas - 4257;
[L4531]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L4968]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(user == msgsender_MSG);
[L7]                       revert := revert_hold;
[L7]                       assume !(user == msgsender_MSG);
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND TRUE   choice == 7
[L4955]                    gas := gas - 21000;
[L4956]        COND TRUE   gas >= 0
[L4958]                    assume msgvalue_MSG >= 0;
[L4959]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_bid_ValidatorAuction0 := true;
[L7]                       success_bid_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L4959]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND FALSE  !(choice == 5)
[L4980]        COND TRUE   choice == 4
[L4982]                    gas := gas - 21000;
[L4983]        COND TRUE   gas >= 0
[L4985]                    assume msgvalue_MSG == 0;
[L4986]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume low == lowestSlotPrice_ValidatorAuction[this];
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4986]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND FALSE  !(choice == 8)
[L4953]        COND FALSE  !(choice == 7)
[L4962]        COND FALSE  !(choice == 6)
[L4971]        COND TRUE   choice == 5
[L4973]                    gas := gas - 21000;
[L4974]        COND TRUE   gas >= 0
[L4976]                    assume msgvalue_MSG == 0;
[L4977]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]                    gas := gas - 2148;
[L4555]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4602]                    gas := gas - 876;
[L4603]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4626]                    gas := gas - 1008;
[L4627]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L4977]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);
[L5041]        CALL        call CorralChoice_ValidatorAuction(this);
[L4910]                    havoc msgsender_MSG;
[L4911]                    havoc msgvalue_MSG;
[L4912]                    havoc choice;
[L4913]                    havoc newOwner_s43;
[L4914]                    havoc _startPriceInWei_s578;
[L4915]                    havoc _auctionDurationInDays_s578;
[L4916]                    havoc _minimalNumberOfParticipants_s578;
[L4917]                    havoc _maximalNumberOfParticipants_s578;
[L4918]                    havoc _depositLocker_s578;
[L4919]                    havoc addressesToWhitelist_s852;
[L4920]                    havoc __ret_0_currentPrice;
[L4921]                    havoc secondsSinceStart_s978;
[L4922]                    havoc __ret_0_priceAtElapsedTime;
[L4923]                    havoc tmpNow;
[L4924]                    havoc gas;
[L4925]                    assume gas > 4000000 && gas <= 8000000;
[L4926]                    tmpNow := now;
[L4927]                    havoc now;
[L4928]                    assume now > tmpNow;
[L4929]                    assume msgsender_MSG != null;
[L4930]                    assume DType[msgsender_MSG] != Ownable;
[L4931]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]                    assume DType[msgsender_MSG] != DepositLocker;
[L4933]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]                    Alloc[msgsender_MSG] := true;
[L4935]        COND FALSE  !(choice == 9)
[L4944]        COND TRUE   choice == 8
[L4946]                    gas := gas - 21000;
[L4947]        COND TRUE   gas >= 0
[L4949]                    assume msgvalue_MSG == 0;
[L4950]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L4650]                    gas := gas - 10516;
[L4651]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L4451]                    havoc __exception;
[L4452]        COND FALSE  !(__exception)
[L4500]        COND TRUE   Balance[from] >= amount
[L4502]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4301]                    assume Balance[from] >= amount;
[L4302]                    Balance[from] := Balance[from] - amount;
[L4303]                    Balance[to] := Balance[to] + amount;
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L4502]        RET         call FallbackDispatch__success(from, to, amount);
[L4503]                    success := true;
[L4510]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0 - low);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG && auctionState_ValidatorAuction[this] == 3;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L4950]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5041]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5041]  CALL        call CorralChoice_ValidatorAuction(this);
[L4910]              havoc msgsender_MSG;
[L4911]              havoc msgvalue_MSG;
[L4912]              havoc choice;
[L4913]              havoc newOwner_s43;
[L4914]              havoc _startPriceInWei_s578;
[L4915]              havoc _auctionDurationInDays_s578;
[L4916]              havoc _minimalNumberOfParticipants_s578;
[L4917]              havoc _maximalNumberOfParticipants_s578;
[L4918]              havoc _depositLocker_s578;
[L4919]              havoc addressesToWhitelist_s852;
[L4920]              havoc __ret_0_currentPrice;
[L4921]              havoc secondsSinceStart_s978;
[L4922]              havoc __ret_0_priceAtElapsedTime;
[L4923]              havoc tmpNow;
[L4924]              havoc gas;
[L4925]              assume gas > 4000000 && gas <= 8000000;
[L4926]              tmpNow := now;
[L4927]              havoc now;
[L4928]              assume now > tmpNow;
[L4929]              assume msgsender_MSG != null;
[L4930]              assume DType[msgsender_MSG] != Ownable;
[L4931]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L4932]              assume DType[msgsender_MSG] != DepositLocker;
[L4933]              assume DType[msgsender_MSG] != ValidatorAuction;
[L4934]              Alloc[msgsender_MSG] := true;
[L4935]  COND FALSE  !(choice == 9)
[L4944]  COND FALSE  !(choice == 8)
[L4953]  COND FALSE  !(choice == 7)
[L4962]  COND FALSE  !(choice == 6)
[L4971]  COND FALSE  !(choice == 5)
[L4980]  COND FALSE  !(choice == 4)
[L4989]  COND FALSE  !(choice == 3)
[L4999]  COND FALSE  !(choice == 2)
[L5008]  COND FALSE  !(choice == 1)
[L5041]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:16,109 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:16,109 INFO  L82        PathProgramCache]: Analyzing trace with hash 730154783, now seen corresponding path program 1 times
[2020-05-30 21:52:16,109 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:16,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:16,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 1144 backedges. 356 proven. 68 refuted. 0 times theorem prover too weak. 720 trivial. 0 not checked.
[2020-05-30 21:52:16,775 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:16,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-05-30 21:52:16,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:16,775 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-30 21:52:16,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=331, Unknown=0, NotChecked=0, Total=380
[2020-05-30 21:52:16,776 INFO  L87              Difference]: Start difference. First operand 9255 states and 10092 transitions. cyclomatic complexity: 864 Second operand 20 states.
[2020-05-30 21:52:20,624 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:20,624 INFO  L93              Difference]: Finished difference Result 6001 states and 6555 transitions.
[2020-05-30 21:52:20,624 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:52:20,624 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6001 states and 6555 transitions.
[2020-05-30 21:52:20,635 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:52:20,635 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6001 states to 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 21:52:20,636 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 21:52:20,636 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:20,636 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 57============
[2020-05-30 21:52:20,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 21:52:20,636 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 21:52:20,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 21:52:20,640 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:52:20 BasicIcfg
[2020-05-30 21:52:20,640 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 21:52:20,640 INFO  L168              Benchmark]: Toolchain (without parser) took 635487.26 ms. Allocated memory was 514.9 MB in the beginning and 6.6 GB in the end (delta: 6.1 GB). Free memory was 453.4 MB in the beginning and 776.2 MB in the end (delta: -322.7 MB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,641 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,642 INFO  L168              Benchmark]: Boogie Preprocessor took 85.79 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,642 INFO  L168              Benchmark]: UtopiaSpecLang took 57.79 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.3 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,642 INFO  L168              Benchmark]: Boogie Printer took 15.21 ms. Allocated memory is still 514.9 MB. Free memory was 437.3 MB in the beginning and 433.2 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,643 INFO  L168              Benchmark]: RCFGBuilder took 654.65 ms. Allocated memory was 514.9 MB in the beginning and 555.7 MB in the end (delta: 40.9 MB). Free memory was 433.2 MB in the beginning and 464.9 MB in the end (delta: -31.7 MB). Peak memory consumption was 91.8 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,643 INFO  L168              Benchmark]: UtopiaLTL2Aut took 46.23 ms. Allocated memory is still 555.7 MB. Free memory was 464.9 MB in the beginning and 460.8 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,644 INFO  L168              Benchmark]: BÃ¼chi Program Product took 8737.97 ms. Allocated memory was 555.7 MB in the beginning and 2.1 GB in the end (delta: 1.5 GB). Free memory was 460.8 MB in the beginning and 995.4 MB in the end (delta: -534.7 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,644 INFO  L168              Benchmark]: BlockEncodingV2 took 696.76 ms. Allocated memory is still 2.1 GB. Free memory was 995.4 MB in the beginning and 542.8 MB in the end (delta: 452.7 MB). Peak memory consumption was 452.7 MB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,644 INFO  L168              Benchmark]: BuchiAutomizer took 625188.86 ms. Allocated memory was 2.1 GB in the beginning and 6.6 GB in the end (delta: 4.5 GB). Free memory was 542.8 MB in the beginning and 776.2 MB in the end (delta: -233.4 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
[2020-05-30 21:52:20,648 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    21839 locations, 83662 edges
  - StatisticsResult: Encoded RCFG
    21671 locations, 82629 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 85.79 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 444.0 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.79 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 437.3 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.21 ms. Allocated memory is still 514.9 MB. Free memory was 437.3 MB in the beginning and 433.2 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 654.65 ms. Allocated memory was 514.9 MB in the beginning and 555.7 MB in the end (delta: 40.9 MB). Free memory was 433.2 MB in the beginning and 464.9 MB in the end (delta: -31.7 MB). Peak memory consumption was 91.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 46.23 ms. Allocated memory is still 555.7 MB. Free memory was 464.9 MB in the beginning and 460.8 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 8737.97 ms. Allocated memory was 555.7 MB in the beginning and 2.1 GB in the end (delta: 1.5 GB). Free memory was 460.8 MB in the beginning and 995.4 MB in the end (delta: -534.7 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 696.76 ms. Allocated memory is still 2.1 GB. Free memory was 995.4 MB in the beginning and 542.8 MB in the end (delta: 452.7 MB). Peak memory consumption was 452.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 625188.86 ms. Allocated memory was 2.1 GB in the beginning and 6.6 GB in the end (delta: 4.5 GB). Free memory was 542.8 MB in the beginning and 776.2 MB in the end (delta: -233.4 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    2396 locations, 2919 edges
  - StatisticsResult: BuchiProgram size
    21839 locations, 83662 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 56 terminating modules (56 trivial, 0 deterministic, 0 nondeterministic). 56 modules have a trivial ranking function, the largest among these consists of 36 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 625.1s and 57 iterations.  TraceHistogramMax:8. Analysis of lassos took 19.5s. Construction of modules took 496.1s. BÃ¼chi inclusion checks took 88.0s. Highest rank in rank-based complementation 0. Minimization of det autom 56. Minimization of nondet autom 0. Automata minimization 11.1s AutomataMinimizationTime, 55 MinimizatonAttempts, 25085 StatesRemovedByMinimization, 47 NontrivialMinimizations. Non-live state removal took 7.0s Buchi closure took 0.0s. Biggest automaton had 42584 states and ocurred in iteration 39.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 743730 SDtfs, 888995 SDslu, 2060906 SDs, 0 SdLazy, 3671372 SolverSat, 123965 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 496.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU56 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_bid_ValidatorAuction0) ) && ( <>(success_withdraw_ValidatorAuction0) ) )&& ! ( ( []( (success_closeAuction_ValidatorAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
