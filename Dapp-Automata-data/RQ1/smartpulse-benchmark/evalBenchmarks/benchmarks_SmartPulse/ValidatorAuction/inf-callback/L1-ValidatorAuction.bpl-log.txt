This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 21:52:22,458 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 21:52:22,459 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 21:52:22,471 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 21:52:22,471 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 21:52:22,473 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 21:52:22,474 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 21:52:22,476 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 21:52:22,477 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 21:52:22,478 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 21:52:22,480 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 21:52:22,480 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 21:52:22,481 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 21:52:22,482 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 21:52:22,484 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 21:52:22,485 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 21:52:22,486 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 21:52:22,487 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 21:52:22,489 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 21:52:22,490 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 21:52:22,491 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 21:52:22,492 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 21:52:22,494 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 21:52:22,495 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 21:52:22,495 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 21:52:22,496 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 21:52:22,496 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 21:52:22,497 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 21:52:22,497 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 21:52:22,497 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 21:52:22,498 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 21:52:22,498 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 21:52:22,499 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 21:52:22,500 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 21:52:22,501 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 21:52:22,502 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 21:52:22,502 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 21:52:22,503 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 21:52:22,503 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 21:52:22,503 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 21:52:22,504 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 21:52:22,505 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 21:52:22,505 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 21:52:22,515 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 21:52:22,515 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 21:52:22,516 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 21:52:22,516 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 21:52:22,516 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 21:52:22,517 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 21:52:22,517 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 21:52:22,517 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 21:52:22,517 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 21:52:22,518 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 21:52:22,519 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 21:52:22,519 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 21:52:22,519 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 21:52:22,537 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 21:52:22,548 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 21:52:22,550 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 21:52:22,551 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 21:52:22,551 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 21:52:22,552 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/inf-callback/L1-ValidatorAuction.bpl
[2020-05-30 21:52:22,552 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/ValidatorAuction/inf-callback/L1-ValidatorAuction.bpl'
[2020-05-30 21:52:22,622 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 21:52:22,623 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 21:52:22,623 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 21:52:22,624 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 21:52:22,624 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 21:52:22,637 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,638 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,666 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,666 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,685 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,693 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,701 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,709 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 21:52:22,710 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 21:52:22,710 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 21:52:22,712 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 21:52:22,715 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/1) ...
[2020-05-30 21:52:22,729 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:52:22,735 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:52:22,742 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:52:22,745 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,bid_ValidatorAuction>]]
[2020-05-30 21:52:22,747 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_bid_ValidatorAuction_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_bid_ValidatorAuction_2_0,GLOBAL]]]
[2020-05-30 21:52:22,748 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(ValidatorAuction.closeAuction)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(ValidatorAuction.bid, 2, (user == msg.sender)))))))
[2020-05-30 21:52:22,748 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_closeAuction_ValidatorAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-30 21:52:22,749 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:52:22,749 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:52:22,749 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:52:22,751 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_ValidatorAuction>]]
[2020-05-30 21:52:22,751 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(ValidatorAuction.withdraw, (user == msg.sender))))
[2020-05-30 21:52:22,751 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_withdraw_ValidatorAuction0) )
Executed UtopiaSpecLang
[2020-05-30 21:52:22,763 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:52:22 PropertyContainer
[2020-05-30 21:52:22,764 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 21:52:22,764 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 21:52:22,764 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 21:52:22,764 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 21:52:22,765 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/2) ...
[2020-05-30 21:52:22,765 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:52:22,765 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 21:52:22,778 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:52:22" (2/2) ...
[2020-05-30 21:52:22,778 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 21:52:22,778 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 21:52:22,779 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 21:52:22,779 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 21:52:22,779 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/2) ...
[2020-05-30 21:52:22,824 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 21:52:22,824 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:52:22,824 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 21:52:22,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 21:52:22,824 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 21:52:22,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 21:52:22,825 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:52:22,825 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:52:22,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface
[2020-05-30 21:52:22,825 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLockerInterface
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker
[2020-05-30 21:52:22,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker
[2020-05-30 21:52:22,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker
[2020-05-30 21:52:22,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker
[2020-05-30 21:52:22,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker
[2020-05-30 21:52:22,826 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker
[2020-05-30 21:52:22,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker
[2020-05-30 21:52:22,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction
[2020-05-30 21:52:22,827 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:52:22,828 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__success
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 21:52:22,829 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DepositLocker
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DepositLocker
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 21:52:22,830 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__success
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure init_DepositLocker__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__success
[2020-05-30 21:52:22,831 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_DepositLocker__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__success
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_DepositLocker__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__success
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure slash_DepositLocker__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__success
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_ValidatorAuction__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,832 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:52:22,833 INFO  L130     BoogieDeclarations]: Found specification of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure isInitialised_pre__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure isDeposited_pre__fail
[2020-05-30 21:52:22,834 INFO  L130     BoogieDeclarations]: Found specification of procedure isNotDeposited_pre__fail
[2020-05-30 21:52:22,835 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:52:22,835 INFO  L130     BoogieDeclarations]: Found specification of procedure stateIs_pre__fail
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 21:52:22,835 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__fail
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface_NoBaseCtor__success
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__fail
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLockerInterface_DepositLockerInterface__success
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__fail
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker_NoBaseCtor__success
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__fail
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure DepositLocker_DepositLocker__success
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__fail
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DepositLocker__success
[2020-05-30 21:52:22,836 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_DepositLocker__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure registerDepositor_DepositLocker__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_DepositLocker__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_DepositLocker__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure slash_DepositLocker__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction_NoBaseCtor__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure ValidatorAuction_ValidatorAuction__success
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__fail
[2020-05-30 21:52:22,837 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAuction_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositBids_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure closeAuction_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__fail
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ValidatorAuction__success
[2020-05-30 21:52:22,838 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure currentPrice_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure priceAtElapsedTime_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionEnded_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAfterAuctionFailed_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToDepositPending_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure transitionToAuctionFailed_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure isSenderContract_ValidatorAuction__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 21:52:22,839 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isInitialised_pre__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isDeposited_pre__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure isNotDeposited_pre__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyDepositorsProxy_pre__success
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__fail
[2020-05-30 21:52:22,840 INFO  L138     BoogieDeclarations]: Found implementation of procedure stateIs_pre__success
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLockerInterface
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLockerInterface
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DepositLocker
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DepositLocker
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ValidatorAuction
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 21:52:22,841 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 21:52:22,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 21:52:22,969 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:52:23,252 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:52:23,399 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:52:23,414 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 21:52:23,469 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 21:52:23,470 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 21:52:23,472 INFO  L202        PluginConnector]: Adding new model L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:52:23 BoogieIcfgContainer
[2020-05-30 21:52:23,472 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:52:22" (2/2) ...
[2020-05-30 21:52:23,472 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 21:52:23,472 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@41fcfb61 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:52:23, skipping insertion in model container
[2020-05-30 21:52:23,472 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 21:52:23,473 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 21:52:23,473 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 21:52:23,474 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 21:52:23,474 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/3) ...
[2020-05-30 21:52:23,475 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@588330f8 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:52:23, skipping insertion in model container
[2020-05-30 21:52:23,475 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:52:22" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( [] ( b -> ( <>c ) ) ) )  (exit command is null, workingDir is null)
[2020-05-30 21:52:23,520 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:52:23 NWAContainer
[2020-05-30 21:52:23,520 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 21:52:23,520 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 21:52:23,521 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 21:52:23,521 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 21:52:23,522 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:52:23" (3/4) ...
[2020-05-30 21:52:23,523 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@71ffe08a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:52:23, skipping insertion in model container
[2020-05-30 21:52:23,523 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:52:23" (4/4) ...
[2020-05-30 21:52:23,526 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-30 21:52:23,530 INFO  L110   BuchiProductObserver]: Initial RCFG 2651 locations, 3356 edges
[2020-05-30 21:52:23,530 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 21:52:23,541 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 21:52:26,969 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 21:52:26,982 INFO  L110   BuchiProductObserver]: BuchiProgram size 12218 locations, 31567 edges
[2020-05-30 21:52:26,983 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:52:26 BoogieIcfgContainer
[2020-05-30 21:52:26,983 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 21:52:26,983 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 21:52:26,983 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 21:52:26,984 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 21:52:26,985 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:52:26" (1/1) ...
[2020-05-30 21:52:27,178 INFO  L313           BlockEncoder]: Initial Icfg 12218 locations, 31567 edges
[2020-05-30 21:52:27,178 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 21:52:27,178 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 21:52:27,178 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 21:52:27,179 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 21:52:27,205 INFO  L70    emoveInfeasibleEdges]: Removed 208 edges and 22 locations because of local infeasibility
[2020-05-30 21:52:27,222 INFO  L70        RemoveSinkStates]: Removed 6 edges and 2 locations by removing sink states
[2020-05-30 21:52:27,250 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 21:52:27,259 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 21:52:27,267 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 21:52:27,267 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 21:52:27,275 INFO  L313           BlockEncoder]: Encoded RCFG 12134 locations, 31223 edges
[2020-05-30 21:52:27,275 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:52:27 BasicIcfg
[2020-05-30 21:52:27,275 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 21:52:27,276 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 21:52:27,276 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 21:52:27,278 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 21:52:27,278 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,278 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 09:52:22" (1/6) ...
[2020-05-30 21:52:27,280 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@37d987b1 and model type L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:52:27, skipping insertion in model container
[2020-05-30 21:52:27,280 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,280 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 09:52:22" (2/6) ...
[2020-05-30 21:52:27,280 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@37d987b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:52:27, skipping insertion in model container
[2020-05-30 21:52:27,281 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,281 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 09:52:23" (3/6) ...
[2020-05-30 21:52:27,281 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@37d987b1 and model type L1-ValidatorAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:52:27, skipping insertion in model container
[2020-05-30 21:52:27,281 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,281 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 09:52:23" (4/6) ...
[2020-05-30 21:52:27,281 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@37d987b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 09:52:27, skipping insertion in model container
[2020-05-30 21:52:27,281 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,282 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 09:52:26" (5/6) ...
[2020-05-30 21:52:27,282 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@37d987b1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 09:52:27, skipping insertion in model container
[2020-05-30 21:52:27,282 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 21:52:27,282 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 09:52:27" (6/6) ...
[2020-05-30 21:52:27,283 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-ValidatorAuction.bpl_BEv2
[2020-05-30 21:52:27,315 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 21:52:27,315 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 21:52:27,315 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 21:52:27,315 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 21:52:27,315 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 21:52:27,315 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 21:52:27,315 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 21:52:27,315 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 21:52:27,315 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 21:52:27,467 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12134 states.
[2020-05-30 21:52:27,590 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:27,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:27,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:27,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:27,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:27,599 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 21:52:27,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12134 states.
[2020-05-30 21:52:27,663 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:27,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:27,663 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:27,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:27,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5618]              assume null == 0;
[L5619]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5619]  RET         call this := FreshRefGenerator__success();
[L5620]              assume now >= 0;
[L5621]              assume DType[this] == ValidatorAuction;
[L5622]              gas := gas - 53000;
[L5623]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5623]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]              assume !revert && gas >= 0;

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:27,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:27,680 INFO  L82        PathProgramCache]: Analyzing trace with hash -782742937, now seen corresponding path program 1 times
[2020-05-30 21:52:27,684 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:27,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:27,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:52:27,755 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:27,755 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:52:28,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:28,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:52:28,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:52:28,218 INFO  L87              Difference]: Start difference. First operand 12134 states. Second operand 3 states.
[2020-05-30 21:52:28,974 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:28,974 INFO  L93              Difference]: Finished difference Result 9614 states and 16377 transitions.
[2020-05-30 21:52:28,974 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:52:28,976 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9614 states and 16377 transitions.
[2020-05-30 21:52:29,038 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:29,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9614 states to 9614 states and 16377 transitions.
[2020-05-30 21:52:29,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-30 21:52:29,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 113
[2020-05-30 21:52:29,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9614 states and 16377 transitions.
[2020-05-30 21:52:29,147 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:29,147 INFO  L728         BuchiCegarLoop]: Abstraction has 9614 states and 16377 transitions.
[2020-05-30 21:52:29,176 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9614 states and 16377 transitions.
[2020-05-30 21:52:29,318 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9614 to 9614.
[2020-05-30 21:52:29,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9614 states.
[2020-05-30 21:52:29,354 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9614 states to 9614 states and 16377 transitions.
[2020-05-30 21:52:29,355 INFO  L751         BuchiCegarLoop]: Abstraction has 9614 states and 16377 transitions.
[2020-05-30 21:52:29,355 INFO  L631         BuchiCegarLoop]: Abstraction has 9614 states and 16377 transitions.
[2020-05-30 21:52:29,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 21:52:29,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9614 states and 16377 transitions.
[2020-05-30 21:52:29,372 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:29,372 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:29,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:29,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:29,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_ValidatorAuction0 := false;
[L7]                 fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L5618]              assume null == 0;
[L5619]  CALL        call this := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L5619]  RET         call this := FreshRefGenerator__success();
[L5620]              assume now >= 0;
[L5621]              assume DType[this] == ValidatorAuction;
[L5622]              gas := gas - 53000;
[L5623]  CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND TRUE   revert
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5623]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]              assume !revert && gas >= 0;
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND TRUE   choice == 4
[L5568]              gas := gas - 21000;
[L5569]  COND TRUE   gas >= 0
[L5571]              assume msgvalue_MSG == 0;
[L5572]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]              gas := gas - 10516;
[L5237]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L5572]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND TRUE   choice == 4
[L5568]              gas := gas - 21000;
[L5569]  COND TRUE   gas >= 0
[L5571]              assume msgvalue_MSG == 0;
[L5572]  CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]               havoc __exception;
[L998]               revert := false;
[L999]   COND FALSE  !(__exception)
[L1041]  CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]              gas := gas - 10516;
[L5237]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]  COND TRUE   revert
[L1041]  RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_closeAuction_ValidatorAuction0 := true;
[L7]                 success_closeAuction_ValidatorAuction0 := false;
[L7]                 revert := revert_hold;
[L5572]  RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:29,380 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:29,380 INFO  L82        PathProgramCache]: Analyzing trace with hash 1287593233, now seen corresponding path program 1 times
[2020-05-30 21:52:29,381 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:29,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:29,409 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:52:29,410 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:29,410 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:52:29,411 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:29,412 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:52:29,412 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:52:29,412 INFO  L87              Difference]: Start difference. First operand 9614 states and 16377 transitions. cyclomatic complexity: 6783 Second operand 3 states.
[2020-05-30 21:52:29,793 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:29,793 INFO  L93              Difference]: Finished difference Result 9376 states and 11086 transitions.
[2020-05-30 21:52:29,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:52:29,793 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9376 states and 11086 transitions.
[2020-05-30 21:52:29,816 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:29,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9376 states to 9376 states and 11086 transitions.
[2020-05-30 21:52:29,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 113
[2020-05-30 21:52:29,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 113
[2020-05-30 21:52:29,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9376 states and 11086 transitions.
[2020-05-30 21:52:29,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:29,867 INFO  L728         BuchiCegarLoop]: Abstraction has 9376 states and 11086 transitions.
[2020-05-30 21:52:29,882 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9376 states and 11086 transitions.
[2020-05-30 21:52:29,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9376 to 9376.
[2020-05-30 21:52:29,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9376 states.
[2020-05-30 21:52:29,973 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9376 states to 9376 states and 11086 transitions.
[2020-05-30 21:52:29,973 INFO  L751         BuchiCegarLoop]: Abstraction has 9376 states and 11086 transitions.
[2020-05-30 21:52:29,973 INFO  L631         BuchiCegarLoop]: Abstraction has 9376 states and 11086 transitions.
[2020-05-30 21:52:29,973 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 21:52:29,973 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9376 states and 11086 transitions.
[2020-05-30 21:52:29,985 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 276
[2020-05-30 21:52:29,985 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:29,985 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:29,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:29,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND TRUE   revert
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND TRUE   revert
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:29,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:29,991 INFO  L82        PathProgramCache]: Analyzing trace with hash 2047017006, now seen corresponding path program 1 times
[2020-05-30 21:52:29,992 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:30,010 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:30,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 21:52:30,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:30,068 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:52:30,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:30,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:52:30,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:52:30,069 INFO  L87              Difference]: Start difference. First operand 9376 states and 11086 transitions. cyclomatic complexity: 1730 Second operand 3 states.
[2020-05-30 21:52:30,360 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:30,360 INFO  L93              Difference]: Finished difference Result 11504 states and 13636 transitions.
[2020-05-30 21:52:30,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:52:30,361 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11504 states and 13636 transitions.
[2020-05-30 21:52:30,397 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 318
[2020-05-30 21:52:30,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11504 states to 11504 states and 13636 transitions.
[2020-05-30 21:52:30,449 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 199
[2020-05-30 21:52:30,449 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 199
[2020-05-30 21:52:30,449 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11504 states and 13636 transitions.
[2020-05-30 21:52:30,458 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:30,459 INFO  L728         BuchiCegarLoop]: Abstraction has 11504 states and 13636 transitions.
[2020-05-30 21:52:30,470 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11504 states and 13636 transitions.
[2020-05-30 21:52:30,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11504 to 11024.
[2020-05-30 21:52:30,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11024 states.
[2020-05-30 21:52:30,626 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11024 states to 11024 states and 13072 transitions.
[2020-05-30 21:52:30,626 INFO  L751         BuchiCegarLoop]: Abstraction has 11024 states and 13072 transitions.
[2020-05-30 21:52:30,626 INFO  L631         BuchiCegarLoop]: Abstraction has 11024 states and 13072 transitions.
[2020-05-30 21:52:30,627 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 21:52:30,627 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11024 states and 13072 transitions.
[2020-05-30 21:52:30,642 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 318
[2020-05-30 21:52:30,642 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:30,642 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:30,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:30,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND TRUE   !(_auctionDurationInDays_s578 > 0)
[L2772]                    revert := true;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND TRUE   !(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1)
[L3431]                    revert := true;
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND TRUE   !(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4)
[L3604]                    revert := true;
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:30,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:30,647 INFO  L82        PathProgramCache]: Analyzing trace with hash -120001155, now seen corresponding path program 1 times
[2020-05-30 21:52:30,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:30,662 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:30,706 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-05-30 21:52:30,706 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:30,706 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 21:52:30,707 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:30,707 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 21:52:30,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 21:52:30,707 INFO  L87              Difference]: Start difference. First operand 11024 states and 13072 transitions. cyclomatic complexity: 2068 Second operand 3 states.
[2020-05-30 21:52:30,866 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:30,866 INFO  L93              Difference]: Finished difference Result 11852 states and 13628 transitions.
[2020-05-30 21:52:30,866 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 21:52:30,866 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11852 states and 13628 transitions.
[2020-05-30 21:52:30,894 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:30,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11852 states to 10920 states and 12410 transitions.
[2020-05-30 21:52:30,931 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 175
[2020-05-30 21:52:30,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 175
[2020-05-30 21:52:30,932 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10920 states and 12410 transitions.
[2020-05-30 21:52:30,941 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:30,941 INFO  L728         BuchiCegarLoop]: Abstraction has 10920 states and 12410 transitions.
[2020-05-30 21:52:30,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10920 states and 12410 transitions.
[2020-05-30 21:52:31,041 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10920 to 10540.
[2020-05-30 21:52:31,041 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10540 states.
[2020-05-30 21:52:31,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10540 states to 10540 states and 11946 transitions.
[2020-05-30 21:52:31,055 INFO  L751         BuchiCegarLoop]: Abstraction has 10540 states and 11946 transitions.
[2020-05-30 21:52:31,055 INFO  L631         BuchiCegarLoop]: Abstraction has 10540 states and 11946 transitions.
[2020-05-30 21:52:31,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 21:52:31,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10540 states and 11946 transitions.
[2020-05-30 21:52:31,066 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:31,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:31,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:31,069 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:31,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND FALSE  !(Balance[from] >= amount)
[L5093]                    success := false;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND FALSE  !(Balance[from] >= amount)
[L5093]                    success := false;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:31,072 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:31,073 INFO  L82        PathProgramCache]: Analyzing trace with hash -1634218150, now seen corresponding path program 1 times
[2020-05-30 21:52:31,073 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:31,094 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:31,223 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-05-30 21:52:31,223 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:31,223 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:52:31,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:31,224 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:52:31,224 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:52:31,224 INFO  L87              Difference]: Start difference. First operand 10540 states and 11946 transitions. cyclomatic complexity: 1426 Second operand 12 states.
[2020-05-30 21:52:34,987 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:34,988 INFO  L93              Difference]: Finished difference Result 11464 states and 13262 transitions.
[2020-05-30 21:52:34,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:52:34,988 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11464 states and 13262 transitions.
[2020-05-30 21:52:35,006 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 420
[2020-05-30 21:52:35,041 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11464 states to 11464 states and 13262 transitions.
[2020-05-30 21:52:35,041 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 220
[2020-05-30 21:52:35,041 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 220
[2020-05-30 21:52:35,041 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11464 states and 13262 transitions.
[2020-05-30 21:52:35,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:35,049 INFO  L728         BuchiCegarLoop]: Abstraction has 11464 states and 13262 transitions.
[2020-05-30 21:52:35,059 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11464 states and 13262 transitions.
[2020-05-30 21:52:35,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11464 to 10934.
[2020-05-30 21:52:35,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10934 states.
[2020-05-30 21:52:35,150 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10934 states to 10934 states and 12505 transitions.
[2020-05-30 21:52:35,150 INFO  L751         BuchiCegarLoop]: Abstraction has 10934 states and 12505 transitions.
[2020-05-30 21:52:35,150 INFO  L631         BuchiCegarLoop]: Abstraction has 10934 states and 12505 transitions.
[2020-05-30 21:52:35,150 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 21:52:35,150 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10934 states and 12505 transitions.
[2020-05-30 21:52:35,162 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:35,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:35,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:35,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:35,164 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND FALSE  !(Balance[from] >= amount)
[L5093]                    success := false;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:35,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:35,169 INFO  L82        PathProgramCache]: Analyzing trace with hash -161084033, now seen corresponding path program 1 times
[2020-05-30 21:52:35,169 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:35,191 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:35,274 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:52:35,274 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:35,274 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 21:52:35,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:35,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:52:35,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:52:35,275 INFO  L87              Difference]: Start difference. First operand 10934 states and 12505 transitions. cyclomatic complexity: 1593 Second operand 4 states.
[2020-05-30 21:52:35,332 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:35,332 INFO  L93              Difference]: Finished difference Result 10974 states and 12555 transitions.
[2020-05-30 21:52:35,332 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:52:35,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10974 states and 12555 transitions.
[2020-05-30 21:52:35,352 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:35,382 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10974 states to 10966 states and 12547 transitions.
[2020-05-30 21:52:35,382 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 178
[2020-05-30 21:52:35,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 178
[2020-05-30 21:52:35,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10966 states and 12547 transitions.
[2020-05-30 21:52:35,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:35,390 INFO  L728         BuchiCegarLoop]: Abstraction has 10966 states and 12547 transitions.
[2020-05-30 21:52:35,399 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10966 states and 12547 transitions.
[2020-05-30 21:52:35,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10966 to 10966.
[2020-05-30 21:52:35,468 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10966 states.
[2020-05-30 21:52:35,482 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10966 states to 10966 states and 12547 transitions.
[2020-05-30 21:52:35,482 INFO  L751         BuchiCegarLoop]: Abstraction has 10966 states and 12547 transitions.
[2020-05-30 21:52:35,482 INFO  L631         BuchiCegarLoop]: Abstraction has 10966 states and 12547 transitions.
[2020-05-30 21:52:35,482 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 21:52:35,482 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10966 states and 12547 transitions.
[2020-05-30 21:52:35,493 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:35,493 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:35,493 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:35,496 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:35,496 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:35,500 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:35,501 INFO  L82        PathProgramCache]: Analyzing trace with hash 1295702188, now seen corresponding path program 1 times
[2020-05-30 21:52:35,501 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:35,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:35,685 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:52:35,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:35,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 21:52:35,686 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:35,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 21:52:35,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 21:52:35,687 INFO  L87              Difference]: Start difference. First operand 10966 states and 12547 transitions. cyclomatic complexity: 1603 Second operand 7 states.
[2020-05-30 21:52:35,936 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:35,936 INFO  L93              Difference]: Finished difference Result 11014 states and 12605 transitions.
[2020-05-30 21:52:35,936 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 21:52:35,936 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11014 states and 12605 transitions.
[2020-05-30 21:52:35,967 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:36,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11014 states to 11014 states and 12605 transitions.
[2020-05-30 21:52:36,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 187
[2020-05-30 21:52:36,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 187
[2020-05-30 21:52:36,027 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11014 states and 12605 transitions.
[2020-05-30 21:52:36,033 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:36,033 INFO  L728         BuchiCegarLoop]: Abstraction has 11014 states and 12605 transitions.
[2020-05-30 21:52:36,042 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11014 states and 12605 transitions.
[2020-05-30 21:52:36,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11014 to 10982.
[2020-05-30 21:52:36,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10982 states.
[2020-05-30 21:52:36,117 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10982 states to 10982 states and 12563 transitions.
[2020-05-30 21:52:36,118 INFO  L751         BuchiCegarLoop]: Abstraction has 10982 states and 12563 transitions.
[2020-05-30 21:52:36,118 INFO  L631         BuchiCegarLoop]: Abstraction has 10982 states and 12563 transitions.
[2020-05-30 21:52:36,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 21:52:36,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10982 states and 12563 transitions.
[2020-05-30 21:52:36,128 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:36,128 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:36,129 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:36,130 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:36,130 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:36,137 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:36,137 INFO  L82        PathProgramCache]: Analyzing trace with hash 1429596849, now seen corresponding path program 1 times
[2020-05-30 21:52:36,137 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:36,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:36,247 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:52:36,247 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:36,247 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-05-30 21:52:36,248 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:36,248 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:52:36,248 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:52:36,248 INFO  L87              Difference]: Start difference. First operand 10982 states and 12563 transitions. cyclomatic complexity: 1603 Second operand 8 states.
[2020-05-30 21:52:36,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:36,549 INFO  L93              Difference]: Finished difference Result 11106 states and 12709 transitions.
[2020-05-30 21:52:36,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:52:36,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11106 states and 12709 transitions.
[2020-05-30 21:52:36,567 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:36,593 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11106 states to 11066 states and 12663 transitions.
[2020-05-30 21:52:36,594 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 191
[2020-05-30 21:52:36,594 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 191
[2020-05-30 21:52:36,594 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11066 states and 12663 transitions.
[2020-05-30 21:52:36,601 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:36,601 INFO  L728         BuchiCegarLoop]: Abstraction has 11066 states and 12663 transitions.
[2020-05-30 21:52:36,611 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11066 states and 12663 transitions.
[2020-05-30 21:52:36,673 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11066 to 11066.
[2020-05-30 21:52:36,673 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11066 states.
[2020-05-30 21:52:36,686 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11066 states to 11066 states and 12663 transitions.
[2020-05-30 21:52:36,687 INFO  L751         BuchiCegarLoop]: Abstraction has 11066 states and 12663 transitions.
[2020-05-30 21:52:36,687 INFO  L631         BuchiCegarLoop]: Abstraction has 11066 states and 12663 transitions.
[2020-05-30 21:52:36,687 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 21:52:36,687 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11066 states and 12663 transitions.
[2020-05-30 21:52:36,698 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:36,698 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:36,698 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:36,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:36,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:36,704 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:36,704 INFO  L82        PathProgramCache]: Analyzing trace with hash -657690449, now seen corresponding path program 1 times
[2020-05-30 21:52:36,704 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:36,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:36,831 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:52:36,831 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:36,831 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:52:36,831 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:36,832 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:52:36,832 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:52:36,832 INFO  L87              Difference]: Start difference. First operand 11066 states and 12663 transitions. cyclomatic complexity: 1619 Second operand 12 states.
[2020-05-30 21:52:41,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:41,243 INFO  L93              Difference]: Finished difference Result 11648 states and 13521 transitions.
[2020-05-30 21:52:41,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:52:41,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11648 states and 13521 transitions.
[2020-05-30 21:52:41,271 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 420
[2020-05-30 21:52:41,305 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11648 states to 11648 states and 13521 transitions.
[2020-05-30 21:52:41,305 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 264
[2020-05-30 21:52:41,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 264
[2020-05-30 21:52:41,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11648 states and 13521 transitions.
[2020-05-30 21:52:41,313 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:41,313 INFO  L728         BuchiCegarLoop]: Abstraction has 11648 states and 13521 transitions.
[2020-05-30 21:52:41,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11648 states and 13521 transitions.
[2020-05-30 21:52:41,402 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11648 to 11098.
[2020-05-30 21:52:41,402 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11098 states.
[2020-05-30 21:52:41,422 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11098 states to 11098 states and 12712 transitions.
[2020-05-30 21:52:41,422 INFO  L751         BuchiCegarLoop]: Abstraction has 11098 states and 12712 transitions.
[2020-05-30 21:52:41,422 INFO  L631         BuchiCegarLoop]: Abstraction has 11098 states and 12712 transitions.
[2020-05-30 21:52:41,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 21:52:41,422 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11098 states and 12712 transitions.
[2020-05-30 21:52:41,436 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:41,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:41,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:41,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:41,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND FALSE  !(gas < 21000)
[L4631]        COND TRUE   iterate && gas >= 21000
[L4633]                    havoc msgsender_MSG;
[L4634]                    havoc msgvalue_MSG;
[L4635]                    havoc choice;
[L4636]                    havoc newOwner_s43;
[L4637]                    havoc _depositorToBeSlashed_s49;
[L4638]                    havoc _depositorToBeSlashed_s379;
[L4639]                    havoc _releaseTimestamp_s192;
[L4640]                    havoc _slasher_s192;
[L4641]                    havoc _depositorsProxy_s192;
[L4642]                    havoc _depositor_s228;
[L4643]                    havoc _valuePerDepositor_s292;
[L4644]                    havoc _startPriceInWei_s578;
[L4645]                    havoc _auctionDurationInDays_s578;
[L4646]                    havoc _minimalNumberOfParticipants_s578;
[L4647]                    havoc _maximalNumberOfParticipants_s578;
[L4648]                    havoc _depositLocker_s578;
[L4649]                    havoc addressesToWhitelist_s852;
[L4650]                    havoc __ret_0_currentPrice;
[L4651]                    havoc secondsSinceStart_s978;
[L4652]                    havoc __ret_0_priceAtElapsedTime;
[L4653]                    havoc iterate;
[L4654]        COND TRUE   DType[from] == ValidatorAuction
[L4656]        COND FALSE  !(choice == 9)
[L4669]        COND FALSE  !(choice == 8)
[L4682]        COND FALSE  !(choice == 7)
[L4695]        COND TRUE   choice == 6
[L4697]                    gas := gas - 21000;
[L4698]        COND TRUE   gas >= 0
[L4700]                    assume msgvalue_MSG == 0;
[L4701]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4701]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4702]        COND FALSE  !(revert)
[L4631]        COND FALSE  !(iterate && gas >= 21000)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:41,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:41,442 INFO  L82        PathProgramCache]: Analyzing trace with hash -1045178435, now seen corresponding path program 1 times
[2020-05-30 21:52:41,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:41,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:41,620 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-05-30 21:52:41,620 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:41,621 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:52:41,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:41,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:52:41,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:52:41,621 INFO  L87              Difference]: Start difference. First operand 11098 states and 12712 transitions. cyclomatic complexity: 1636 Second operand 12 states.
[2020-05-30 21:52:46,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:46,362 INFO  L93              Difference]: Finished difference Result 11642 states and 13482 transitions.
[2020-05-30 21:52:46,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:52:46,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11642 states and 13482 transitions.
[2020-05-30 21:52:46,391 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 420
[2020-05-30 21:52:46,419 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11642 states to 11642 states and 13482 transitions.
[2020-05-30 21:52:46,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 264
[2020-05-30 21:52:46,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 264
[2020-05-30 21:52:46,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11642 states and 13482 transitions.
[2020-05-30 21:52:46,427 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:46,427 INFO  L728         BuchiCegarLoop]: Abstraction has 11642 states and 13482 transitions.
[2020-05-30 21:52:46,434 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11642 states and 13482 transitions.
[2020-05-30 21:52:46,489 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11642 to 10647.
[2020-05-30 21:52:46,489 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10647 states.
[2020-05-30 21:52:46,502 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10647 states to 10647 states and 12070 transitions.
[2020-05-30 21:52:46,502 INFO  L751         BuchiCegarLoop]: Abstraction has 10647 states and 12070 transitions.
[2020-05-30 21:52:46,502 INFO  L631         BuchiCegarLoop]: Abstraction has 10647 states and 12070 transitions.
[2020-05-30 21:52:46,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 21:52:46,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10647 states and 12070 transitions.
[2020-05-30 21:52:46,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:46,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:46,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:46,544 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:46,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:46,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:46,576 INFO  L82        PathProgramCache]: Analyzing trace with hash 911540970, now seen corresponding path program 1 times
[2020-05-30 21:52:46,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:46,591 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:46,678 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 1 proven. 30 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-05-30 21:52:46,678 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:52:46,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:52:46,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:46,679 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:52:46,679 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:52:46,679 INFO  L87              Difference]: Start difference. First operand 10647 states and 12070 transitions. cyclomatic complexity: 1444 Second operand 12 states.
[2020-05-30 21:52:50,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:50,587 INFO  L93              Difference]: Finished difference Result 11538 states and 13317 transitions.
[2020-05-30 21:52:50,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:52:50,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11538 states and 13317 transitions.
[2020-05-30 21:52:50,604 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 420
[2020-05-30 21:52:50,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11538 states to 11538 states and 13317 transitions.
[2020-05-30 21:52:50,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 240
[2020-05-30 21:52:50,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 240
[2020-05-30 21:52:50,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11538 states and 13317 transitions.
[2020-05-30 21:52:50,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:50,632 INFO  L728         BuchiCegarLoop]: Abstraction has 11538 states and 13317 transitions.
[2020-05-30 21:52:50,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11538 states and 13317 transitions.
[2020-05-30 21:52:50,684 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11538 to 10649.
[2020-05-30 21:52:50,685 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10649 states.
[2020-05-30 21:52:50,697 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10649 states to 10649 states and 12074 transitions.
[2020-05-30 21:52:50,697 INFO  L751         BuchiCegarLoop]: Abstraction has 10649 states and 12074 transitions.
[2020-05-30 21:52:50,697 INFO  L631         BuchiCegarLoop]: Abstraction has 10649 states and 12074 transitions.
[2020-05-30 21:52:50,697 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 21:52:50,697 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10649 states and 12074 transitions.
[2020-05-30 21:52:50,707 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:50,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:50,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:50,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:50,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND TRUE   __exception
[L756]                     __tmp__Balance := Balance;
[L757]                     __tmp__DType := DType;
[L758]                     __tmp__Alloc := Alloc;
[L759]                     __tmp__balance_ADDR := balance_ADDR;
[L760]                     __tmp__M_Ref_bool_canWithdraw0 := M_Ref_bool_canWithdraw0;
[L761]                     __tmp__sum_canWithdraw0 := sum_canWithdraw0;
[L762]                     __tmp__M_Ref_bool_whitelist1 := M_Ref_bool_whitelist1;
[L763]                     __tmp__sum_whitelist1 := sum_whitelist1;
[L764]                     __tmp__M_Ref_int_bids2 := M_Ref_int_bids2;
[L765]                     __tmp__sum_bids2 := sum_bids2;
[L766]                     __tmp__M_int_Ref := M_int_Ref;
[L767]                     __tmp__sum := sum;
[L768]                     __tmp__Length := Length;
[L769]                     __tmp__now := now;
[L770]                     __tmp__owner_Ownable := owner_Ownable;
[L771]                     __tmp__initialized_DepositLocker := initialized_DepositLocker;
[L772]                     __tmp__deposited_DepositLocker := deposited_DepositLocker;
[L773]                     __tmp__slasher_DepositLocker := slasher_DepositLocker;
[L774]                     __tmp__depositorsProxy_DepositLocker := depositorsProxy_DepositLocker;
[L775]                     __tmp__releaseTimestamp_DepositLocker := releaseTimestamp_DepositLocker;
[L776]                     __tmp__canWithdraw_DepositLocker := canWithdraw_DepositLocker;
[L777]                     __tmp__numberOfDepositors_DepositLocker := numberOfDepositors_DepositLocker;
[L778]                     __tmp__valuePerDepositor_DepositLocker := valuePerDepositor_DepositLocker;
[L779]                     __tmp__auctionDurationInDays_ValidatorAuction := auctionDurationInDays_ValidatorAuction;
[L780]                     __tmp__startPrice_ValidatorAuction := startPrice_ValidatorAuction;
[L781]                     __tmp__minimalNumberOfParticipants_ValidatorAuction := minimalNumberOfParticipants_ValidatorAuction;
[L782]                     __tmp__maximalNumberOfParticipants_ValidatorAuction := maximalNumberOfParticipants_ValidatorAuction;
[L783]                     __tmp__auctionState_ValidatorAuction := auctionState_ValidatorAuction;
[L784]                     __tmp__depositLocker_ValidatorAuction := depositLocker_ValidatorAuction;
[L785]                     __tmp__whitelist_ValidatorAuction := whitelist_ValidatorAuction;
[L786]                     __tmp__bids_ValidatorAuction := bids_ValidatorAuction;
[L787]                     __tmp__bidders_ValidatorAuction := bidders_ValidatorAuction;
[L788]                     __tmp__startTime_ValidatorAuction := startTime_ValidatorAuction;
[L789]                     __tmp__closeTime_ValidatorAuction := closeTime_ValidatorAuction;
[L790]                     __tmp__lowestSlotPrice_ValidatorAuction := lowestSlotPrice_ValidatorAuction;
[L791]         CALL        call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2849]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1837]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1817]                    assume msgsender_MSG != null;
[L1818]                    __tmp__Balance[this] := 0;
[L1819]                    __tmp__owner_Ownable[this] := null;
[L1820]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1837]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1838]        COND FALSE  !(revert)
[L2849]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2850]        COND FALSE  !(revert)
[L2855]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2622]                    assume msgsender_MSG != null;
[L2623]                    __tmp__Balance[this] := 0;
[L2624]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := 0;
[L2625]                    __tmp__startPrice_ValidatorAuction[this] := 0;
[L2626]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2627]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2628]        CALL        call __var_10 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2628]        RET         call __var_10 := FreshRefGenerator__fail();
[L2629]        COND FALSE  !(revert)
[L2634]                    __tmp__whitelist_ValidatorAuction[this] := __var_10;
[L2635]                    __tmp__M_Ref_bool_whitelist1[__tmp__whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2636]        CALL        call __var_11 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2636]        RET         call __var_11 := FreshRefGenerator__fail();
[L2637]        COND FALSE  !(revert)
[L2642]                    __tmp__bids_ValidatorAuction[this] := __var_11;
[L2643]                    __tmp__M_Ref_int_bids2[__tmp__bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2644]                    __tmp__sum_bids2[__tmp__bids_ValidatorAuction[this]] := 0;
[L2645]        CALL        call __var_12 := FreshRefGenerator__fail();
[L1797]                    havoc newRef;
[L1798]                    assume __tmp__Alloc[newRef] == false;
[L1799]                    __tmp__Alloc[newRef] := true;
[L1800]                    assume newRef != null;
[L2645]        RET         call __var_12 := FreshRefGenerator__fail();
[L2646]        COND FALSE  !(revert)
[L2651]                    __tmp__bidders_ValidatorAuction[this] := __var_12;
[L2652]                    assume __tmp__Length[__tmp__bidders_ValidatorAuction[this]] == 0;
[L2653]                    __tmp__startTime_ValidatorAuction[this] := 0;
[L2654]                    __tmp__closeTime_ValidatorAuction[this] := 0;
[L2655]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := 0;
[L2656]                    assume _auctionDurationInDays_s578 >= 0;
[L2657]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2663]                    assume _auctionDurationInDays_s578 >= 0;
[L2664]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2670]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2671]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2677]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2678]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2684]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2685]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2686]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2692]                    assume _startPriceInWei_s578 >= 0;
[L2693]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2699]                    assume __tmp__startPrice_ValidatorAuction[this] >= 0;
[L2700]                    assume _startPriceInWei_s578 >= 0;
[L2701]                    __tmp__startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2702]                    assume __tmp__auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2703]                    assume _auctionDurationInDays_s578 >= 0;
[L2704]                    __tmp__auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2705]                    assume __tmp__maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2706]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2707]                    __tmp__maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2708]                    assume __tmp__minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2709]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2710]                    __tmp__minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2711]                    __tmp__depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2712]                    assume __tmp__lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2713]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2714]                    __tmp__lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2715]                    assume __var_9 >= 0;
[L2716]                    __tmp__auctionState_ValidatorAuction[this] := 0;
[L2855]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2856]        COND FALSE  !(revert)
[L791]         RET         call ValidatorAuction_ValidatorAuction__fail(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L792]                     assume revert || gas < 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:50,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:50,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 523700741, now seen corresponding path program 1 times
[2020-05-30 21:52:50,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:50,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:50,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-30 21:52:50,780 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:50,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:52:50,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:50,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:52:50,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:52:50,781 INFO  L87              Difference]: Start difference. First operand 10649 states and 12074 transitions. cyclomatic complexity: 1446 Second operand 4 states.
[2020-05-30 21:52:52,191 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:52,191 INFO  L93              Difference]: Finished difference Result 11409 states and 13016 transitions.
[2020-05-30 21:52:52,191 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:52:52,191 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11409 states and 13016 transitions.
[2020-05-30 21:52:52,215 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 282
[2020-05-30 21:52:52,243 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11409 states to 11207 states and 12743 transitions.
[2020-05-30 21:52:52,244 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 229
[2020-05-30 21:52:52,244 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 229
[2020-05-30 21:52:52,244 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11207 states and 12743 transitions.
[2020-05-30 21:52:52,252 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:52,252 INFO  L728         BuchiCegarLoop]: Abstraction has 11207 states and 12743 transitions.
[2020-05-30 21:52:52,260 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11207 states and 12743 transitions.
[2020-05-30 21:52:52,308 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11207 to 10559.
[2020-05-30 21:52:52,308 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10559 states.
[2020-05-30 21:52:52,320 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10559 states to 10559 states and 11912 transitions.
[2020-05-30 21:52:52,320 INFO  L751         BuchiCegarLoop]: Abstraction has 10559 states and 11912 transitions.
[2020-05-30 21:52:52,320 INFO  L631         BuchiCegarLoop]: Abstraction has 10559 states and 11912 transitions.
[2020-05-30 21:52:52,320 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 21:52:52,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10559 states and 11912 transitions.
[2020-05-30 21:52:52,331 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 280
[2020-05-30 21:52:52,331 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:52,331 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:52,332 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:52,332 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:52,336 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:52,336 INFO  L82        PathProgramCache]: Analyzing trace with hash 705047525, now seen corresponding path program 1 times
[2020-05-30 21:52:52,336 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:52,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:52,448 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-05-30 21:52:52,449 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:52,449 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:52:52,449 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:52,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:52:52,449 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:52:52,450 INFO  L87              Difference]: Start difference. First operand 10559 states and 11912 transitions. cyclomatic complexity: 1374 Second operand 12 states.
[2020-05-30 21:52:58,001 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:58,001 INFO  L93              Difference]: Finished difference Result 12630 states and 14663 transitions.
[2020-05-30 21:52:58,001 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:52:58,001 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12630 states and 14663 transitions.
[2020-05-30 21:52:58,030 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 426
[2020-05-30 21:52:58,062 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12630 states to 12630 states and 14663 transitions.
[2020-05-30 21:52:58,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 307
[2020-05-30 21:52:58,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 322
[2020-05-30 21:52:58,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12630 states and 14663 transitions.
[2020-05-30 21:52:58,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:58,070 INFO  L728         BuchiCegarLoop]: Abstraction has 12630 states and 14663 transitions.
[2020-05-30 21:52:58,078 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12630 states and 14663 transitions.
[2020-05-30 21:52:58,140 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12630 to 12513.
[2020-05-30 21:52:58,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12513 states.
[2020-05-30 21:52:58,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12513 states to 12513 states and 14500 transitions.
[2020-05-30 21:52:58,157 INFO  L751         BuchiCegarLoop]: Abstraction has 12513 states and 14500 transitions.
[2020-05-30 21:52:58,158 INFO  L631         BuchiCegarLoop]: Abstraction has 12513 states and 14500 transitions.
[2020-05-30 21:52:58,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 21:52:58,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12513 states and 14500 transitions.
[2020-05-30 21:52:58,170 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:58,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:58,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:58,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:58,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND FALSE  !(Balance[from] >= amount)
[L5093]                    success := false;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:58,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:58,176 INFO  L82        PathProgramCache]: Analyzing trace with hash 1035315088, now seen corresponding path program 1 times
[2020-05-30 21:52:58,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:58,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:58,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-05-30 21:52:58,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:58,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 21:52:58,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:58,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 21:52:58,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 21:52:58,254 INFO  L87              Difference]: Start difference. First operand 12513 states and 14500 transitions. cyclomatic complexity: 2008 Second operand 4 states.
[2020-05-30 21:52:58,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:58,324 INFO  L93              Difference]: Finished difference Result 12553 states and 14546 transitions.
[2020-05-30 21:52:58,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 21:52:58,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12553 states and 14546 transitions.
[2020-05-30 21:52:58,350 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:58,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12553 states to 12545 states and 14538 transitions.
[2020-05-30 21:52:58,380 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 311
[2020-05-30 21:52:58,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 311
[2020-05-30 21:52:58,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12545 states and 14538 transitions.
[2020-05-30 21:52:58,388 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:58,388 INFO  L728         BuchiCegarLoop]: Abstraction has 12545 states and 14538 transitions.
[2020-05-30 21:52:58,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12545 states and 14538 transitions.
[2020-05-30 21:52:58,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12545 to 12545.
[2020-05-30 21:52:58,456 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12545 states.
[2020-05-30 21:52:58,473 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12545 states to 12545 states and 14538 transitions.
[2020-05-30 21:52:58,473 INFO  L751         BuchiCegarLoop]: Abstraction has 12545 states and 14538 transitions.
[2020-05-30 21:52:58,473 INFO  L631         BuchiCegarLoop]: Abstraction has 12545 states and 14538 transitions.
[2020-05-30 21:52:58,473 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 21:52:58,473 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12545 states and 14538 transitions.
[2020-05-30 21:52:58,486 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:58,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:58,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:58,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:58,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND TRUE   DType[to] == DepositLockerInterface
[L4272]                    assume amount == 0;
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:58,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:58,491 INFO  L82        PathProgramCache]: Analyzing trace with hash -1592282765, now seen corresponding path program 1 times
[2020-05-30 21:52:58,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:58,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:58,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-05-30 21:52:58,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:58,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:52:58,609 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:58,609 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:52:58,609 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:52:58,610 INFO  L87              Difference]: Start difference. First operand 12545 states and 14538 transitions. cyclomatic complexity: 2014 Second operand 8 states.
[2020-05-30 21:52:59,064 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:59,064 INFO  L93              Difference]: Finished difference Result 12669 states and 14682 transitions.
[2020-05-30 21:52:59,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:52:59,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12669 states and 14682 transitions.
[2020-05-30 21:52:59,086 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:59,113 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12669 states to 12629 states and 14636 transitions.
[2020-05-30 21:52:59,113 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 320
[2020-05-30 21:52:59,113 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 320
[2020-05-30 21:52:59,113 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12629 states and 14636 transitions.
[2020-05-30 21:52:59,120 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:59,120 INFO  L728         BuchiCegarLoop]: Abstraction has 12629 states and 14636 transitions.
[2020-05-30 21:52:59,127 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12629 states and 14636 transitions.
[2020-05-30 21:52:59,189 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12629 to 12621.
[2020-05-30 21:52:59,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12621 states.
[2020-05-30 21:52:59,206 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12621 states to 12621 states and 14624 transitions.
[2020-05-30 21:52:59,206 INFO  L751         BuchiCegarLoop]: Abstraction has 12621 states and 14624 transitions.
[2020-05-30 21:52:59,206 INFO  L631         BuchiCegarLoop]: Abstraction has 12621 states and 14624 transitions.
[2020-05-30 21:52:59,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 21:52:59,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12621 states and 14624 transitions.
[2020-05-30 21:52:59,219 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:59,219 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:59,220 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:59,221 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:59,221 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND TRUE   DType[to] == Ownable
[L4276]                    assume amount == 0;
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:59,225 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:59,225 INFO  L82        PathProgramCache]: Analyzing trace with hash 1175469975, now seen corresponding path program 1 times
[2020-05-30 21:52:59,225 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:59,246 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:59,315 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-05-30 21:52:59,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:59,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:52:59,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:59,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:52:59,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:52:59,316 INFO  L87              Difference]: Start difference. First operand 12621 states and 14624 transitions. cyclomatic complexity: 2024 Second operand 8 states.
[2020-05-30 21:52:59,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:52:59,599 INFO  L93              Difference]: Finished difference Result 12697 states and 14710 transitions.
[2020-05-30 21:52:59,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:52:59,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12697 states and 14710 transitions.
[2020-05-30 21:52:59,622 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:59,650 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12697 states to 12657 states and 14664 transitions.
[2020-05-30 21:52:59,651 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 320
[2020-05-30 21:52:59,651 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 320
[2020-05-30 21:52:59,651 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12657 states and 14664 transitions.
[2020-05-30 21:52:59,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:52:59,658 INFO  L728         BuchiCegarLoop]: Abstraction has 12657 states and 14664 transitions.
[2020-05-30 21:52:59,667 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12657 states and 14664 transitions.
[2020-05-30 21:52:59,726 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12657 to 12573.
[2020-05-30 21:52:59,727 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12573 states.
[2020-05-30 21:52:59,743 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12573 states to 12573 states and 14566 transitions.
[2020-05-30 21:52:59,743 INFO  L751         BuchiCegarLoop]: Abstraction has 12573 states and 14566 transitions.
[2020-05-30 21:52:59,743 INFO  L631         BuchiCegarLoop]: Abstraction has 12573 states and 14566 transitions.
[2020-05-30 21:52:59,743 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 21:52:59,743 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12573 states and 14566 transitions.
[2020-05-30 21:52:59,756 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:52:59,756 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:52:59,756 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:52:59,757 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:52:59,757 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND TRUE   DType[to] == DepositLocker
[L4264]        CALL        call FallbackMethod_DepositLocker__success(to, from, amount);
[L4264]        RET         call FallbackMethod_DepositLocker__success(to, from, amount);
[L4265]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:52:59,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:52:59,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 1975736632, now seen corresponding path program 1 times
[2020-05-30 21:52:59,761 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:52:59,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:52:59,852 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-30 21:52:59,852 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:52:59,852 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:52:59,853 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:52:59,853 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:52:59,853 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:52:59,853 INFO  L87              Difference]: Start difference. First operand 12573 states and 14566 transitions. cyclomatic complexity: 2014 Second operand 8 states.
[2020-05-30 21:53:00,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:00,303 INFO  L93              Difference]: Finished difference Result 12649 states and 14652 transitions.
[2020-05-30 21:53:00,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:53:00,304 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12649 states and 14652 transitions.
[2020-05-30 21:53:00,329 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:53:00,360 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12649 states to 12609 states and 14606 transitions.
[2020-05-30 21:53:00,360 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 311
[2020-05-30 21:53:00,360 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 311
[2020-05-30 21:53:00,361 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12609 states and 14606 transitions.
[2020-05-30 21:53:00,368 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:00,368 INFO  L728         BuchiCegarLoop]: Abstraction has 12609 states and 14606 transitions.
[2020-05-30 21:53:00,375 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12609 states and 14606 transitions.
[2020-05-30 21:53:00,437 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12609 to 12573.
[2020-05-30 21:53:00,437 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12573 states.
[2020-05-30 21:53:00,454 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12573 states to 12573 states and 14566 transitions.
[2020-05-30 21:53:00,454 INFO  L751         BuchiCegarLoop]: Abstraction has 12573 states and 14566 transitions.
[2020-05-30 21:53:00,454 INFO  L631         BuchiCegarLoop]: Abstraction has 12573 states and 14566 transitions.
[2020-05-30 21:53:00,454 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 21:53:00,455 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12573 states and 14566 transitions.
[2020-05-30 21:53:00,468 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 414
[2020-05-30 21:53:00,468 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:00,468 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:00,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:00,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:00,472 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:00,472 INFO  L82        PathProgramCache]: Analyzing trace with hash -852012224, now seen corresponding path program 1 times
[2020-05-30 21:53:00,473 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:00,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:00,573 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 29 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-05-30 21:53:00,574 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:00,574 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:53:00,574 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:00,574 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:53:00,574 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:53:00,574 INFO  L87              Difference]: Start difference. First operand 12573 states and 14566 transitions. cyclomatic complexity: 2014 Second operand 12 states.
[2020-05-30 21:53:05,194 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:05,195 INFO  L93              Difference]: Finished difference Result 12518 states and 14456 transitions.
[2020-05-30 21:53:05,195 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:53:05,195 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12518 states and 14456 transitions.
[2020-05-30 21:53:05,225 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 424
[2020-05-30 21:53:05,257 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12518 states to 12518 states and 14456 transitions.
[2020-05-30 21:53:05,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 322
[2020-05-30 21:53:05,258 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 322
[2020-05-30 21:53:05,258 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12518 states and 14456 transitions.
[2020-05-30 21:53:05,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:05,265 INFO  L728         BuchiCegarLoop]: Abstraction has 12518 states and 14456 transitions.
[2020-05-30 21:53:05,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12518 states and 14456 transitions.
[2020-05-30 21:53:05,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12518 to 11578.
[2020-05-30 21:53:05,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11578 states.
[2020-05-30 21:53:05,346 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11578 states to 11578 states and 13242 transitions.
[2020-05-30 21:53:05,346 INFO  L751         BuchiCegarLoop]: Abstraction has 11578 states and 13242 transitions.
[2020-05-30 21:53:05,346 INFO  L631         BuchiCegarLoop]: Abstraction has 11578 states and 13242 transitions.
[2020-05-30 21:53:05,346 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 21:53:05,346 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11578 states and 13242 transitions.
[2020-05-30 21:53:05,358 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 284
[2020-05-30 21:53:05,358 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:05,358 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:05,359 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:05,359 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:05,363 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:05,363 INFO  L82        PathProgramCache]: Analyzing trace with hash -2060891220, now seen corresponding path program 1 times
[2020-05-30 21:53:05,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:05,385 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:05,465 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:53:05,465 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:05,465 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:53:05,466 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:05,466 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:05,466 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:05,466 INFO  L87              Difference]: Start difference. First operand 11578 states and 13242 transitions. cyclomatic complexity: 1685 Second operand 13 states.
[2020-05-30 21:53:11,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:11,765 INFO  L93              Difference]: Finished difference Result 13789 states and 16207 transitions.
[2020-05-30 21:53:11,766 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:53:11,766 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13789 states and 16207 transitions.
[2020-05-30 21:53:11,799 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 430
[2020-05-30 21:53:11,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13789 states to 13789 states and 16207 transitions.
[2020-05-30 21:53:11,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 390
[2020-05-30 21:53:11,841 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 405
[2020-05-30 21:53:11,841 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13789 states and 16207 transitions.
[2020-05-30 21:53:11,849 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:11,849 INFO  L728         BuchiCegarLoop]: Abstraction has 13789 states and 16207 transitions.
[2020-05-30 21:53:11,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13789 states and 16207 transitions.
[2020-05-30 21:53:11,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13789 to 13639.
[2020-05-30 21:53:11,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13639 states.
[2020-05-30 21:53:11,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13639 states to 13639 states and 15995 transitions.
[2020-05-30 21:53:11,945 INFO  L751         BuchiCegarLoop]: Abstraction has 13639 states and 15995 transitions.
[2020-05-30 21:53:11,945 INFO  L631         BuchiCegarLoop]: Abstraction has 13639 states and 15995 transitions.
[2020-05-30 21:53:11,945 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 21:53:11,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13639 states and 15995 transitions.
[2020-05-30 21:53:11,959 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 418
[2020-05-30 21:53:11,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:11,959 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:11,961 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:11,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND FALSE  !(gas < 21000)
[L4631]        COND TRUE   iterate && gas >= 21000
[L4633]                    havoc msgsender_MSG;
[L4634]                    havoc msgvalue_MSG;
[L4635]                    havoc choice;
[L4636]                    havoc newOwner_s43;
[L4637]                    havoc _depositorToBeSlashed_s49;
[L4638]                    havoc _depositorToBeSlashed_s379;
[L4639]                    havoc _releaseTimestamp_s192;
[L4640]                    havoc _slasher_s192;
[L4641]                    havoc _depositorsProxy_s192;
[L4642]                    havoc _depositor_s228;
[L4643]                    havoc _valuePerDepositor_s292;
[L4644]                    havoc _startPriceInWei_s578;
[L4645]                    havoc _auctionDurationInDays_s578;
[L4646]                    havoc _minimalNumberOfParticipants_s578;
[L4647]                    havoc _maximalNumberOfParticipants_s578;
[L4648]                    havoc _depositLocker_s578;
[L4649]                    havoc addressesToWhitelist_s852;
[L4650]                    havoc __ret_0_currentPrice;
[L4651]                    havoc secondsSinceStart_s978;
[L4652]                    havoc __ret_0_priceAtElapsedTime;
[L4653]                    havoc iterate;
[L4654]        COND TRUE   DType[from] == ValidatorAuction
[L4656]        COND FALSE  !(choice == 9)
[L4669]        COND FALSE  !(choice == 8)
[L4682]        COND FALSE  !(choice == 7)
[L4695]        COND FALSE  !(choice == 6)
[L4708]        COND FALSE  !(choice == 5)
[L4721]        COND TRUE   choice == 4
[L4723]                    gas := gas - 21000;
[L4724]        COND TRUE   gas >= 0
[L4726]                    assume msgvalue_MSG == 0;
[L4727]        CALL        call closeAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L4727]        RET         call closeAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4728]        COND FALSE  !(revert)
[L4631]        COND FALSE  !(iterate && gas >= 21000)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND FALSE  !(gas < 21000)
[L4631]        COND TRUE   iterate && gas >= 21000
[L4633]                    havoc msgsender_MSG;
[L4634]                    havoc msgvalue_MSG;
[L4635]                    havoc choice;
[L4636]                    havoc newOwner_s43;
[L4637]                    havoc _depositorToBeSlashed_s49;
[L4638]                    havoc _depositorToBeSlashed_s379;
[L4639]                    havoc _releaseTimestamp_s192;
[L4640]                    havoc _slasher_s192;
[L4641]                    havoc _depositorsProxy_s192;
[L4642]                    havoc _depositor_s228;
[L4643]                    havoc _valuePerDepositor_s292;
[L4644]                    havoc _startPriceInWei_s578;
[L4645]                    havoc _auctionDurationInDays_s578;
[L4646]                    havoc _minimalNumberOfParticipants_s578;
[L4647]                    havoc _maximalNumberOfParticipants_s578;
[L4648]                    havoc _depositLocker_s578;
[L4649]                    havoc addressesToWhitelist_s852;
[L4650]                    havoc __ret_0_currentPrice;
[L4651]                    havoc secondsSinceStart_s978;
[L4652]                    havoc __ret_0_priceAtElapsedTime;
[L4653]                    havoc iterate;
[L4654]        COND TRUE   DType[from] == ValidatorAuction
[L4656]        COND FALSE  !(choice == 9)
[L4669]        COND FALSE  !(choice == 8)
[L4682]        COND FALSE  !(choice == 7)
[L4695]        COND TRUE   choice == 6
[L4697]                    gas := gas - 21000;
[L4698]        COND TRUE   gas >= 0
[L4700]                    assume msgvalue_MSG == 0;
[L4701]        CALL        call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L4701]        RET         call startAuction_ValidatorAuction__success(from, to, msgvalue_MSG);
[L4702]        COND FALSE  !(revert)
[L4631]        COND FALSE  !(iterate && gas >= 21000)
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:11,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:11,965 INFO  L82        PathProgramCache]: Analyzing trace with hash -1663158497, now seen corresponding path program 1 times
[2020-05-30 21:53:11,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:11,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:12,083 INFO  L134       CoverageAnalysis]: Checked inductivity of 92 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 91 trivial. 0 not checked.
[2020-05-30 21:53:12,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:12,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-30 21:53:12,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:12,084 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 21:53:12,084 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-30 21:53:12,084 INFO  L87              Difference]: Start difference. First operand 13639 states and 15995 transitions. cyclomatic complexity: 2377 Second operand 6 states.
[2020-05-30 21:53:14,448 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:14,449 INFO  L93              Difference]: Finished difference Result 13627 states and 15730 transitions.
[2020-05-30 21:53:14,449 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 21:53:14,449 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13627 states and 15730 transitions.
[2020-05-30 21:53:14,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 32
[2020-05-30 21:53:14,514 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13627 states to 13187 states and 15250 transitions.
[2020-05-30 21:53:14,514 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 399
[2020-05-30 21:53:14,515 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1018
[2020-05-30 21:53:14,515 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13187 states and 15250 transitions.
[2020-05-30 21:53:14,522 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:14,522 INFO  L728         BuchiCegarLoop]: Abstraction has 13187 states and 15250 transitions.
[2020-05-30 21:53:14,529 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13187 states and 15250 transitions.
[2020-05-30 21:53:14,588 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13187 to 11288.
[2020-05-30 21:53:14,588 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11288 states.
[2020-05-30 21:53:14,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11288 states to 11288 states and 12577 transitions.
[2020-05-30 21:53:14,601 INFO  L751         BuchiCegarLoop]: Abstraction has 11288 states and 12577 transitions.
[2020-05-30 21:53:14,602 INFO  L631         BuchiCegarLoop]: Abstraction has 11288 states and 12577 transitions.
[2020-05-30 21:53:14,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 21:53:14,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11288 states and 12577 transitions.
[2020-05-30 21:53:14,614 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 10
[2020-05-30 21:53:14,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:14,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:14,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:14,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND FALSE  !(gas > 2300)
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND TRUE   choice == 9
[L5523]              gas := gas - 21000;
[L5524]  COND FALSE  !(gas >= 0)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:14,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:14,618 INFO  L82        PathProgramCache]: Analyzing trace with hash 1481733420, now seen corresponding path program 1 times
[2020-05-30 21:53:14,619 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:14,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:14,765 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:53:14,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:14,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:53:14,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:14,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:53:14,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:53:14,767 INFO  L87              Difference]: Start difference. First operand 11288 states and 12577 transitions. cyclomatic complexity: 1302 Second operand 16 states.
[2020-05-30 21:53:16,407 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:16,407 INFO  L93              Difference]: Finished difference Result 13358 states and 14883 transitions.
[2020-05-30 21:53:16,408 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-30 21:53:16,408 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13358 states and 14883 transitions.
[2020-05-30 21:53:16,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-30 21:53:16,468 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13358 states to 13204 states and 14690 transitions.
[2020-05-30 21:53:16,469 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-05-30 21:53:16,469 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1194
[2020-05-30 21:53:16,469 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13204 states and 14690 transitions.
[2020-05-30 21:53:16,476 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:16,476 INFO  L728         BuchiCegarLoop]: Abstraction has 13204 states and 14690 transitions.
[2020-05-30 21:53:16,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13204 states and 14690 transitions.
[2020-05-30 21:53:16,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13204 to 10890.
[2020-05-30 21:53:16,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10890 states.
[2020-05-30 21:53:16,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10890 states to 10890 states and 11880 transitions.
[2020-05-30 21:53:16,552 INFO  L751         BuchiCegarLoop]: Abstraction has 10890 states and 11880 transitions.
[2020-05-30 21:53:16,553 INFO  L631         BuchiCegarLoop]: Abstraction has 10890 states and 11880 transitions.
[2020-05-30 21:53:16,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 21:53:16,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10890 states and 11880 transitions.
[2020-05-30 21:53:16,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:16,564 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:16,564 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:16,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:16,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:16,571 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:16,571 INFO  L82        PathProgramCache]: Analyzing trace with hash 950241131, now seen corresponding path program 1 times
[2020-05-30 21:53:16,571 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:16,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:16,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-05-30 21:53:16,714 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:16,714 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:53:16,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:16,714 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:53:16,714 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:53:16,715 INFO  L87              Difference]: Start difference. First operand 10890 states and 11880 transitions. cyclomatic complexity: 1003 Second operand 8 states.
[2020-05-30 21:53:17,365 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:17,366 INFO  L93              Difference]: Finished difference Result 11002 states and 11976 transitions.
[2020-05-30 21:53:17,366 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:53:17,366 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11002 states and 11976 transitions.
[2020-05-30 21:53:17,389 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:17,409 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11002 states to 10850 states and 11812 transitions.
[2020-05-30 21:53:17,409 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 780
[2020-05-30 21:53:17,409 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 780
[2020-05-30 21:53:17,410 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10850 states and 11812 transitions.
[2020-05-30 21:53:17,414 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:17,414 INFO  L728         BuchiCegarLoop]: Abstraction has 10850 states and 11812 transitions.
[2020-05-30 21:53:17,420 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10850 states and 11812 transitions.
[2020-05-30 21:53:17,463 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10850 to 10770.
[2020-05-30 21:53:17,463 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10770 states.
[2020-05-30 21:53:17,475 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10770 states to 10770 states and 11730 transitions.
[2020-05-30 21:53:17,475 INFO  L751         BuchiCegarLoop]: Abstraction has 10770 states and 11730 transitions.
[2020-05-30 21:53:17,475 INFO  L631         BuchiCegarLoop]: Abstraction has 10770 states and 11730 transitions.
[2020-05-30 21:53:17,475 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 21:53:17,475 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10770 states and 11730 transitions.
[2020-05-30 21:53:17,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:17,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:17,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:17,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:17,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:17,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:17,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 200178003, now seen corresponding path program 1 times
[2020-05-30 21:53:17,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:17,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:17,638 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:53:17,638 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:17,638 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:53:17,638 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:17,639 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:17,639 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:17,639 INFO  L87              Difference]: Start difference. First operand 10770 states and 11730 transitions. cyclomatic complexity: 973 Second operand 13 states.
[2020-05-30 21:53:20,623 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:20,623 INFO  L93              Difference]: Finished difference Result 10874 states and 11939 transitions.
[2020-05-30 21:53:20,623 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:53:20,624 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10874 states and 11939 transitions.
[2020-05-30 21:53:20,645 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:20,665 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10874 states to 10874 states and 11939 transitions.
[2020-05-30 21:53:20,666 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 782
[2020-05-30 21:53:20,666 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 782
[2020-05-30 21:53:20,666 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10874 states and 11939 transitions.
[2020-05-30 21:53:20,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:20,671 INFO  L728         BuchiCegarLoop]: Abstraction has 10874 states and 11939 transitions.
[2020-05-30 21:53:20,677 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10874 states and 11939 transitions.
[2020-05-30 21:53:20,724 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10874 to 10828.
[2020-05-30 21:53:20,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10828 states.
[2020-05-30 21:53:20,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10828 states to 10828 states and 11885 transitions.
[2020-05-30 21:53:20,737 INFO  L751         BuchiCegarLoop]: Abstraction has 10828 states and 11885 transitions.
[2020-05-30 21:53:20,737 INFO  L631         BuchiCegarLoop]: Abstraction has 10828 states and 11885 transitions.
[2020-05-30 21:53:20,737 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 21:53:20,737 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10828 states and 11885 transitions.
[2020-05-30 21:53:20,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:20,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:20,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:20,748 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:20,748 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:20,751 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:20,751 INFO  L82        PathProgramCache]: Analyzing trace with hash 758908766, now seen corresponding path program 1 times
[2020-05-30 21:53:20,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:20,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:20,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-30 21:53:20,850 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:20,850 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-30 21:53:20,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:20,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:20,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:20,851 INFO  L87              Difference]: Start difference. First operand 10828 states and 11885 transitions. cyclomatic complexity: 1073 Second operand 13 states.
[2020-05-30 21:53:23,762 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:23,762 INFO  L93              Difference]: Finished difference Result 11016 states and 12079 transitions.
[2020-05-30 21:53:23,762 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:53:23,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11016 states and 12079 transitions.
[2020-05-30 21:53:23,780 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:23,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11016 states to 11016 states and 12079 transitions.
[2020-05-30 21:53:23,798 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 807
[2020-05-30 21:53:23,798 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 807
[2020-05-30 21:53:23,798 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11016 states and 12079 transitions.
[2020-05-30 21:53:23,803 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:23,803 INFO  L728         BuchiCegarLoop]: Abstraction has 11016 states and 12079 transitions.
[2020-05-30 21:53:23,808 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11016 states and 12079 transitions.
[2020-05-30 21:53:23,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11016 to 10818.
[2020-05-30 21:53:23,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10818 states.
[2020-05-30 21:53:23,866 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10818 states to 10818 states and 11860 transitions.
[2020-05-30 21:53:23,867 INFO  L751         BuchiCegarLoop]: Abstraction has 10818 states and 11860 transitions.
[2020-05-30 21:53:23,867 INFO  L631         BuchiCegarLoop]: Abstraction has 10818 states and 11860 transitions.
[2020-05-30 21:53:23,867 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 21:53:23,867 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10818 states and 11860 transitions.
[2020-05-30 21:53:23,877 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:23,877 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:23,877 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:23,878 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:23,878 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:23,881 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:23,881 INFO  L82        PathProgramCache]: Analyzing trace with hash -452146644, now seen corresponding path program 1 times
[2020-05-30 21:53:23,882 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:23,904 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:24,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 36 proven. 32 refuted. 0 times theorem prover too weak. 76 trivial. 0 not checked.
[2020-05-30 21:53:24,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:24,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:53:24,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:24,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:53:24,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:53:24,020 INFO  L87              Difference]: Start difference. First operand 10818 states and 11860 transitions. cyclomatic complexity: 1058 Second operand 12 states.
[2020-05-30 21:53:28,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:28,986 INFO  L93              Difference]: Finished difference Result 10935 states and 11981 transitions.
[2020-05-30 21:53:28,986 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:53:28,987 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10935 states and 11981 transitions.
[2020-05-30 21:53:29,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:29,093 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10935 states to 10911 states and 11949 transitions.
[2020-05-30 21:53:29,093 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 787
[2020-05-30 21:53:29,094 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 787
[2020-05-30 21:53:29,094 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10911 states and 11949 transitions.
[2020-05-30 21:53:29,099 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:29,099 INFO  L728         BuchiCegarLoop]: Abstraction has 10911 states and 11949 transitions.
[2020-05-30 21:53:29,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10911 states and 11949 transitions.
[2020-05-30 21:53:29,149 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10911 to 10730.
[2020-05-30 21:53:29,149 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10730 states.
[2020-05-30 21:53:29,161 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10730 states to 10730 states and 11754 transitions.
[2020-05-30 21:53:29,161 INFO  L751         BuchiCegarLoop]: Abstraction has 10730 states and 11754 transitions.
[2020-05-30 21:53:29,161 INFO  L631         BuchiCegarLoop]: Abstraction has 10730 states and 11754 transitions.
[2020-05-30 21:53:29,161 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 21:53:29,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10730 states and 11754 transitions.
[2020-05-30 21:53:29,172 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 21:53:29,172 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:29,172 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:29,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:29,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:29,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:29,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 140964959, now seen corresponding path program 1 times
[2020-05-30 21:53:29,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:29,210 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:29,309 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 61 proven. 0 refuted. 0 times theorem prover too weak. 95 trivial. 0 not checked.
[2020-05-30 21:53:29,309 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:53:29,309 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-30 21:53:29,310 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:29,310 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:29,310 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:29,310 INFO  L87              Difference]: Start difference. First operand 10730 states and 11754 transitions. cyclomatic complexity: 1040 Second operand 13 states.
[2020-05-30 21:53:32,261 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:32,262 INFO  L93              Difference]: Finished difference Result 11705 states and 12948 transitions.
[2020-05-30 21:53:32,262 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:53:32,262 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11705 states and 12948 transitions.
[2020-05-30 21:53:32,290 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:32,315 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11705 states to 11705 states and 12948 transitions.
[2020-05-30 21:53:32,315 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 834
[2020-05-30 21:53:32,316 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 834
[2020-05-30 21:53:32,316 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11705 states and 12948 transitions.
[2020-05-30 21:53:32,322 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:32,322 INFO  L728         BuchiCegarLoop]: Abstraction has 11705 states and 12948 transitions.
[2020-05-30 21:53:32,328 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11705 states and 12948 transitions.
[2020-05-30 21:53:32,379 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11705 to 11685.
[2020-05-30 21:53:32,379 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11685 states.
[2020-05-30 21:53:32,395 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11685 states to 11685 states and 12923 transitions.
[2020-05-30 21:53:32,395 INFO  L751         BuchiCegarLoop]: Abstraction has 11685 states and 12923 transitions.
[2020-05-30 21:53:32,395 INFO  L631         BuchiCegarLoop]: Abstraction has 11685 states and 12923 transitions.
[2020-05-30 21:53:32,395 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 21:53:32,395 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11685 states and 12923 transitions.
[2020-05-30 21:53:32,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:32,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:32,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:32,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:32,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:32,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:32,413 INFO  L82        PathProgramCache]: Analyzing trace with hash 1553920290, now seen corresponding path program 1 times
[2020-05-30 21:53:32,414 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:32,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:32,542 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 2 proven. 32 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-05-30 21:53:32,542 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:32,542 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:53:32,542 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:32,542 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:32,542 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:32,543 INFO  L87              Difference]: Start difference. First operand 11685 states and 12923 transitions. cyclomatic complexity: 1254 Second operand 13 states.
[2020-05-30 21:53:35,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:35,632 INFO  L93              Difference]: Finished difference Result 11511 states and 12689 transitions.
[2020-05-30 21:53:35,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 21:53:35,633 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11511 states and 12689 transitions.
[2020-05-30 21:53:35,658 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:35,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11511 states to 11499 states and 12673 transitions.
[2020-05-30 21:53:35,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 807
[2020-05-30 21:53:35,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 807
[2020-05-30 21:53:35,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11499 states and 12673 transitions.
[2020-05-30 21:53:35,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:35,689 INFO  L728         BuchiCegarLoop]: Abstraction has 11499 states and 12673 transitions.
[2020-05-30 21:53:35,695 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11499 states and 12673 transitions.
[2020-05-30 21:53:35,743 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11499 to 11486.
[2020-05-30 21:53:35,743 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11486 states.
[2020-05-30 21:53:35,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11486 states to 11486 states and 12660 transitions.
[2020-05-30 21:53:35,757 INFO  L751         BuchiCegarLoop]: Abstraction has 11486 states and 12660 transitions.
[2020-05-30 21:53:35,757 INFO  L631         BuchiCegarLoop]: Abstraction has 11486 states and 12660 transitions.
[2020-05-30 21:53:35,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 21:53:35,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11486 states and 12660 transitions.
[2020-05-30 21:53:35,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:35,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:35,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:35,771 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:35,771 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:35,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:35,775 INFO  L82        PathProgramCache]: Analyzing trace with hash -1919924318, now seen corresponding path program 1 times
[2020-05-30 21:53:35,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:35,801 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:35,952 INFO  L134       CoverageAnalysis]: Checked inductivity of 115 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-05-30 21:53:35,952 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:35,952 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 21:53:35,952 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:35,952 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:53:35,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:53:35,952 INFO  L87              Difference]: Start difference. First operand 11486 states and 12660 transitions. cyclomatic complexity: 1190 Second operand 12 states.
[2020-05-30 21:53:40,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:40,172 INFO  L93              Difference]: Finished difference Result 11611 states and 12763 transitions.
[2020-05-30 21:53:40,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 21:53:40,172 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11611 states and 12763 transitions.
[2020-05-30 21:53:40,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:40,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11611 states to 11611 states and 12763 transitions.
[2020-05-30 21:53:40,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 846
[2020-05-30 21:53:40,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 846
[2020-05-30 21:53:40,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11611 states and 12763 transitions.
[2020-05-30 21:53:40,224 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:40,224 INFO  L728         BuchiCegarLoop]: Abstraction has 11611 states and 12763 transitions.
[2020-05-30 21:53:40,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11611 states and 12763 transitions.
[2020-05-30 21:53:40,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11611 to 11454.
[2020-05-30 21:53:40,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11454 states.
[2020-05-30 21:53:40,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11454 states to 11454 states and 12573 transitions.
[2020-05-30 21:53:40,289 INFO  L751         BuchiCegarLoop]: Abstraction has 11454 states and 12573 transitions.
[2020-05-30 21:53:40,289 INFO  L631         BuchiCegarLoop]: Abstraction has 11454 states and 12573 transitions.
[2020-05-30 21:53:40,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 21:53:40,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11454 states and 12573 transitions.
[2020-05-30 21:53:40,301 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:40,301 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:40,301 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:40,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:40,302 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:40,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:40,306 INFO  L82        PathProgramCache]: Analyzing trace with hash 812933806, now seen corresponding path program 1 times
[2020-05-30 21:53:40,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:40,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:40,479 INFO  L134       CoverageAnalysis]: Checked inductivity of 123 backedges. 4 proven. 32 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-30 21:53:40,479 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:40,479 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:53:40,480 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:40,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:40,480 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:40,480 INFO  L87              Difference]: Start difference. First operand 11454 states and 12573 transitions. cyclomatic complexity: 1135 Second operand 13 states.
[2020-05-30 21:53:43,160 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:43,160 INFO  L93              Difference]: Finished difference Result 11512 states and 12622 transitions.
[2020-05-30 21:53:43,160 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-05-30 21:53:43,160 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11512 states and 12622 transitions.
[2020-05-30 21:53:43,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:43,198 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11512 states to 11512 states and 12622 transitions.
[2020-05-30 21:53:43,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 815
[2020-05-30 21:53:43,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 815
[2020-05-30 21:53:43,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11512 states and 12622 transitions.
[2020-05-30 21:53:43,203 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:43,203 INFO  L728         BuchiCegarLoop]: Abstraction has 11512 states and 12622 transitions.
[2020-05-30 21:53:43,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11512 states and 12622 transitions.
[2020-05-30 21:53:43,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11512 to 11452.
[2020-05-30 21:53:43,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11452 states.
[2020-05-30 21:53:43,271 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11452 states to 11452 states and 12557 transitions.
[2020-05-30 21:53:43,271 INFO  L751         BuchiCegarLoop]: Abstraction has 11452 states and 12557 transitions.
[2020-05-30 21:53:43,271 INFO  L631         BuchiCegarLoop]: Abstraction has 11452 states and 12557 transitions.
[2020-05-30 21:53:43,271 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 21:53:43,271 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11452 states and 12557 transitions.
[2020-05-30 21:53:43,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:43,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:43,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:43,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:43,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:43,295 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:43,295 INFO  L82        PathProgramCache]: Analyzing trace with hash 1358304793, now seen corresponding path program 1 times
[2020-05-30 21:53:43,295 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:43,325 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:43,573 INFO  L134       CoverageAnalysis]: Checked inductivity of 520 backedges. 4 proven. 79 refuted. 0 times theorem prover too weak. 437 trivial. 0 not checked.
[2020-05-30 21:53:43,573 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:43,573 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 21:53:43,574 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:43,574 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-30 21:53:43,574 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-30 21:53:43,574 INFO  L87              Difference]: Start difference. First operand 11452 states and 12557 transitions. cyclomatic complexity: 1121 Second operand 13 states.
[2020-05-30 21:53:46,454 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:46,454 INFO  L93              Difference]: Finished difference Result 11455 states and 12544 transitions.
[2020-05-30 21:53:46,454 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 21:53:46,455 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11455 states and 12544 transitions.
[2020-05-30 21:53:46,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:46,492 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11455 states to 11449 states and 12531 transitions.
[2020-05-30 21:53:46,492 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 806
[2020-05-30 21:53:46,493 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 806
[2020-05-30 21:53:46,493 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11449 states and 12531 transitions.
[2020-05-30 21:53:46,498 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:46,498 INFO  L728         BuchiCegarLoop]: Abstraction has 11449 states and 12531 transitions.
[2020-05-30 21:53:46,503 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11449 states and 12531 transitions.
[2020-05-30 21:53:46,546 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11449 to 11438.
[2020-05-30 21:53:46,546 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11438 states.
[2020-05-30 21:53:46,559 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11438 states to 11438 states and 12520 transitions.
[2020-05-30 21:53:46,559 INFO  L751         BuchiCegarLoop]: Abstraction has 11438 states and 12520 transitions.
[2020-05-30 21:53:46,559 INFO  L631         BuchiCegarLoop]: Abstraction has 11438 states and 12520 transitions.
[2020-05-30 21:53:46,559 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 21:53:46,560 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11438 states and 12520 transitions.
[2020-05-30 21:53:46,571 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:46,571 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:46,571 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:46,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:46,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:46,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:46,576 INFO  L82        PathProgramCache]: Analyzing trace with hash -90804093, now seen corresponding path program 1 times
[2020-05-30 21:53:46,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:46,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:46,763 INFO  L134       CoverageAnalysis]: Checked inductivity of 170 backedges. 5 proven. 59 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-05-30 21:53:46,763 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:46,763 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 21:53:46,764 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:46,764 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 21:53:46,764 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 21:53:46,764 INFO  L87              Difference]: Start difference. First operand 11438 states and 12520 transitions. cyclomatic complexity: 1097 Second operand 10 states.
[2020-05-30 21:53:50,207 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:50,207 INFO  L93              Difference]: Finished difference Result 11560 states and 12671 transitions.
[2020-05-30 21:53:50,207 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 21:53:50,207 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11560 states and 12671 transitions.
[2020-05-30 21:53:50,221 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:50,239 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11560 states to 11560 states and 12671 transitions.
[2020-05-30 21:53:50,239 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 833
[2020-05-30 21:53:50,240 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 833
[2020-05-30 21:53:50,240 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11560 states and 12671 transitions.
[2020-05-30 21:53:50,244 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:50,244 INFO  L728         BuchiCegarLoop]: Abstraction has 11560 states and 12671 transitions.
[2020-05-30 21:53:50,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11560 states and 12671 transitions.
[2020-05-30 21:53:50,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11560 to 11455.
[2020-05-30 21:53:50,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11455 states.
[2020-05-30 21:53:50,305 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11455 states to 11455 states and 12551 transitions.
[2020-05-30 21:53:50,305 INFO  L751         BuchiCegarLoop]: Abstraction has 11455 states and 12551 transitions.
[2020-05-30 21:53:50,305 INFO  L631         BuchiCegarLoop]: Abstraction has 11455 states and 12551 transitions.
[2020-05-30 21:53:50,305 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 21:53:50,305 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11455 states and 12551 transitions.
[2020-05-30 21:53:50,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:50,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:50,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:50,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:50,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:50,322 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:50,323 INFO  L82        PathProgramCache]: Analyzing trace with hash -345568284, now seen corresponding path program 1 times
[2020-05-30 21:53:50,323 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:50,345 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:50,499 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 39 proven. 75 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-05-30 21:53:50,499 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:50,499 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 21:53:50,499 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:50,499 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 21:53:50,499 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 21:53:50,500 INFO  L87              Difference]: Start difference. First operand 11455 states and 12551 transitions. cyclomatic complexity: 1113 Second operand 11 states.
[2020-05-30 21:53:53,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:53,196 INFO  L93              Difference]: Finished difference Result 11501 states and 12608 transitions.
[2020-05-30 21:53:53,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:53:53,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11501 states and 12608 transitions.
[2020-05-30 21:53:53,223 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:53,247 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11501 states to 11499 states and 12604 transitions.
[2020-05-30 21:53:53,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 817
[2020-05-30 21:53:53,248 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 817
[2020-05-30 21:53:53,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11499 states and 12604 transitions.
[2020-05-30 21:53:53,254 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:53,254 INFO  L728         BuchiCegarLoop]: Abstraction has 11499 states and 12604 transitions.
[2020-05-30 21:53:53,261 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11499 states and 12604 transitions.
[2020-05-30 21:53:53,311 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11499 to 11458.
[2020-05-30 21:53:53,311 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11458 states.
[2020-05-30 21:53:53,324 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11458 states to 11458 states and 12557 transitions.
[2020-05-30 21:53:53,325 INFO  L751         BuchiCegarLoop]: Abstraction has 11458 states and 12557 transitions.
[2020-05-30 21:53:53,325 INFO  L631         BuchiCegarLoop]: Abstraction has 11458 states and 12557 transitions.
[2020-05-30 21:53:53,325 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 21:53:53,325 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11458 states and 12557 transitions.
[2020-05-30 21:53:53,337 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:53,337 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:53,337 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:53,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:53,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:53,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:53,344 INFO  L82        PathProgramCache]: Analyzing trace with hash 1792776740, now seen corresponding path program 2 times
[2020-05-30 21:53:53,344 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:53,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:53:53,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 310 trivial. 0 not checked.
[2020-05-30 21:53:53,772 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:53:53,772 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-30 21:53:53,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:53:53,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-05-30 21:53:53,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=294, Unknown=0, NotChecked=0, Total=342
[2020-05-30 21:53:53,773 INFO  L87              Difference]: Start difference. First operand 11458 states and 12557 transitions. cyclomatic complexity: 1115 Second operand 19 states.
[2020-05-30 21:53:59,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:53:59,405 INFO  L93              Difference]: Finished difference Result 11658 states and 12906 transitions.
[2020-05-30 21:53:59,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-30 21:53:59,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11658 states and 12906 transitions.
[2020-05-30 21:53:59,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:59,442 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11658 states to 11658 states and 12906 transitions.
[2020-05-30 21:53:59,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-05-30 21:53:59,443 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-05-30 21:53:59,443 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11658 states and 12906 transitions.
[2020-05-30 21:53:59,448 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:53:59,448 INFO  L728         BuchiCegarLoop]: Abstraction has 11658 states and 12906 transitions.
[2020-05-30 21:53:59,453 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11658 states and 12906 transitions.
[2020-05-30 21:53:59,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11658 to 11563.
[2020-05-30 21:53:59,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11563 states.
[2020-05-30 21:53:59,512 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11563 states to 11563 states and 12784 transitions.
[2020-05-30 21:53:59,512 INFO  L751         BuchiCegarLoop]: Abstraction has 11563 states and 12784 transitions.
[2020-05-30 21:53:59,512 INFO  L631         BuchiCegarLoop]: Abstraction has 11563 states and 12784 transitions.
[2020-05-30 21:53:59,512 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 21:53:59,512 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11563 states and 12784 transitions.
[2020-05-30 21:53:59,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 21:53:59,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:53:59,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:53:59,525 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:53:59,525 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:53:59,529 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:53:59,529 INFO  L82        PathProgramCache]: Analyzing trace with hash 1897083065, now seen corresponding path program 1 times
[2020-05-30 21:53:59,529 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:53:59,584 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:54:00,216 INFO  L134       CoverageAnalysis]: Checked inductivity of 319 backedges. 91 proven. 9 refuted. 0 times theorem prover too weak. 219 trivial. 0 not checked.
[2020-05-30 21:54:00,216 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:54:00,216 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 21:54:00,217 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:54:00,217 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 21:54:00,217 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=969, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 21:54:00,217 INFO  L87              Difference]: Start difference. First operand 11563 states and 12784 transitions. cyclomatic complexity: 1243 Second operand 33 states.
[2020-05-30 21:54:27,312 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:54:27,312 INFO  L93              Difference]: Finished difference Result 24109 states and 26889 transitions.
[2020-05-30 21:54:27,313 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-05-30 21:54:27,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24109 states and 26889 transitions.
[2020-05-30 21:54:27,359 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-30 21:54:27,424 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24109 states to 24109 states and 26883 transitions.
[2020-05-30 21:54:27,425 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1736
[2020-05-30 21:54:27,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1736
[2020-05-30 21:54:27,426 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24109 states and 26883 transitions.
[2020-05-30 21:54:27,438 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:54:27,438 INFO  L728         BuchiCegarLoop]: Abstraction has 24109 states and 26883 transitions.
[2020-05-30 21:54:27,447 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24109 states and 26883 transitions.
[2020-05-30 21:54:27,577 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24109 to 23857.
[2020-05-30 21:54:27,578 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23857 states.
[2020-05-30 21:54:27,610 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23857 states to 23857 states and 26553 transitions.
[2020-05-30 21:54:27,610 INFO  L751         BuchiCegarLoop]: Abstraction has 23857 states and 26553 transitions.
[2020-05-30 21:54:27,611 INFO  L631         BuchiCegarLoop]: Abstraction has 23857 states and 26553 transitions.
[2020-05-30 21:54:27,611 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 21:54:27,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23857 states and 26553 transitions.
[2020-05-30 21:54:27,639 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-30 21:54:27,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:54:27,639 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:54:27,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:54:27,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this])
[L3460]                    gas := gas - 4;
[L3461]        CALL        call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4159]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4160]        COND FALSE  !(revert)
[L4165]                    gas := gas - 20287;
[L4166]                    auctionState_ValidatorAuction[this] := 4;
[L4167]                    gas := gas - 20013;
[L4168]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4169]                    assume now >= 0;
[L4170]                    closeTime_ValidatorAuction[this] := now;
[L4171]                    assert { :EventEmitted "AuctionFailed_ValidatorAuction" } true;
[L3461]        RET         call transitionToAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3462]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND TRUE   DType[to] == ValidatorAuction
[L4256]        CALL        call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L2916]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2917]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2918]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2919]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L2919]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L2920]        COND FALSE  !(revert)
[L2925]                    gas := gas - 15;
[L2926]        CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L2926]        RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L2927]        COND FALSE  !(revert)
[L4256]        RET         call FallbackMethod_ValidatorAuction__success(to, from, amount);
[L4257]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:54:27,648 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:27,648 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586469574, now seen corresponding path program 1 times
[2020-05-30 21:54:27,649 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:27,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:54:27,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 359 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 359 trivial. 0 not checked.
[2020-05-30 21:54:27,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:54:27,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 21:54:27,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:54:27,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 21:54:27,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 21:54:27,992 INFO  L87              Difference]: Start difference. First operand 23857 states and 26553 transitions. cyclomatic complexity: 2738 Second operand 8 states.
[2020-05-30 21:54:28,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:54:28,182 INFO  L93              Difference]: Finished difference Result 23947 states and 26545 transitions.
[2020-05-30 21:54:28,183 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 21:54:28,183 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23947 states and 26545 transitions.
[2020-05-30 21:54:28,225 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-30 21:54:28,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23947 states to 20749 states and 23093 transitions.
[2020-05-30 21:54:28,279 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1493
[2020-05-30 21:54:28,280 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1649
[2020-05-30 21:54:28,280 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20749 states and 23093 transitions.
[2020-05-30 21:54:28,292 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:54:28,292 INFO  L728         BuchiCegarLoop]: Abstraction has 20749 states and 23093 transitions.
[2020-05-30 21:54:28,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20749 states and 23093 transitions.
[2020-05-30 21:54:28,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20749 to 20725.
[2020-05-30 21:54:28,414 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20725 states.
[2020-05-30 21:54:28,442 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20725 states to 20725 states and 23060 transitions.
[2020-05-30 21:54:28,442 INFO  L751         BuchiCegarLoop]: Abstraction has 20725 states and 23060 transitions.
[2020-05-30 21:54:28,442 INFO  L631         BuchiCegarLoop]: Abstraction has 20725 states and 23060 transitions.
[2020-05-30 21:54:28,442 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 21:54:28,442 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20725 states and 23060 transitions.
[2020-05-30 21:54:28,465 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-30 21:54:28,465 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:54:28,465 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:54:28,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:54:28,467 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND FALSE  !(auctionState_ValidatorAuction[this] == 3)
[L3620]                    gas := gas - 297;
[L3621]        COND TRUE   auctionState_ValidatorAuction[this] == 4
[L3623]                    gas := gas - 4;
[L3624]        CALL        call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4056]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 4);
[L4057]        COND FALSE  !(revert)
[L4062]                    gas := gas - 963;
[L4063]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4064]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > 0))
[L4070]                    gas := gas - 306;
[L4071]                    assume valueToWithdraw_s1068 >= 0;
[L4072]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4073]                    valueToWithdraw_s1068 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4074]                    gas := gas - 5103;
[L4075]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L4076-L4077]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4078]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := 0;
[L4079-L4080]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L4081]                    gas := gas - 35786;
[L4082]                    __var_21 := gas;
[L4083]        COND TRUE   gas > 2300
[L4085]                    gas := 2300;
[L4088]                    __var_21 := __var_21 - gas;
[L4089]                    assume valueToWithdraw_s1068 >= 0;
[L4090]        CALL        call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L4090]        RET         call __var_22 := send__success(this, msgsender_MSG, valueToWithdraw_s1068);
[L4091]        COND FALSE  !(!__var_22)
[L4097]                    gas := __var_21 + gas;
[L3624]        RET         call withdrawAfterAuctionFailed_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3625]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND TRUE   Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this]
[L3213]                    gas := gas - 4;
[L3214]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3214]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3215]        COND FALSE  !(revert)
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume !(user == msgsender_MSG);
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:54:28,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:28,473 INFO  L82        PathProgramCache]: Analyzing trace with hash -135320075, now seen corresponding path program 1 times
[2020-05-30 21:54:28,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:28,509 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:54:28,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 355 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 323 trivial. 0 not checked.
[2020-05-30 21:54:28,738 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:54:28,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 21:54:28,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:54:28,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 21:54:28,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 21:54:28,739 INFO  L87              Difference]: Start difference. First operand 20725 states and 23060 transitions. cyclomatic complexity: 2377 Second operand 12 states.
[2020-05-30 21:54:30,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:54:30,910 INFO  L93              Difference]: Finished difference Result 22161 states and 24875 transitions.
[2020-05-30 21:54:30,910 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 21:54:30,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22161 states and 24875 transitions.
[2020-05-30 21:54:30,951 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:54:31,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22161 states to 22161 states and 24875 transitions.
[2020-05-30 21:54:31,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1728
[2020-05-30 21:54:31,011 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1728
[2020-05-30 21:54:31,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22161 states and 24875 transitions.
[2020-05-30 21:54:31,025 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:54:31,025 INFO  L728         BuchiCegarLoop]: Abstraction has 22161 states and 24875 transitions.
[2020-05-30 21:54:31,035 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22161 states and 24875 transitions.
[2020-05-30 21:54:31,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22161 to 22062.
[2020-05-30 21:54:31,161 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22062 states.
[2020-05-30 21:54:31,194 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22062 states to 22062 states and 24760 transitions.
[2020-05-30 21:54:31,194 INFO  L751         BuchiCegarLoop]: Abstraction has 22062 states and 24760 transitions.
[2020-05-30 21:54:31,194 INFO  L631         BuchiCegarLoop]: Abstraction has 22062 states and 24760 transitions.
[2020-05-30 21:54:31,194 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 21:54:31,194 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22062 states and 24760 transitions.
[2020-05-30 21:54:31,219 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:54:31,219 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:54:31,219 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:54:31,221 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:54:31,221 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND FALSE  !(gas > 2300)
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:54:31,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:31,227 INFO  L82        PathProgramCache]: Analyzing trace with hash 633336188, now seen corresponding path program 1 times
[2020-05-30 21:54:31,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:31,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:54:31,491 INFO  L134       CoverageAnalysis]: Checked inductivity of 355 backedges. 15 proven. 0 refuted. 0 times theorem prover too weak. 340 trivial. 0 not checked.
[2020-05-30 21:54:31,491 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 21:54:31,491 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-30 21:54:31,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 21:54:31,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 21:54:31,492 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=164, Unknown=0, NotChecked=0, Total=240
[2020-05-30 21:54:31,492 INFO  L87              Difference]: Start difference. First operand 22062 states and 24760 transitions. cyclomatic complexity: 2741 Second operand 16 states.
[2020-05-30 21:54:35,071 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:54:35,071 INFO  L93              Difference]: Finished difference Result 26975 states and 31135 transitions.
[2020-05-30 21:54:35,071 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-30 21:54:35,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26975 states and 31135 transitions.
[2020-05-30 21:54:35,150 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 40
[2020-05-30 21:54:35,242 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26975 states to 26695 states and 30781 transitions.
[2020-05-30 21:54:35,242 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2649
[2020-05-30 21:54:35,244 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2649
[2020-05-30 21:54:35,244 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26695 states and 30781 transitions.
[2020-05-30 21:54:35,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:54:35,263 INFO  L728         BuchiCegarLoop]: Abstraction has 26695 states and 30781 transitions.
[2020-05-30 21:54:35,276 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26695 states and 30781 transitions.
[2020-05-30 21:54:35,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26695 to 22062.
[2020-05-30 21:54:35,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22062 states.
[2020-05-30 21:54:35,466 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22062 states to 22062 states and 24744 transitions.
[2020-05-30 21:54:35,466 INFO  L751         BuchiCegarLoop]: Abstraction has 22062 states and 24744 transitions.
[2020-05-30 21:54:35,466 INFO  L631         BuchiCegarLoop]: Abstraction has 22062 states and 24744 transitions.
[2020-05-30 21:54:35,467 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 21:54:35,467 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22062 states and 24744 transitions.
[2020-05-30 21:54:35,492 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 21:54:35,492 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:54:35,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:54:35,494 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:54:35,494 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:54:35,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:35,499 INFO  L82        PathProgramCache]: Analyzing trace with hash -19705693, now seen corresponding path program 1 times
[2020-05-30 21:54:35,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:35,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:35,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:35,838 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:35,838 INFO  L82        PathProgramCache]: Analyzing trace with hash 1187629409, now seen corresponding path program 1 times
[2020-05-30 21:54:35,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:35,848 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:35,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:35,872 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:35,872 INFO  L82        PathProgramCache]: Analyzing trace with hash -259049469, now seen corresponding path program 1 times
[2020-05-30 21:54:35,873 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:35,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 21:54:36,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 362 backedges. 28 proven. 7 refuted. 0 times theorem prover too weak. 327 trivial. 0 not checked.
[2020-05-30 21:54:36,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 21:54:36,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-05-30 21:54:36,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-30 21:54:36,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=229, Unknown=0, NotChecked=0, Total=272
[2020-05-30 21:54:36,421 INFO  L87              Difference]: Start difference. First operand 22062 states and 24744 transitions. cyclomatic complexity: 2725 Second operand 17 states.
[2020-05-30 21:54:40,972 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 21:54:40,972 INFO  L93              Difference]: Finished difference Result 22716 states and 26309 transitions.
[2020-05-30 21:54:40,972 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 21:54:40,973 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22716 states and 26309 transitions.
[2020-05-30 21:54:41,029 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-05-30 21:54:41,093 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22716 states to 22716 states and 26309 transitions.
[2020-05-30 21:54:41,093 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1855
[2020-05-30 21:54:41,094 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1855
[2020-05-30 21:54:41,094 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22716 states and 26309 transitions.
[2020-05-30 21:54:41,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 21:54:41,108 INFO  L728         BuchiCegarLoop]: Abstraction has 22716 states and 26309 transitions.
[2020-05-30 21:54:41,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22716 states and 26309 transitions.
[2020-05-30 21:54:41,256 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22716 to 22268.
[2020-05-30 21:54:41,256 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22268 states.
[2020-05-30 21:54:41,291 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22268 states to 22268 states and 25354 transitions.
[2020-05-30 21:54:41,291 INFO  L751         BuchiCegarLoop]: Abstraction has 22268 states and 25354 transitions.
[2020-05-30 21:54:41,291 INFO  L631         BuchiCegarLoop]: Abstraction has 22268 states and 25354 transitions.
[2020-05-30 21:54:41,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 21:54:41,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22268 states and 25354 transitions.
[2020-05-30 21:54:41,318 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 36
[2020-05-30 21:54:41,318 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 21:54:41,318 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 21:54:41,320 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 21:54:41,320 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       fsum_bid_ValidatorAuction_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L5618]                    assume null == 0;
[L5619]        CALL        call this := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5619]        RET         call this := FreshRefGenerator__success();
[L5620]                    assume now >= 0;
[L5621]                    assume DType[this] == ValidatorAuction;
[L5622]                    gas := gas - 53000;
[L5623]        CALL        call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L752]                     havoc __exception;
[L753]                     revert := false;
[L754]         COND FALSE  !(__exception)
[L796]         CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]                    assume msgsender_MSG != null;
[L1828]                    Balance[this] := 0;
[L1829]                    owner_Ownable[this] := null;
[L1830]                    owner_Ownable[this] := msgsender_MSG;
[L1848]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L2878]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]        COND FALSE  !(revert)
[L2884]        CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]                    assume msgsender_MSG != null;
[L2736]                    Balance[this] := 0;
[L2737]                    auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]                    startPrice_ValidatorAuction[this] := 0;
[L2739]                    minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]                    maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]        CALL        call __var_10 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2741]        RET         call __var_10 := FreshRefGenerator__success();
[L2742]        COND FALSE  !(revert)
[L2747]                    whitelist_ValidatorAuction[this] := __var_10;
[L2748]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]        CALL        call __var_11 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2749]        RET         call __var_11 := FreshRefGenerator__success();
[L2750]        COND FALSE  !(revert)
[L2755]                    bids_ValidatorAuction[this] := __var_11;
[L2756]                    M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]                    sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]        CALL        call __var_12 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L2758]        RET         call __var_12 := FreshRefGenerator__success();
[L2759]        COND FALSE  !(revert)
[L2764]                    bidders_ValidatorAuction[this] := __var_12;
[L2765]                    assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]                    startTime_ValidatorAuction[this] := 0;
[L2767]                    closeTime_ValidatorAuction[this] := 0;
[L2768]                    lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]                    assume _auctionDurationInDays_s578 >= 0;
[L2770]        COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]                    assume _auctionDurationInDays_s578 >= 0;
[L2777]        COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]        COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]        COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]                    assume _startPriceInWei_s578 >= 0;
[L2806]        COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]                    assume startPrice_ValidatorAuction[this] >= 0;
[L2813]                    assume _startPriceInWei_s578 >= 0;
[L2814]                    startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]                    assume _auctionDurationInDays_s578 >= 0;
[L2817]                    auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]                    assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]                    maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]                    assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]                    minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]                    depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]                    __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]                    lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]                    assume __var_9 >= 0;
[L2829]                    assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]                    auctionState_ValidatorAuction[this] := 0;
[L2884]        RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]        COND FALSE  !(revert)
[L796]         RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]                     assume !revert && gas >= 0;
[L5623]        RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L5624]                    assume !revert && gas >= 0;
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND FALSE  !(choice == 4)
[L5575]        COND TRUE   choice == 3
[L5577]                    gas := gas - 21000;
[L5578]        COND TRUE   gas >= 0
[L5580]        CALL        call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L1807]                    havoc newRef;
[L1808]                    assume Alloc[newRef] == false;
[L1809]                    Alloc[newRef] := true;
[L1810]                    assume newRef != null;
[L5580]        RET         call addressesToWhitelist_s852 := FreshRefGenerator__success();
[L5581]                    assume msgvalue_MSG == 0;
[L5582]        CALL        call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1057]                    havoc __exception;
[L1058]                    revert := false;
[L1059]        COND FALSE  !(__exception)
[L1101]        CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]        COND FALSE  !(revert)
[L3521]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]        COND FALSE  !(revert)
[L3527]                    gas := gas - 116;
[L3528]                    assume i_s850 >= 0;
[L3529]                    assume Length[addressesToWhitelist_s852] >= 0;
[L3530]                    gas := gas - 11;
[L3531]                    assume i_s850 >= 0;
[L3532]                    i_s850 := 0;
[L3533]        COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]                    gas := gas - 21095;
[L3536]                    assume i_s850 >= 0;
[L3537]                    M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]                    assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]                    gas := gas - 19;
[L3540]                    assume i_s850 >= 0;
[L3541]                    i_s850 := i_s850 + 1;
[L3542]                    assume i_s850 >= 0;
[L3543]        COND FALSE  !(gas < 0)
[L3533]        COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]        RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]                    assume !revert && gas >= 0;
[L5582]        RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND TRUE   choice == 6
[L5550]                    gas := gas - 21000;
[L5551]        COND TRUE   gas >= 0
[L5553]                    assume msgvalue_MSG == 0;
[L5554]        CALL        call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L877]                     havoc __exception;
[L878]                     revert := false;
[L879]         COND FALSE  !(__exception)
[L921]         CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]                    gas := gas - 4257;
[L5117]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]        COND FALSE  !(revert)
[L3271]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]        COND FALSE  !(revert)
[L3277]                    gas := gas - 3900;
[L3278]                    assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]                    __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]        COND FALSE  !(!__var_16)
[L3286]                    gas := gas - 20287;
[L3287]                    auctionState_ValidatorAuction[this] := 1;
[L3288]                    gas := gas - 20013;
[L3289]                    assume startTime_ValidatorAuction[this] >= 0;
[L3290]                    assume now >= 0;
[L3291]                    startTime_ValidatorAuction[this] := now;
[L3292]                    assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]         RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]                     assume !revert && gas >= 0;
[L5554]        RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND TRUE   choice == 7
[L5541]                    gas := gas - 21000;
[L5542]        COND TRUE   gas >= 0
[L5544]                    assume msgvalue_MSG >= 0;
[L5545]        CALL        call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND FALSE  !(choice == 5)
[L5566]        COND TRUE   choice == 4
[L5568]                    gas := gas - 21000;
[L5569]        COND TRUE   gas >= 0
[L5571]                    assume msgvalue_MSG == 0;
[L5572]        CALL        call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND FALSE  !(choice == 8)
[L5539]        COND FALSE  !(choice == 7)
[L5548]        COND FALSE  !(choice == 6)
[L5557]        COND TRUE   choice == 5
[L5559]                    gas := gas - 21000;
[L5560]        COND TRUE   gas >= 0
[L5562]                    assume msgvalue_MSG == 0;
[L5563]        CALL        call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);
[L5627]        CALL        call CorralChoice_ValidatorAuction(this);
[L5496]                    havoc msgsender_MSG;
[L5497]                    havoc msgvalue_MSG;
[L5498]                    havoc choice;
[L5499]                    havoc newOwner_s43;
[L5500]                    havoc _startPriceInWei_s578;
[L5501]                    havoc _auctionDurationInDays_s578;
[L5502]                    havoc _minimalNumberOfParticipants_s578;
[L5503]                    havoc _maximalNumberOfParticipants_s578;
[L5504]                    havoc _depositLocker_s578;
[L5505]                    havoc addressesToWhitelist_s852;
[L5506]                    havoc __ret_0_currentPrice;
[L5507]                    havoc secondsSinceStart_s978;
[L5508]                    havoc __ret_0_priceAtElapsedTime;
[L5509]                    havoc tmpNow;
[L5510]                    havoc gas;
[L5511]                    assume gas > 4000000 && gas <= 8000000;
[L5512]                    tmpNow := now;
[L5513]                    havoc now;
[L5514]                    assume now > tmpNow;
[L5515]                    assume msgsender_MSG != null;
[L5516]                    assume DType[msgsender_MSG] != Ownable;
[L5517]                    assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]                    assume DType[msgsender_MSG] != DepositLocker;
[L5519]                    assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]                    Alloc[msgsender_MSG] := true;
[L5521]        COND FALSE  !(choice == 9)
[L5530]        COND TRUE   choice == 8
[L5532]                    gas := gas - 21000;
[L5533]        COND TRUE   gas >= 0
[L5535]                    assume msgvalue_MSG == 0;
[L5536]        CALL        call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
[L5627]        RET         call CorralChoice_ValidatorAuction(this);

Loop:
[L5627]  CALL        call CorralChoice_ValidatorAuction(this);
[L5496]              havoc msgsender_MSG;
[L5497]              havoc msgvalue_MSG;
[L5498]              havoc choice;
[L5499]              havoc newOwner_s43;
[L5500]              havoc _startPriceInWei_s578;
[L5501]              havoc _auctionDurationInDays_s578;
[L5502]              havoc _minimalNumberOfParticipants_s578;
[L5503]              havoc _maximalNumberOfParticipants_s578;
[L5504]              havoc _depositLocker_s578;
[L5505]              havoc addressesToWhitelist_s852;
[L5506]              havoc __ret_0_currentPrice;
[L5507]              havoc secondsSinceStart_s978;
[L5508]              havoc __ret_0_priceAtElapsedTime;
[L5509]              havoc tmpNow;
[L5510]              havoc gas;
[L5511]              assume gas > 4000000 && gas <= 8000000;
[L5512]              tmpNow := now;
[L5513]              havoc now;
[L5514]              assume now > tmpNow;
[L5515]              assume msgsender_MSG != null;
[L5516]              assume DType[msgsender_MSG] != Ownable;
[L5517]              assume DType[msgsender_MSG] != DepositLockerInterface;
[L5518]              assume DType[msgsender_MSG] != DepositLocker;
[L5519]              assume DType[msgsender_MSG] != ValidatorAuction;
[L5520]              Alloc[msgsender_MSG] := true;
[L5521]  COND FALSE  !(choice == 9)
[L5530]  COND FALSE  !(choice == 8)
[L5539]  COND FALSE  !(choice == 7)
[L5548]  COND FALSE  !(choice == 6)
[L5557]  COND FALSE  !(choice == 5)
[L5566]  COND FALSE  !(choice == 4)
[L5575]  COND FALSE  !(choice == 3)
[L5585]  COND FALSE  !(choice == 2)
[L5594]  COND FALSE  !(choice == 1)
[L5627]  RET         call CorralChoice_ValidatorAuction(this);

[2020-05-30 21:54:41,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:41,325 INFO  L82        PathProgramCache]: Analyzing trace with hash -19705693, now seen corresponding path program 2 times
[2020-05-30 21:54:41,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:41,373 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:41,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:41,570 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:41,570 INFO  L82        PathProgramCache]: Analyzing trace with hash -985352776, now seen corresponding path program 1 times
[2020-05-30 21:54:41,570 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:41,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:41,574 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:41,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 21:54:41,577 INFO  L82        PathProgramCache]: Analyzing trace with hash 189387478, now seen corresponding path program 1 times
[2020-05-30 21:54:41,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 21:54:41,619 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:54:41,673 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9181 to 18353
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9181 to 18353
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-05-30 21:54:42,349 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 151
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-05-30 21:54:42,620 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 192
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-05-30 21:54:42,999 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification that was a NOOP. DAG size: 395
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-05-30 21:54:43,116 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 357
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 21:54:43,374 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 298 DAG size of output: 277
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 21:54:43,567 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 451
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-05-30 21:54:43,673 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 371
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
[2020-05-30 21:54:44,005 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 266
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 21:54:44,193 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 447
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
[2020-05-30 21:54:44,302 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification that was a NOOP. DAG size: 365
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-05-30 21:54:44,827 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification. DAG size of input: 311 DAG size of output: 293
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-05-30 21:54:45,147 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 196
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-05-30 21:54:45,373 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification that was a NOOP. DAG size: 389
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-05-30 21:54:45,543 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification that was a NOOP. DAG size: 363
[2020-05-30 21:54:45,986 WARN  L188               SmtUtils]: Spent 440.00 ms on a formula simplification. DAG size of input: 407 DAG size of output: 398
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-30 21:54:46,109 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 285
[2020-05-30 21:54:46,573 WARN  L188               SmtUtils]: Spent 462.00 ms on a formula simplification that was a NOOP. DAG size: 549
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
[2020-05-30 21:54:46,881 WARN  L188               SmtUtils]: Spent 299.00 ms on a formula simplification that was a NOOP. DAG size: 449
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-05-30 21:54:47,194 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 305 DAG size of output: 288
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-05-30 21:54:47,398 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification that was a NOOP. DAG size: 462
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-05-30 21:54:47,513 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 376
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-05-30 21:54:48,066 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification. DAG size of input: 319 DAG size of output: 305
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 21:54:48,319 WARN  L188               SmtUtils]: Spent 209.00 ms on a formula simplification that was a NOOP. DAG size: 476
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12323 to 24631
[2020-05-30 21:54:48,472 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
[2020-05-30 21:54:48,763 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 336
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-05-30 21:54:48,924 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification that was a NOOP. DAG size: 450
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-05-30 21:54:49,176 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 359 DAG size of output: 351
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-05-30 21:54:49,296 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 220
[2020-05-30 21:54:49,895 WARN  L188               SmtUtils]: Spent 597.00 ms on a formula simplification. DAG size of input: 470 DAG size of output: 465
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12323 to 24631
[2020-05-30 21:54:50,256 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification. DAG size of input: 346 DAG size of output: 346
[2020-05-30 21:54:51,125 WARN  L188               SmtUtils]: Spent 866.00 ms on a formula simplification. DAG size of input: 437 DAG size of output: 428
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-05-30 21:54:51,268 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 251
[2020-05-30 21:54:51,778 WARN  L188               SmtUtils]: Spent 509.00 ms on a formula simplification that was a NOOP. DAG size: 496
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-05-30 21:54:52,603 WARN  L188               SmtUtils]: Spent 811.00 ms on a formula simplification. DAG size of input: 378 DAG size of output: 376
[2020-05-30 21:54:53,393 WARN  L188               SmtUtils]: Spent 788.00 ms on a formula simplification. DAG size of input: 395 DAG size of output: 389
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-05-30 21:54:53,687 WARN  L188               SmtUtils]: Spent 281.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 244
[2020-05-30 21:54:54,042 WARN  L188               SmtUtils]: Spent 353.00 ms on a formula simplification that was a NOOP. DAG size: 489
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
[2020-05-30 21:54:54,891 WARN  L188               SmtUtils]: Spent 836.00 ms on a formula simplification. DAG size of input: 383 DAG size of output: 380
[2020-05-30 21:54:55,241 WARN  L188               SmtUtils]: Spent 348.00 ms on a formula simplification. DAG size of input: 402 DAG size of output: 370
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-30 21:54:55,441 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 484
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
[2020-05-30 21:54:55,761 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification. DAG size of input: 402 DAG size of output: 387
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-30 21:54:56,002 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification that was a NOOP. DAG size: 504
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-05-30 21:54:56,115 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification that was a NOOP. DAG size: 382
[2020-05-30 21:58:57,175 WARN  L188               SmtUtils]: Spent 4.02 m on a formula simplification. DAG size of input: 2264 DAG size of output: 2193
Garbage collection #1: 977 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 977 to 1951
Garbage collection #2: 1951 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1951 to 3889
Garbage collection #3: 3889 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3889 to 7759
Garbage collection #4: 7759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7759 to 15511
Garbage collection #5: 15511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15511 to 31019
Garbage collection #6: 31019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31019 to 62017
Garbage collection #7: 62017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 62017 to 111997
Garbage collection #8: 111997 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 111997 to 161983
Garbage collection #9: 161983 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 161983 to 211979
Garbage collection #10: 211979 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 211979 to 261977
Garbage collection #11: 261977 nodes / 0 free / 0.004s / 0.011s total
Resizing node table from 261977 to 311963
Garbage collection #12: 311963 nodes / 0 free / 0.006s / 0.017s total
Resizing node table from 311963 to 361961
Garbage collection #13: 361961 nodes / 0 free / 0.006s / 0.023s total
Resizing node table from 361961 to 411947
Garbage collection #14: 411947 nodes / 0 free / 0.007s / 0.03s total
Resizing node table from 411947 to 461933
Garbage collection #15: 461933 nodes / 0 free / 0.008s / 0.038s total
Resizing node table from 461933 to 511933
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9883 to 19763
[2020-05-30 21:58:59,890 WARN  L188               SmtUtils]: Spent 2.36 s on a formula simplification that was a NOOP. DAG size: 503
[2020-05-30 21:59:03,294 WARN  L188               SmtUtils]: Spent 3.36 s on a formula simplification that was a NOOP. DAG size: 652
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-05-30 21:59:05,206 WARN  L188               SmtUtils]: Spent 1.90 s on a formula simplification that was a NOOP. DAG size: 503
[2020-05-30 21:59:11,989 WARN  L188               SmtUtils]: Spent 6.78 s on a formula simplification. DAG size of input: 656 DAG size of output: 652
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14051 to 28099
[2020-05-30 21:59:14,986 WARN  L188               SmtUtils]: Spent 2.99 s on a formula simplification that was a NOOP. DAG size: 644
[2020-05-30 21:59:15,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 21:59:15,054 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 09:59:15 BasicIcfg
[2020-05-30 21:59:15,054 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 21:59:15,055 INFO  L168              Benchmark]: Toolchain (without parser) took 412420.34 ms. Allocated memory was 514.9 MB in the beginning and 3.5 GB in the end (delta: 3.0 GB). Free memory was 453.4 MB in the beginning and 2.0 GB in the end (delta: -1.5 GB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,055 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,055 INFO  L168              Benchmark]: Boogie Preprocessor took 86.33 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 442.6 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,055 INFO  L168              Benchmark]: UtopiaSpecLang took 53.62 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 434.4 MB in the end (delta: 8.2 MB). Peak memory consumption was 8.2 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,056 INFO  L168              Benchmark]: Boogie Printer took 14.42 ms. Allocated memory is still 514.9 MB. Free memory was 434.4 MB in the beginning and 430.3 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,056 INFO  L168              Benchmark]: RCFGBuilder took 694.01 ms. Allocated memory is still 514.9 MB. Free memory was 430.3 MB in the beginning and 411.7 MB in the end (delta: 18.6 MB). Peak memory consumption was 89.5 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,056 INFO  L168              Benchmark]: UtopiaLTL2Aut took 47.76 ms. Allocated memory is still 514.9 MB. Free memory was 411.7 MB in the beginning and 406.9 MB in the end (delta: 4.8 MB). Peak memory consumption was 4.8 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,056 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3462.29 ms. Allocated memory was 514.9 MB in the beginning and 960.5 MB in the end (delta: 445.6 MB). Free memory was 406.9 MB in the beginning and 457.2 MB in the end (delta: -50.3 MB). Peak memory consumption was 602.5 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,057 INFO  L168              Benchmark]: BlockEncodingV2 took 292.59 ms. Allocated memory is still 960.5 MB. Free memory was 457.2 MB in the beginning and 286.9 MB in the end (delta: 170.3 MB). Peak memory consumption was 170.3 MB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,057 INFO  L168              Benchmark]: BuchiAutomizer took 407766.27 ms. Allocated memory was 960.5 MB in the beginning and 3.5 GB in the end (delta: 2.5 GB). Free memory was 286.9 MB in the beginning and 2.0 GB in the end (delta: -1.7 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-05-30 21:59:15,060 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    12218 locations, 31567 edges
  - StatisticsResult: Encoded RCFG
    12134 locations, 31223 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 86.33 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 442.6 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 53.62 ms. Allocated memory is still 514.9 MB. Free memory was 442.6 MB in the beginning and 434.4 MB in the end (delta: 8.2 MB). Peak memory consumption was 8.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.42 ms. Allocated memory is still 514.9 MB. Free memory was 434.4 MB in the beginning and 430.3 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 694.01 ms. Allocated memory is still 514.9 MB. Free memory was 430.3 MB in the beginning and 411.7 MB in the end (delta: 18.6 MB). Peak memory consumption was 89.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 47.76 ms. Allocated memory is still 514.9 MB. Free memory was 411.7 MB in the beginning and 406.9 MB in the end (delta: 4.8 MB). Peak memory consumption was 4.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3462.29 ms. Allocated memory was 514.9 MB in the beginning and 960.5 MB in the end (delta: 445.6 MB). Free memory was 406.9 MB in the beginning and 457.2 MB in the end (delta: -50.3 MB). Peak memory consumption was 602.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 292.59 ms. Allocated memory is still 960.5 MB. Free memory was 457.2 MB in the beginning and 286.9 MB in the end (delta: 170.3 MB). Peak memory consumption was 170.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 407766.27 ms. Allocated memory was 960.5 MB in the beginning and 3.5 GB in the end (delta: 2.5 GB). Free memory was 286.9 MB in the beginning and 2.0 GB in the end (delta: -1.7 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    2651 locations, 3356 edges
  - StatisticsResult: BuchiProgram size
    12218 locations, 31567 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 38 terminating modules (38 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.38 modules have a trivial ranking function, the largest among these consists of 33 locations. The remainder module has 22268 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 407.6s and 39 iterations.  TraceHistogramMax:9. Analysis of lassos took 281.2s. Construction of modules took 90.9s. BÃ¼chi inclusion checks took 27.9s. Highest rank in rank-based complementation 0. Minimization of det autom 38. Minimization of nondet autom 0. Automata minimization 3.6s AutomataMinimizationTime, 38 MinimizatonAttempts, 16515 StatesRemovedByMinimization, 33 NontrivialMinimizations. Non-live state removal took 2.5s Buchi closure took 0.0s. Biggest automaton had 23857 states and ocurred in iteration 34.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 348797 SDtfs, 336443 SDslu, 1028612 SDs, 0 SdLazy, 1328741 SolverSat, 49868 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 90.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU37 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639969) = (new ValidatorAuction).value(115792089237316195423570985008687907853269984665640564039457584007913129639957)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639974, _startPriceInWei : 0, _auctionDurationInDays : 1, _minimalNumberOfParticipants : 1, _maximalNumberOfParticipants : 2, _depositLocker : 115792089237316195423570985008687907853269984665640564039457584007913129639965});
[L752]               havoc __exception;
[L753]               revert := false;
[L754]   COND FALSE  !(__exception)
[L796]   CALL        call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2878]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1848]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1827]              assume msgsender_MSG != null;
[L1828]              Balance[this] := 0;
[L1829]              owner_Ownable[this] := null;
[L1830]              owner_Ownable[this] := msgsender_MSG;
[L1848]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L2878]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L2884]  CALL        call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2735]              assume msgsender_MSG != null;
[L2736]              Balance[this] := 0;
[L2737]              auctionDurationInDays_ValidatorAuction[this] := 0;
[L2738]              startPrice_ValidatorAuction[this] := 0;
[L2739]              minimalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2740]              maximalNumberOfParticipants_ValidatorAuction[this] := 0;
[L2741]  CALL        call __var_10 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2741]  RET         call __var_10 := FreshRefGenerator__success();
[L2742]  COND FALSE  !(revert)
[L2747]              whitelist_ValidatorAuction[this] := __var_10;
[L2748]              M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]] := zeroRefBoolArr();
[L2749]  CALL        call __var_11 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2749]  RET         call __var_11 := FreshRefGenerator__success();
[L2750]  COND FALSE  !(revert)
[L2755]              bids_ValidatorAuction[this] := __var_11;
[L2756]              M_Ref_int_bids2[bids_ValidatorAuction[this]] := zeroRefIntArr();
[L2757]              sum_bids2[bids_ValidatorAuction[this]] := 0;
[L2758]  CALL        call __var_12 := FreshRefGenerator__success();
[L1807]              havoc newRef;
[L1808]              assume Alloc[newRef] == false;
[L1809]              Alloc[newRef] := true;
[L1810]              assume newRef != null;
[L2758]  RET         call __var_12 := FreshRefGenerator__success();
[L2759]  COND FALSE  !(revert)
[L2764]              bidders_ValidatorAuction[this] := __var_12;
[L2765]              assume Length[bidders_ValidatorAuction[this]] == 0;
[L2766]              startTime_ValidatorAuction[this] := 0;
[L2767]              closeTime_ValidatorAuction[this] := 0;
[L2768]              lowestSlotPrice_ValidatorAuction[this] := 0;
[L2769]              assume _auctionDurationInDays_s578 >= 0;
[L2770]  COND FALSE  !(!(_auctionDurationInDays_s578 > 0))
[L2776]              assume _auctionDurationInDays_s578 >= 0;
[L2777]  COND FALSE  !(!(_auctionDurationInDays_s578 < 100 * 365))
[L2783]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2784]  COND FALSE  !(!(_minimalNumberOfParticipants_s578 > 0))
[L2790]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2791]  COND FALSE  !(!(_maximalNumberOfParticipants_s578 > 0))
[L2797]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2798]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2799]  COND FALSE  !(!(_minimalNumberOfParticipants_s578 <= _maximalNumberOfParticipants_s578))
[L2805]              assume _startPriceInWei_s578 >= 0;
[L2806]  COND FALSE  !(!(_startPriceInWei_s578 < 1000000000000000019884624838656))
[L2812]              assume startPrice_ValidatorAuction[this] >= 0;
[L2813]              assume _startPriceInWei_s578 >= 0;
[L2814]              startPrice_ValidatorAuction[this] := _startPriceInWei_s578;
[L2815]              assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L2816]              assume _auctionDurationInDays_s578 >= 0;
[L2817]              auctionDurationInDays_ValidatorAuction[this] := _auctionDurationInDays_s578;
[L2818]              assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2819]              assume _maximalNumberOfParticipants_s578 >= 0;
[L2820]              maximalNumberOfParticipants_ValidatorAuction[this] := _maximalNumberOfParticipants_s578;
[L2821]              assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L2822]              assume _minimalNumberOfParticipants_s578 >= 0;
[L2823]              minimalNumberOfParticipants_ValidatorAuction[this] := _minimalNumberOfParticipants_s578;
[L2824]              depositLocker_ValidatorAuction[this] := _depositLocker_s578;
[L2825]              assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L2826]              __var_9 := 115792089237316195423570985008687907853269984665640564039457584007913129639935;
[L2827]              lowestSlotPrice_ValidatorAuction[this] := __var_9;
[L2828]              assume __var_9 >= 0;
[L2829]              assert { :EventEmitted "AuctionDeployed_ValidatorAuction" } true;
[L2830]              auctionState_ValidatorAuction[this] := 0;
[L2884]  RET         call ValidatorAuction_ValidatorAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L2885]  COND FALSE  !(revert)
[L796]   RET         call ValidatorAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
[L797]               assume !revert && gas >= 0;
[L5623]  RET         call ValidatorAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, _startPriceInWei_s578, _auctionDurationInDays_s578, _minimalNumberOfParticipants_s578, _maximalNumberOfParticipants_s578, _depositLocker_s578);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).addToWhitelist.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639974, addressesToWhitelist : 115792089237316195423570985008687907853269984665640564039457584007913129639956});
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1101]  CALL        call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L3515]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]              gas := gas - 4257;
[L5117]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3515]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3516]  COND FALSE  !(revert)
[L3521]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]              gas := gas - 10516;
[L5237]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3521]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3522]  COND FALSE  !(revert)
[L3527]              gas := gas - 116;
[L3528]              assume i_s850 >= 0;
[L3529]              assume Length[addressesToWhitelist_s852] >= 0;
[L3530]              gas := gas - 11;
[L3531]              assume i_s850 >= 0;
[L3532]              i_s850 := 0;
[L3533]  COND TRUE   i_s850 < Length[addressesToWhitelist_s852]
[L3535]              gas := gas - 21095;
[L3536]              assume i_s850 >= 0;
[L3537]              M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][M_int_Ref[addressesToWhitelist_s852][i_s850]] := true;
[L3538]              assert { :EventEmitted "AddressWhitelisted_ValidatorAuction" } true;
[L3539]              gas := gas - 19;
[L3540]              assume i_s850 >= 0;
[L3541]              i_s850 := i_s850 + 1;
[L3542]              assume i_s850 >= 0;
[L3543]  COND FALSE  !(gas < 0)
[L3533]  COND FALSE  !(i_s850 < Length[addressesToWhitelist_s852])
[L1101]  RET         call addToWhitelist_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
[L1102]              assume !revert && gas >= 0;
[L5582]  RET         call addToWhitelist_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG, addressesToWhitelist_s852);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).startAuction.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639974});
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L921]   CALL        call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5116]              gas := gas - 4257;
[L5117]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3265]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3271]  CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L5236]              gas := gas - 10516;
[L5237]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3271]  RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 0);
[L3272]  COND FALSE  !(revert)
[L3277]              gas := gas - 3900;
[L3278]              assume DType[depositLocker_ValidatorAuction[this]] == DepositLocker;
[L3279]              __var_16 := initialized_DepositLocker[depositLocker_ValidatorAuction[this]];
[L3280]  COND FALSE  !(!__var_16)
[L3286]              gas := gas - 20287;
[L3287]              auctionState_ValidatorAuction[this] := 1;
[L3288]              gas := gas - 20013;
[L3289]              assume startTime_ValidatorAuction[this] >= 0;
[L3290]              assume now >= 0;
[L3291]              startTime_ValidatorAuction[this] := now;
[L3292]              assert { :EventEmitted "AuctionStarted_ValidatorAuction" } true;
[L921]   RET         call startAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L922]               assume !revert && gas >= 0;
[L5554]  RET         call startAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).bid.gas(3979004).value(115792089237316195423570985008687907853269984665640564039457584007913129639948)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639968});
[L817]                     havoc __exception;
[L818]                     revert := false;
[L819]         COND FALSE  !(__exception)
[L861]         CALL        call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3086]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L3087]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L3088]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L3089]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3089]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3090]        COND FALSE  !(revert)
[L3095]                    gas := gas - 860;
[L3096]                    assume now >= 0;
[L3097]                    assume startTime_ValidatorAuction[this] >= 0;
[L3098]        COND FALSE  !(!(now > startTime_ValidatorAuction[this]))
[L3104]                    gas := gas - 1077;
[L3105]                    assume now >= 0;
[L3106]                    assume startTime_ValidatorAuction[this] >= 0;
[L3107]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3108]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3109-L3111]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3112-L3114]  COND FALSE  !(!(now <= startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3120]                    gas := gas - 23;
[L3121]                    assume slotPrice_s709 >= 0;
[L3122]        CALL        call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3692]                    gas := gas - 3;
[L3693]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3693]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3694]        COND FALSE  !(revert)
[L3699]                    gas := gas - 231;
[L3700]                    assume now >= 0;
[L3701]                    assume startTime_ValidatorAuction[this] >= 0;
[L3702]        COND FALSE  !(!(now >= startTime_ValidatorAuction[this]))
[L3708]                    gas := gas - 216;
[L3709]                    assume secondsSinceStart_s918 >= 0;
[L3710]                    assume now >= 0;
[L3711]                    assume startTime_ValidatorAuction[this] >= 0;
[L3712]                    assume now - startTime_ValidatorAuction[this] >= 0;
[L3713]                    secondsSinceStart_s918 := now - startTime_ValidatorAuction[this];
[L3714]                    gas := gas - 25;
[L3715]                    assume __var_18 >= 0;
[L3716]                    assume secondsSinceStart_s918 >= 0;
[L3717]        CALL        call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3803]                    gas := gas - 3;
[L3804]                    gas := gas - 668;
[L3805]                    assume secondsSinceStart_s978 >= 0;
[L3806]        COND FALSE  !(!(secondsSinceStart_s978 < 100 * 365))
[L3812]                    gas := gas - 19;
[L3813]                    assume msSinceStart_s977 >= 0;
[L3814]                    assume secondsSinceStart_s978 >= 0;
[L3815]                    assume 1000 * secondsSinceStart_s978 >= 0;
[L3816]                    msSinceStart_s977 := 1000 * secondsSinceStart_s978;
[L3817]                    gas := gas - 236;
[L3818]                    assume relativeAuctionTime_s977 >= 0;
[L3819]                    assume msSinceStart_s977 >= 0;
[L3820]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3821-L3822]              assume nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]) >= 0;
[L3823]                    relativeAuctionTime_s977 := nonlinearDiv(msSinceStart_s977, auctionDurationInDays_ValidatorAuction[this]);
[L3824]                    gas := gas - 11;
[L3825]                    assume decayDivisor_s977 >= 0;
[L3826]                    decayDivisor_s977 := 746571428571;
[L3827]                    gas := gas - 99;
[L3828]                    assume decay_s977 >= 0;
[L3829]                    assume relativeAuctionTime_s977 >= 0;
[L3830]                    assume nonlinearPow(relativeAuctionTime_s977, 3) >= 0;
[L3831]                    assume decayDivisor_s977 >= 0;
[L3832]                    assume nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977) >= 0;
[L3833]                    decay_s977 := nonlinearDiv(nonlinearPow(relativeAuctionTime_s977, 3), decayDivisor_s977);
[L3834]                    gas := gas - 262;
[L3835]                    assume price_s977 >= 0;
[L3836]                    assume startPrice_ValidatorAuction[this] >= 0;
[L3837]                    assume relativeAuctionTime_s977 >= 0;
[L3838]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3839-L3840]              assume nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977) >= 0;
[L3841]                    assume relativeAuctionTime_s977 >= 0;
[L3842]                    assume 1 + relativeAuctionTime_s977 >= 0;
[L3843]                    assume decay_s977 >= 0;
[L3844]                    assume 1 + relativeAuctionTime_s977 + decay_s977 >= 0;
[L3845-L3847]              assume nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977) >= 0;
[L3848-L3849]              price_s977 := nonlinearDiv(nonlinearMul(startPrice_ValidatorAuction[this], 1 + relativeAuctionTime_s977), 1 + relativeAuctionTime_s977 + decay_s977);
[L3850]                    gas := gas - 18;
[L3851]                    assume price_s977 >= 0;
[L3852]                    __ret_0_ := price_s977;
[L3717]        RET         call __var_18 := priceAtElapsedTime_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG, secondsSinceStart_s918);
[L3718]        COND FALSE  !(revert)
[L3723]                    assume __var_18 >= 0;
[L3724]                    __ret_0_ := __var_18;
[L3122]        RET         call slotPrice_s709 := currentPrice_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]        COND FALSE  !(revert)
[L3128]                    slotPrice_s709 := slotPrice_s709;
[L3129]                    gas := gas - 670;
[L3130]                    assume msgvalue_MSG >= 0;
[L3131]                    assume slotPrice_s709 >= 0;
[L3132]        COND FALSE  !(!(msgvalue_MSG >= slotPrice_s709))
[L3138]                    gas := gas - 986;
[L3139]        COND FALSE  !(!M_Ref_bool_whitelist1[whitelist_ValidatorAuction[this]][msgsender_MSG])
[L3145]                    gas := gas - 659;
[L3146]        CALL        call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]                    gas := gas - 3;
[L4202]                    gas := gas - 3;
[L4203]                    havoc size_s1134;
[L4204]                    gas := gas - 10;
[L4205]                    sender_s1134 := msgsender_MSG;
[L4206]                    gas := gas - 24;
[L4207]                    assume size_s1134 >= 0;
[L4208]                    isContract_s1135 := size_s1134 > 0;
[L3146]        RET         call __var_13 := isSenderContract_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3147]        COND FALSE  !(revert)
[L3152]        COND FALSE  !(!!__var_13)
[L3158]                    gas := gas - 1076;
[L3159]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3160]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3161-L3162]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3168]                    gas := gas - 956;
[L3169]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3170]        COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] == 0))
[L3176]                    gas := gas - 20108;
[L3177]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3178]                    assume msgvalue_MSG >= 0;
[L3179-L3180]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3181]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := msgvalue_MSG;
[L3182-L3183]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3184]                    gas := gas - 20361;
[L3185]                    __var_14 := Length[bidders_ValidatorAuction[this]];
[L3186]                    M_int_Ref[bidders_ValidatorAuction[this]][__var_14] := msgsender_MSG;
[L3187]                    Length[bidders_ValidatorAuction[this]] := __var_14 + 1;
[L3188]                    gas := gas - 209;
[L3189]                    assume slotPrice_s709 >= 0;
[L3190]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3191]        COND FALSE  !(slotPrice_s709 < lowestSlotPrice_ValidatorAuction[this])
[L3199]                    gas := gas - 37222;
[L3200]        CALL        call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L2180]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2180]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2181]        COND FALSE  !(revert)
[L2186]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2186]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]        COND FALSE  !(revert)
[L2192]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2192]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]        COND FALSE  !(revert)
[L2198]                    gas := gas - 499;
[L2199-L2200]  COND FALSE  !(!(M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] == false))
[L2206]                    gas := gas - 20363;
[L2207]                    M_Ref_bool_canWithdraw0[canWithdraw_DepositLocker[this]][_depositor_s228] := true;
[L2208]                    gas := gas - 20233;
[L2209]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2210]                    numberOfDepositors_DepositLocker[this] := numberOfDepositors_DepositLocker[this] + 1;
[L2211]                    assert { :EventEmitted "DepositorRegistered_DepositLocker" } true;
[L3200]        RET         call registerDepositor_DepositLocker__success(depositLocker_ValidatorAuction[this], this, __var_15, msgsender_MSG);
[L3201]        COND FALSE  !(revert)
[L3206]                    assert { :EventEmitted "BidSubmitted_ValidatorAuction" } true;
[L3207]                    gas := gas - 417;
[L3208]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3209]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3210-L3211]  COND FALSE  !(Length[bidders_ValidatorAuction[this]] == maximalNumberOfParticipants_ValidatorAuction[this])
[L861]         RET         call bid_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L862]                     assume !revert && gas >= 0;
[L7]                       assume user == msgsender_MSG;
[L7]                       fsum_bid_ValidatorAuction_2_0 := fsum_bid_ValidatorAuction_2_0 + msgvalue_MSG;
[L5545]        RET         call bid_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).closeAuction.gas(3979005)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639968});
[L997]                     havoc __exception;
[L998]                     revert := false;
[L999]         COND FALSE  !(__exception)
[L1041]        CALL        call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3413]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3413]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L3414]        COND FALSE  !(revert)
[L3419]                    gas := gas - 1081;
[L3420]                    assume now >= 0;
[L3421]                    assume startTime_ValidatorAuction[this] >= 0;
[L3422]                    assume auctionDurationInDays_ValidatorAuction[this] >= 0;
[L3423]                    assume auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3424-L3426]              assume startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1 >= 0;
[L3427-L3429]  COND FALSE  !(!(now > startTime_ValidatorAuction[this] + auctionDurationInDays_ValidatorAuction[this] * 1))
[L3435]                    gas := gas - 437;
[L3436]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3437]                    assume maximalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3438-L3439]  COND FALSE  !(!(Length[bidders_ValidatorAuction[this]] < maximalNumberOfParticipants_ValidatorAuction[this]))
[L3445]                    gas := gas - 417;
[L3446]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3447]                    assume minimalNumberOfParticipants_ValidatorAuction[this] >= 0;
[L3448-L3449]  COND TRUE   Length[bidders_ValidatorAuction[this]] >= minimalNumberOfParticipants_ValidatorAuction[this]
[L3451]                    gas := gas - 15;
[L3452]        CALL        call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L4122]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L4122]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 1);
[L4123]        COND FALSE  !(revert)
[L4128]                    gas := gas - 20287;
[L4129]                    auctionState_ValidatorAuction[this] := 2;
[L4130]                    gas := gas - 20013;
[L4131]                    assume closeTime_ValidatorAuction[this] >= 0;
[L4132]                    assume now >= 0;
[L4133]                    closeTime_ValidatorAuction[this] := now;
[L4134]                    assert { :EventEmitted "AuctionDepositPending_ValidatorAuction" } true;
[L3452]        RET         call transitionToDepositPending_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3453]        COND FALSE  !(revert)
[L1041]        RET         call closeAuction_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1042]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_closeAuction_ValidatorAuction0 := true;
[L7]                       success_closeAuction_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5572]        RET         call closeAuction_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).depositBids.gas(3979006)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639966});
[L937]                     havoc __exception;
[L938]                     revert := false;
[L939]         COND FALSE  !(__exception)
[L981]         CALL        call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3326]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3326]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 2);
[L3327]        COND FALSE  !(revert)
[L3332]                    gas := gas - 20287;
[L3333]                    auctionState_ValidatorAuction[this] := 3;
[L3334]                    gas := gas - 37832;
[L3335]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3336]                    assume Length[bidders_ValidatorAuction[this]] >= 0;
[L3337-L3338]              assume nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]) >= 0;
[L3339]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3340]        CALL        call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L2300]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2301]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2302]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2303]        CALL        call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]                    gas := gas - 2148;
[L5141]        COND FALSE  !(!initialized_DepositLocker[this])
[L2303]        RET         call isInitialised_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2304]        COND FALSE  !(revert)
[L2309]        CALL        call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]                    gas := gas - 876;
[L5189]        COND FALSE  !(!!deposited_DepositLocker[this])
[L2309]        RET         call isNotDeposited_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]        COND FALSE  !(revert)
[L2315]        CALL        call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]                    gas := gas - 1008;
[L5213]        COND FALSE  !(!(msgsender_MSG == depositorsProxy_DepositLocker[this]))
[L2315]        RET         call onlyDepositorsProxy_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]        COND FALSE  !(revert)
[L2321]                    gas := gas - 355;
[L2322]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2323]        COND FALSE  !(!(numberOfDepositors_DepositLocker[this] > 0))
[L2329]                    gas := gas - 257;
[L2330]                    assume _valuePerDepositor_s292 >= 0;
[L2331]        COND FALSE  !(!(_valuePerDepositor_s292 > 0))
[L2337]                    gas := gas - 219;
[L2338]                    assume depositAmount_s291 >= 0;
[L2339]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2340]                    assume _valuePerDepositor_s292 >= 0;
[L2341-L2342]              assume nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292) >= 0;
[L2343]                    depositAmount_s291 := nonlinearMul(numberOfDepositors_DepositLocker[this], _valuePerDepositor_s292);
[L2344]                    gas := gas - 482;
[L2345]                    assume _valuePerDepositor_s292 >= 0;
[L2346]                    assume depositAmount_s291 >= 0;
[L2347]                    assume numberOfDepositors_DepositLocker[this] >= 0;
[L2348]                    assume nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this]) >= 0;
[L2349-L2350]  COND FALSE  !(!(_valuePerDepositor_s292 == nonlinearDiv(depositAmount_s291, numberOfDepositors_DepositLocker[this])))
[L2356]                    gas := gas - 256;
[L2357]                    assume msgvalue_MSG >= 0;
[L2358]                    assume depositAmount_s291 >= 0;
[L2359]        COND FALSE  !(!(msgvalue_MSG == depositAmount_s291))
[L2365]                    gas := gas - 20014;
[L2366]                    assume valuePerDepositor_DepositLocker[this] >= 0;
[L2367]                    assume _valuePerDepositor_s292 >= 0;
[L2368]                    valuePerDepositor_DepositLocker[this] := _valuePerDepositor_s292;
[L2369]                    gas := gas - 20317;
[L2370]                    deposited_DepositLocker[this] := true;
[L2371]                    assert { :EventEmitted "Deposit_DepositLocker" } true;
[L3340]        RET         call deposit_DepositLocker__success(depositLocker_ValidatorAuction[this], this, nonlinearMul(lowestSlotPrice_ValidatorAuction[this], Length[bidders_ValidatorAuction[this]]), lowestSlotPrice_ValidatorAuction[this]);
[L3341]        COND FALSE  !(revert)
[L3346]                    assert { :EventEmitted "AuctionEnded_ValidatorAuction" } true;
[L981]         RET         call depositBids_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L982]                     assume !revert && gas >= 0;
[L5563]        RET         call depositBids_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);
ValidatorAuction(115792089237316195423570985008687907853269984665640564039457584007913129639969).withdraw.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639968});
[L1117]                    havoc __exception;
[L1118]                    revert := false;
[L1119]        COND FALSE  !(__exception)
[L1161]        CALL        call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3600]                    gas := gas - 1272;
[L3601-L3602]  COND FALSE  !(!(auctionState_ValidatorAuction[this] == 3 || auctionState_ValidatorAuction[this] == 4))
[L3608]                    gas := gas - 297;
[L3609]        COND TRUE   auctionState_ValidatorAuction[this] == 3
[L3611]                    gas := gas - 4;
[L3612]        CALL        call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3934]        CALL        call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L5236]                    gas := gas - 10516;
[L5237]        COND FALSE  !(!(auctionState_ValidatorAuction[this] == state_s480))
[L3934]        RET         call stateIs_pre__success(this, msgsender_MSG, msgvalue_MSG, 3);
[L3935]        COND FALSE  !(revert)
[L3940]                    gas := gas - 1163;
[L3941]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3942]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3943-L3944]  COND FALSE  !(!(M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] > lowestSlotPrice_ValidatorAuction[this]))
[L3950]                    gas := gas - 512;
[L3951]                    assume valueToWithdraw_s1028 >= 0;
[L3952]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3953]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3954-L3956]              assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3957-L3958]              valueToWithdraw_s1028 := M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] - lowestSlotPrice_ValidatorAuction[this];
[L3959]                    gas := gas - 321;
[L3960]                    assume valueToWithdraw_s1028 >= 0;
[L3961]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3962-L3963]  COND FALSE  !(!(valueToWithdraw_s1028 <= M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG]))
[L3969]                    gas := gas - 20309;
[L3970]                    assume M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] >= 0;
[L3971]                    assume lowestSlotPrice_ValidatorAuction[this] >= 0;
[L3972-L3973]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] - M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3974]                    M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG] := lowestSlotPrice_ValidatorAuction[this];
[L3975-L3976]              sum_bids2[bids_ValidatorAuction[this]] := sum_bids2[bids_ValidatorAuction[this]] + M_Ref_int_bids2[bids_ValidatorAuction[this]][msgsender_MSG];
[L3977]                    gas := gas - 35786;
[L3978]                    __var_19 := gas;
[L3979]        COND TRUE   gas > 2300
[L3981]                    gas := 2300;
[L3984]                    __var_19 := __var_19 - gas;
[L3985]                    assume valueToWithdraw_s1028 >= 0;
[L3986]        CALL        call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L5037]                    havoc __exception;
[L5038]        COND FALSE  !(__exception)
[L5086]        COND TRUE   Balance[from] >= amount
[L5088]        CALL        call FallbackDispatch__success(from, to, amount);
[L4254]        COND FALSE  !(DType[to] == ValidatorAuction)
[L4262]        COND FALSE  !(DType[to] == DepositLocker)
[L4270]        COND FALSE  !(DType[to] == DepositLockerInterface)
[L4274]        COND FALSE  !(DType[to] == Ownable)
[L4280]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L4617]                    assume Balance[from] >= amount;
[L4618]                    Balance[from] := Balance[from] - amount;
[L4619]                    Balance[to] := Balance[to] + amount;
[L4620]        COND FALSE  !(choice == 0)
[L4626]        COND TRUE   gas < 21000
[L4280]        RET         call Fallback_UnknownType__success(from, to, amount);
[L4281]        COND FALSE  !(revert)
[L5088]        RET         call FallbackDispatch__success(from, to, amount);
[L5089]                    success := true;
[L5096]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_bid_ValidatorAuction_2_0);
[L7]                       revert := revert_hold;
[L3986]        RET         call __var_20 := send__success(this, msgsender_MSG, valueToWithdraw_s1028);
[L3987]        COND FALSE  !(!__var_20)
[L3993]                    gas := __var_19 + gas;
[L3612]        RET         call withdrawAfterAuctionEnded_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L3613]        COND FALSE  !(revert)
[L1161]        RET         call withdraw_ValidatorAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L1162]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume user == msgsender_MSG;
[L7]                       success_withdraw_ValidatorAuction0 := true;
[L7]                       success_withdraw_ValidatorAuction0 := false;
[L7]                       revert := revert_hold;
[L5536]        RET         call withdraw_ValidatorAuction(this, msgsender_MSG, msgvalue_MSG);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
