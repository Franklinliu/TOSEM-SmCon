This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 19:47:18,593 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 19:47:18,594 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 19:47:18,604 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 19:47:18,604 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 19:47:18,606 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 19:47:18,607 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 19:47:18,608 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 19:47:18,610 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 19:47:18,611 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 19:47:18,612 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 19:47:18,612 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 19:47:18,613 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 19:47:18,614 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 19:47:18,615 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 19:47:18,616 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 19:47:18,616 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 19:47:18,617 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 19:47:18,619 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 19:47:18,621 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 19:47:18,622 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 19:47:18,623 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 19:47:18,625 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 19:47:18,625 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 19:47:18,625 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 19:47:18,626 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 19:47:18,626 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 19:47:18,627 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 19:47:18,627 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 19:47:18,627 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 19:47:18,627 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 19:47:18,628 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 19:47:18,629 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 19:47:18,630 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 19:47:18,631 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 19:47:18,632 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 19:47:18,632 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 19:47:18,633 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 19:47:18,633 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 19:47:18,633 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 19:47:18,635 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 19:47:18,635 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 19:47:18,636 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 19:47:18,645 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 19:47:18,646 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 19:47:18,647 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 19:47:18,647 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 19:47:18,647 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 19:47:18,647 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 19:47:18,648 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 19:47:18,648 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 19:47:18,648 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 19:47:18,648 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 19:47:18,648 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 19:47:18,648 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 19:47:18,649 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 19:47:18,649 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 19:47:18,668 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 19:47:18,679 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 19:47:18,682 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 19:47:18,682 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 19:47:18,683 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 19:47:18,684 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/single-callback/L2-EPXCrowdsale.bpl
[2020-05-30 19:47:18,684 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EPXCrowdsale/single-callback/L2-EPXCrowdsale.bpl'
[2020-05-30 19:47:18,744 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 19:47:18,745 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 19:47:18,745 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 19:47:18,745 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 19:47:18,746 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 19:47:18,759 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,760 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,784 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,785 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,800 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,809 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,814 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,821 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 19:47:18,822 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 19:47:18,822 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 19:47:18,824 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 19:47:18,827 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/1) ...
[2020-05-30 19:47:18,838 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:47:18,843 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:47:18,850 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:47:18,854 INFO  L599   opiaSpecLangObserver]: Parsed to==ben to BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]]
[2020-05-30 19:47:18,856 INFO  L599   opiaSpecLangObserver]: Parsed (( areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true && fsum_buy_EPXCrowdsale_2_0==fsum_send__success_2_0 )) && !revert to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[fsum_buy_EPXCrowdsale_2_0,GLOBAL],IdentifierExpression[fsum_send__success_2_0,GLOBAL]]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 19:47:18,857 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(*, (areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum(EPXCrowdsale.buy, 2) == fsum(send(from, to, amt), 2, to == ben))))
[2020-05-30 19:47:18,857 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_CorralChoice_EPXCrowdsale0) )
[2020-05-30 19:47:18,857 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:47:18,857 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:47:18,858 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:47:18,860 INFO  L599   opiaSpecLangObserver]: Parsed ( _amount_s558==( old(Balance[this]) ) && ben==beneficiaryWallet_EPXCrowdsale[this] ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_amount_s558,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[Balance,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiaryWallet_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,beneficiaryMultiSigWithdraw_EPXCrowdsale>]]]]]
[2020-05-30 19:47:18,862 INFO  L599   opiaSpecLangObserver]: Parsed areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true to BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]]
[2020-05-30 19:47:18,863 INFO  L599   opiaSpecLangObserver]: Parsed (areFundsReleasedToBeneficiary_EPXCrowdsale[this]==true) && !revert to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[areFundsReleasedToBeneficiary_EPXCrowdsale,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_EPXCrowdsale>]]],BooleanLiteral[true]],UnaryExpression[LOGICNEG,IdentifierExpression[revert,GLOBAL]]]
[2020-05-30 19:47:18,863 INFO  L968   opiaSpecLangObserver]: Compiling: [](started(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true) ==> <>(finished(EPXCrowdsale.beneficiaryMultiSigWithdraw(amt), amt == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]))) && <>(finished(*, areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true))
[2020-05-30 19:47:18,863 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( []( AP(call_CorralChoice_EPXCrowdsale1) ==> ( <>AP(success_beneficiaryMultiSigWithdraw_EPXCrowdsale0) ) ) ) && ( <>AP(success_CorralChoice_EPXCrowdsale2) ) )
Executed UtopiaSpecLang
[2020-05-30 19:47:18,870 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:47:18 PropertyContainer
[2020-05-30 19:47:18,870 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 19:47:18,871 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 19:47:18,871 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 19:47:18,871 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 19:47:18,871 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/2) ...
[2020-05-30 19:47:18,872 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 19:47:18,872 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 19:47:18,882 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:47:18" (2/2) ...
[2020-05-30 19:47:18,883 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 19:47:18,883 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 19:47:18,883 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 19:47:18,883 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 19:47:18,884 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/2) ...
[2020-05-30 19:47:18,925 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 19:47:18,925 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-05-30 19:47:18,925 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-05-30 19:47:18,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-05-30 19:47:18,925 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath
[2020-05-30 19:47:18,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__success
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__success
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__success
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__success
[2020-05-30 19:47:18,926 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__success
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-05-30 19:47:18,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_StandardToken
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_StandardToken
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 19:47:18,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale
[2020-05-30 19:47:18,927 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 19:47:18,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 19:47:18,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale
[2020-05-30 19:47:18,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_safeMath
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_safeMath
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-05-30 19:47:18,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EPXCrowdsale
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__success
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMath_safeMath__fail
[2020-05-30 19:47:18,930 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul_safeMath__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv_safeMath__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub_safeMath__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd_safeMath__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAssert_safeMath__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 19:47:18,931 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:47:18,932 INFO  L130     BoogieDeclarations]: Found specification of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__success
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_EPXCrowdsale__fail
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 19:47:18,933 INFO  L130     BoogieDeclarations]: Found specification of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__success
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EPXCrowdsale__fail
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 19:47:18,934 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 19:47:18,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 19:47:18,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__fail
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath_NoBaseCtor__success
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__fail
[2020-05-30 19:47:18,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMath_safeMath__success
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__fail
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul_safeMath__success
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__fail
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv_safeMath__success
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__fail
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub_safeMath__success
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__fail
[2020-05-30 19:47:18,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd_safeMath__success
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__fail
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAssert_safeMath__success
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail
[2020-05-30 19:47:18,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure EPXCrowdsale_EPXCrowdsale__success
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialEPXSupply_EPXCrowdsale__success
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__fail
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure remainingEPXSupply_EPXCrowdsale__success
[2020-05-30 19:47:18,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__fail
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure SetupCrowdsale_EPXCrowdsale__success
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__fail
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkPrice_EPXCrowdsale__success
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__fail
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EPXCrowdsale__success
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__fail
[2020-05-30 19:47:18,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_EPXCrowdsale__success
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__fail
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryMultiSigWithdraw_EPXCrowdsale__success
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__fail
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkGoalReached_EPXCrowdsale__success
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__fail
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EPXCrowdsale__success
[2020-05-30 19:47:18,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 19:47:18,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_safeMath
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_safeMath
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EPXCrowdsale
[2020-05-30 19:47:18,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 19:47:18,943 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 19:47:18,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 19:47:19,109 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,123 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,150 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,242 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,242 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 19:47:19,475 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 19:47:19,476 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-05-30 19:47:19,477 INFO  L202        PluginConnector]: Adding new model L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:47:19 BoogieIcfgContainer
[2020-05-30 19:47:19,477 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:47:18" (2/2) ...
[2020-05-30 19:47:19,477 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 19:47:19,478 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@18f1a4ea and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:47:19, skipping insertion in model container
[2020-05-30 19:47:19,478 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 19:47:19,478 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 19:47:19,478 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 19:47:19,480 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 19:47:19,480 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/3) ...
[2020-05-30 19:47:19,480 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4c398c80 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:47:19, skipping insertion in model container
[2020-05-30 19:47:19,481 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:47:18" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( [] ( a -> ( <>b ) ) ) && ( <>c ) ) && ! ( ( <>d ) )  (exit command is null, workingDir is null)
[2020-05-30 19:47:19,519 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:47:19 NWAContainer
[2020-05-30 19:47:19,519 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 19:47:19,519 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 19:47:19,519 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 19:47:19,520 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 19:47:19,520 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:47:19" (3/4) ...
[2020-05-30 19:47:19,521 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4bbd44b4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:47:19, skipping insertion in model container
[2020-05-30 19:47:19,521 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:47:19" (4/4) ...
[2020-05-30 19:47:19,528 INFO  L104   BuchiProductObserver]: Initial property automaton 6 locations, 20 edges
[2020-05-30 19:47:19,531 INFO  L110   BuchiProductObserver]: Initial RCFG 1813 locations, 2285 edges
[2020-05-30 19:47:19,531 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 19:47:19,541 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 19:47:25,895 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 19:47:25,911 INFO  L110   BuchiProductObserver]: BuchiProgram size 10397 locations, 37761 edges
[2020-05-30 19:47:25,911 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:47:25 BoogieIcfgContainer
[2020-05-30 19:47:25,911 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 19:47:25,911 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 19:47:25,911 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 19:47:25,913 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 19:47:25,913 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:47:25" (1/1) ...
[2020-05-30 19:47:26,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:47:26,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__fail(this, __tmp__beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 19:47:26,115 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(from, to, msgvalue_MSG, _amount_s558);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__fail(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 19:47:26,116 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[2020-05-30 19:47:26,117 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,118 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_StandardToken(this);
[2020-05-30 19:47:26,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,119 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 19:47:26,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_12 := safeSub_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__fail(to, from, amount);
[2020-05-30 19:47:26,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,123 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_5 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], 10000);
[2020-05-30 19:47:26,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := safeDiv_safeMath__success(this, msgsender_MSG, msgvalue_MSG, initialTokenSupply_EPXCrowdsale[this], 10000);
[2020-05-30 19:47:26,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,124 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__success(from, to, amount);
[2020-05-30 19:47:26,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[2020-05-30 19:47:26,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,125 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call buy_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,126 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,127 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,128 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_owned(this);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__success(from, to, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,129 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call refund_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale__fail(from, to, msgvalue_MSG, _amount_s558);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:47:26,130 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_EPXCrowdsale(this);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call FallbackDispatch__fail(from, to, amount);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_15 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_9 := safeAdd_safeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[2020-05-30 19:47:26,131 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__success(from, to, amount);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,132 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,133 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__success();
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,134 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-30 19:47:26,135 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,136 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,136 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s90 == nonlinearMul(b_s90, c_s89) + nonlinearMod(a_s90, b_s90));
[2020-05-30 19:47:26,136 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,136 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,136 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s90 > 0);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,137 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,138 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,138 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call CorralChoice_safeMath(this);
[2020-05-30 19:47:26,139 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,139 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[2020-05-30 19:47:26,140 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,141 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call initialEPXtokenCount_s286 := initialEPXSupply_EPXCrowdsale__fail(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,141 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,141 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,142 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Fallback_UnknownType__fail(from, to, amount);
[2020-05-30 19:47:26,143 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__fail(from, to, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:47:26,143 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call response_s391 := SetupCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[2020-05-30 19:47:26,144 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__success(from, to, msgvalue_MSG);
[2020-05-30 19:47:26,144 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call remainingEPXtokenCount_s299 := remainingEPXSupply_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,145 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,145 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,145 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-30 19:47:26,146 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := FreshRefGenerator__fail();
[2020-05-30 19:47:26,146 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := FreshRefGenerator__fail();
[2020-05-30 19:47:26,163 INFO  L313           BlockEncoder]: Initial Icfg 10397 locations, 37761 edges
[2020-05-30 19:47:26,163 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 19:47:26,163 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 19:47:26,164 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 19:47:26,164 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 19:47:26,192 INFO  L70    emoveInfeasibleEdges]: Removed 592 edges and 30 locations because of local infeasibility
[2020-05-30 19:47:26,210 INFO  L70        RemoveSinkStates]: Removed 368 edges and 115 locations by removing sink states
[2020-05-30 19:47:26,240 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 19:47:26,250 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 19:47:26,258 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 19:47:26,259 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 19:47:26,268 INFO  L313           BlockEncoder]: Encoded RCFG 10212 locations, 36684 edges
[2020-05-30 19:47:26,269 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 07:47:26 BasicIcfg
[2020-05-30 19:47:26,269 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 19:47:26,269 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 19:47:26,269 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 19:47:26,271 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 19:47:26,271 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,271 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 07:47:18" (1/6) ...
[2020-05-30 19:47:26,272 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66844cef and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:47:26, skipping insertion in model container
[2020-05-30 19:47:26,272 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,272 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 07:47:18" (2/6) ...
[2020-05-30 19:47:26,273 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66844cef and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:47:26, skipping insertion in model container
[2020-05-30 19:47:26,273 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,273 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 07:47:19" (3/6) ...
[2020-05-30 19:47:26,273 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66844cef and model type L2-EPXCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 07:47:26, skipping insertion in model container
[2020-05-30 19:47:26,273 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,273 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 07:47:19" (4/6) ...
[2020-05-30 19:47:26,273 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66844cef and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 07:47:26, skipping insertion in model container
[2020-05-30 19:47:26,273 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,273 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 07:47:25" (5/6) ...
[2020-05-30 19:47:26,274 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66844cef and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 07:47:26, skipping insertion in model container
[2020-05-30 19:47:26,274 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 19:47:26,274 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 07:47:26" (6/6) ...
[2020-05-30 19:47:26,275 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EPXCrowdsale.bpl_BEv2
[2020-05-30 19:47:26,304 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 19:47:26,304 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 19:47:26,304 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 19:47:26,304 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 19:47:26,304 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 19:47:26,304 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 19:47:26,304 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 19:47:26,304 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 19:47:26,305 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 19:47:26,386 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10212 states.
[2020-05-30 19:47:26,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:26,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:26,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:26,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:26,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:26,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 19:47:26,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10212 states.
[2020-05-30 19:47:26,626 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:26,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:26,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:26,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:26,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3919]              assume null == 0;
[L3920]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3920]  RET         call this := FreshRefGenerator__success();
[L3921]              assume now >= 0;
[L3922]              assume DType[this] == EPXCrowdsale;
[L3923]              gas := gas - 53000;
[L3924]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3924]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]              assume !revert && gas >= 0;
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND TRUE   choice == 7
[L3848]              gas := gas - 21000;
[L3849]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND TRUE   choice == 7
[L3848]              gas := gas - 21000;
[L3849]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:26,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:26,647 INFO  L82        PathProgramCache]: Analyzing trace with hash 167897820, now seen corresponding path program 1 times
[2020-05-30 19:47:26,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:26,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:26,746 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:47:26,748 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:26,748 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 19:47:27,581 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:27,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 19:47:27,600 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 19:47:27,602 INFO  L87              Difference]: Start difference. First operand 10212 states. Second operand 3 states.
[2020-05-30 19:47:29,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:29,034 INFO  L93              Difference]: Finished difference Result 9290 states and 22223 transitions.
[2020-05-30 19:47:29,034 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 19:47:29,035 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9290 states and 22223 transitions.
[2020-05-30 19:47:29,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:29,223 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9290 states to 9290 states and 22223 transitions.
[2020-05-30 19:47:29,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-05-30 19:47:29,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 19
[2020-05-30 19:47:29,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9290 states and 22223 transitions.
[2020-05-30 19:47:29,267 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:29,267 INFO  L728         BuchiCegarLoop]: Abstraction has 9290 states and 22223 transitions.
[2020-05-30 19:47:29,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9290 states and 22223 transitions.
[2020-05-30 19:47:29,449 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9290 to 9290.
[2020-05-30 19:47:29,450 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9290 states.
[2020-05-30 19:47:29,486 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9290 states to 9290 states and 22223 transitions.
[2020-05-30 19:47:29,488 INFO  L751         BuchiCegarLoop]: Abstraction has 9290 states and 22223 transitions.
[2020-05-30 19:47:29,488 INFO  L631         BuchiCegarLoop]: Abstraction has 9290 states and 22223 transitions.
[2020-05-30 19:47:29,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 19:47:29,488 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9290 states and 22223 transitions.
[2020-05-30 19:47:29,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:29,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:29,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:29,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:29,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3919]              assume null == 0;
[L3920]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3920]  RET         call this := FreshRefGenerator__success();
[L3921]              assume now >= 0;
[L3922]              assume DType[this] == EPXCrowdsale;
[L3923]              gas := gas - 53000;
[L3924]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3924]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]              assume !revert && gas >= 0;
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND FALSE  !(choice == 7)
[L3855]  COND FALSE  !(choice == 6)
[L3864]  COND FALSE  !(choice == 5)
[L3873]  COND FALSE  !(choice == 4)
[L3882]  COND TRUE   choice == 3
[L3884]              gas := gas - 21000;
[L3885]  COND TRUE   gas >= 0
[L3887]              assume msgvalue_MSG == 0;
[L3888]  CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]               havoc __exception;
[L622]               revert := false;
[L623]   COND FALSE  !(__exception)
[L656]   CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]              gas := gas - 828;
[L3630]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND TRUE   revert
[L656]   RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 revert := revert_hold;
[L3888]  RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND TRUE   choice == 7
[L3848]              gas := gas - 21000;
[L3849]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND FALSE  !(choice == 7)
[L3855]  COND FALSE  !(choice == 6)
[L3864]  COND FALSE  !(choice == 5)
[L3873]  COND FALSE  !(choice == 4)
[L3882]  COND TRUE   choice == 3
[L3884]              gas := gas - 21000;
[L3885]  COND TRUE   gas >= 0
[L3887]              assume msgvalue_MSG == 0;
[L3888]  CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]               havoc __exception;
[L622]               revert := false;
[L623]   COND FALSE  !(__exception)
[L656]   CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]              gas := gas - 828;
[L3630]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND TRUE   revert
[L656]   RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 revert := revert_hold;
[L3888]  RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:29,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:29,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 714855969, now seen corresponding path program 1 times
[2020-05-30 19:47:29,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:29,525 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:29,544 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:47:29,544 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:29,544 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 19:47:29,545 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:29,545 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:47:29,545 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:47:29,546 INFO  L87              Difference]: Start difference. First operand 9290 states and 22223 transitions. cyclomatic complexity: 12946 Second operand 4 states.
[2020-05-30 19:47:31,393 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:31,393 INFO  L93              Difference]: Finished difference Result 8878 states and 13949 transitions.
[2020-05-30 19:47:31,393 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:47:31,394 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8878 states and 13949 transitions.
[2020-05-30 19:47:31,414 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:31,456 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8878 states to 8878 states and 13949 transitions.
[2020-05-30 19:47:31,456 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 19:47:31,456 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 19:47:31,456 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8878 states and 13949 transitions.
[2020-05-30 19:47:31,470 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:31,470 INFO  L728         BuchiCegarLoop]: Abstraction has 8878 states and 13949 transitions.
[2020-05-30 19:47:31,481 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8878 states and 13949 transitions.
[2020-05-30 19:47:31,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8878 to 8878.
[2020-05-30 19:47:31,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8878 states.
[2020-05-30 19:47:31,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8878 states to 8878 states and 13949 transitions.
[2020-05-30 19:47:31,571 INFO  L751         BuchiCegarLoop]: Abstraction has 8878 states and 13949 transitions.
[2020-05-30 19:47:31,571 INFO  L631         BuchiCegarLoop]: Abstraction has 8878 states and 13949 transitions.
[2020-05-30 19:47:31,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 19:47:31,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8878 states and 13949 transitions.
[2020-05-30 19:47:31,586 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:31,586 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:31,586 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:31,588 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:31,588 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3919]              assume null == 0;
[L3920]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3920]  RET         call this := FreshRefGenerator__success();
[L3921]              assume now >= 0;
[L3922]              assume DType[this] == EPXCrowdsale;
[L3923]              gas := gas - 53000;
[L3924]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND TRUE   revert
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND TRUE   revert
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3924]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]              assume !revert && gas >= 0;
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND FALSE  !(choice == 7)
[L3855]  COND FALSE  !(choice == 6)
[L3864]  COND FALSE  !(choice == 5)
[L3873]  COND FALSE  !(choice == 4)
[L3882]  COND TRUE   choice == 3
[L3884]              gas := gas - 21000;
[L3885]  COND TRUE   gas >= 0
[L3887]              assume msgvalue_MSG == 0;
[L3888]  CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]               havoc __exception;
[L622]               revert := false;
[L623]   COND FALSE  !(__exception)
[L656]   CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]              gas := gas - 828;
[L3630]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND TRUE   revert
[L656]   RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 revert := revert_hold;
[L3888]  RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND TRUE   choice == 7
[L3848]              gas := gas - 21000;
[L3849]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:31,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:31,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -324564192, now seen corresponding path program 1 times
[2020-05-30 19:47:31,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:31,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:31,623 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:47:31,623 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:31,624 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 19:47:31,624 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:31,624 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 19:47:31,624 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 19:47:31,624 INFO  L87              Difference]: Start difference. First operand 8878 states and 13949 transitions. cyclomatic complexity: 5084 Second operand 3 states.
[2020-05-30 19:47:31,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:31,863 INFO  L93              Difference]: Finished difference Result 10453 states and 16264 transitions.
[2020-05-30 19:47:31,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 19:47:31,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10453 states and 16264 transitions.
[2020-05-30 19:47:31,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:31,940 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10453 states to 9683 states and 14793 transitions.
[2020-05-30 19:47:31,940 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 9
[2020-05-30 19:47:31,940 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 9
[2020-05-30 19:47:31,940 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9683 states and 14793 transitions.
[2020-05-30 19:47:31,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:31,953 INFO  L728         BuchiCegarLoop]: Abstraction has 9683 states and 14793 transitions.
[2020-05-30 19:47:31,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9683 states and 14793 transitions.
[2020-05-30 19:47:32,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9683 to 9340.
[2020-05-30 19:47:32,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9340 states.
[2020-05-30 19:47:32,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9340 states to 9340 states and 14345 transitions.
[2020-05-30 19:47:32,093 INFO  L751         BuchiCegarLoop]: Abstraction has 9340 states and 14345 transitions.
[2020-05-30 19:47:32,093 INFO  L631         BuchiCegarLoop]: Abstraction has 9340 states and 14345 transitions.
[2020-05-30 19:47:32,093 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 19:47:32,093 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9340 states and 14345 transitions.
[2020-05-30 19:47:32,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:32,111 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:32,111 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:32,113 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:32,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                 call_CorralChoice_EPXCrowdsale1 := false;
[L7]                 fsum_send__success_2_0 := 0;
[L7]                 fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                 success_CorralChoice_EPXCrowdsale0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L3919]              assume null == 0;
[L3920]  CALL        call this := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L3920]  RET         call this := FreshRefGenerator__success();
[L3921]              assume now >= 0;
[L3922]              assume DType[this] == EPXCrowdsale;
[L3923]              gas := gas - 53000;
[L3924]  CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L376]   CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]              assume msgsender_MSG != null;
[L1119]              Balance[this] := 0;
[L1120]              owner_owned[this] := null;
[L1121]              owner_owned[this] := msgsender_MSG;
[L1139]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]  COND FALSE  !(revert)
[L1891]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]  COND FALSE  !(revert)
[L1897]  CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]  CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]              assume msgsender_MSG != null;
[L1159]              Balance[this] := 0;
[L1177]  RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]  COND FALSE  !(revert)
[L1897]  RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]  COND FALSE  !(revert)
[L1903]  CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]              assume msgsender_MSG != null;
[L1817]              Balance[this] := 0;
[L1818]              admin_EPXCrowdsale[this] := null;
[L1819]              initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]              tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]              beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]              amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]              fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]              CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]              fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]              fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]              isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]              areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]              isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]  CALL        call __var_1 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1830]  RET         call __var_1 := FreshRefGenerator__success();
[L1831]  COND FALSE  !(revert)
[L1836]              balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]              M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]  CALL        call __var_2 := FreshRefGenerator__success();
[L1098]              havoc newRef;
[L1099]              assume Alloc[newRef] == false;
[L1100]              Alloc[newRef] := true;
[L1101]              assume newRef != null;
[L1839]  RET         call __var_2 := FreshRefGenerator__success();
[L1840]  COND FALSE  !(revert)
[L1845]              usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]              M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]              gas := gas - 828;
[L3630]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  COND FALSE  !(revert)
[L1854]              admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]              CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]  RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  COND FALSE  !(revert)
[L376]   RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]               assume !revert && gas >= 0;
[L3924]  RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]              assume !revert && gas >= 0;
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND TRUE   choice == 7
[L3848]              gas := gas - 21000;
[L3849]  COND FALSE  !(gas >= 0)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                 success_CorralChoice_EPXCrowdsale2 := true;
[L7]                 success_CorralChoice_EPXCrowdsale2 := false;
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND FALSE  !(Balance[from] >= amount)
[L3606]                    success := false;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:32,116 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:32,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -477770645, now seen corresponding path program 1 times
[2020-05-30 19:47:32,116 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:32,130 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:32,157 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 19:47:32,157 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:32,158 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 19:47:32,158 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:32,158 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:47:32,158 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:47:32,158 INFO  L87              Difference]: Start difference. First operand 9340 states and 14345 transitions. cyclomatic complexity: 5018 Second operand 4 states.
[2020-05-30 19:47:32,480 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:32,480 INFO  L93              Difference]: Finished difference Result 9600 states and 14733 transitions.
[2020-05-30 19:47:32,481 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:47:32,481 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9600 states and 14733 transitions.
[2020-05-30 19:47:32,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:32,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9600 states to 9600 states and 14733 transitions.
[2020-05-30 19:47:32,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-05-30 19:47:32,556 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 15
[2020-05-30 19:47:32,556 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9600 states and 14733 transitions.
[2020-05-30 19:47:32,566 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:32,566 INFO  L728         BuchiCegarLoop]: Abstraction has 9600 states and 14733 transitions.
[2020-05-30 19:47:32,576 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9600 states and 14733 transitions.
[2020-05-30 19:47:32,667 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9600 to 9376.
[2020-05-30 19:47:32,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9376 states.
[2020-05-30 19:47:32,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9376 states to 9376 states and 14364 transitions.
[2020-05-30 19:47:32,685 INFO  L751         BuchiCegarLoop]: Abstraction has 9376 states and 14364 transitions.
[2020-05-30 19:47:32,685 INFO  L631         BuchiCegarLoop]: Abstraction has 9376 states and 14364 transitions.
[2020-05-30 19:47:32,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 19:47:32,686 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9376 states and 14364 transitions.
[2020-05-30 19:47:32,697 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:32,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:32,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:32,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:32,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND FALSE  !(Balance[from] >= amount)
[L3606]                    success := false;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND FALSE  !(Balance[from] >= amount)
[L3606]                    success := false;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:32,703 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:32,704 INFO  L82        PathProgramCache]: Analyzing trace with hash -915481360, now seen corresponding path program 1 times
[2020-05-30 19:47:32,704 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:32,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:32,754 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 19:47:32,755 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:32,755 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 19:47:32,755 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:32,755 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:47:32,755 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:47:32,755 INFO  L87              Difference]: Start difference. First operand 9376 states and 14364 transitions. cyclomatic complexity: 5001 Second operand 4 states.
[2020-05-30 19:47:32,864 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:32,864 INFO  L93              Difference]: Finished difference Result 9411 states and 14418 transitions.
[2020-05-30 19:47:32,865 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:47:32,865 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9411 states and 14418 transitions.
[2020-05-30 19:47:32,889 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:32,923 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9411 states to 9401 states and 14406 transitions.
[2020-05-30 19:47:32,923 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-05-30 19:47:32,923 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 13
[2020-05-30 19:47:32,923 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9401 states and 14406 transitions.
[2020-05-30 19:47:32,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:32,933 INFO  L728         BuchiCegarLoop]: Abstraction has 9401 states and 14406 transitions.
[2020-05-30 19:47:32,941 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9401 states and 14406 transitions.
[2020-05-30 19:47:33,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9401 to 9401.
[2020-05-30 19:47:33,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9401 states.
[2020-05-30 19:47:33,030 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9401 states to 9401 states and 14406 transitions.
[2020-05-30 19:47:33,030 INFO  L751         BuchiCegarLoop]: Abstraction has 9401 states and 14406 transitions.
[2020-05-30 19:47:33,030 INFO  L631         BuchiCegarLoop]: Abstraction has 9401 states and 14406 transitions.
[2020-05-30 19:47:33,030 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 19:47:33,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9401 states and 14406 transitions.
[2020-05-30 19:47:33,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:33,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:33,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:33,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:33,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:33,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:33,047 INFO  L82        PathProgramCache]: Analyzing trace with hash 506810977, now seen corresponding path program 1 times
[2020-05-30 19:47:33,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:33,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:33,126 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 19:47:33,126 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:33,126 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 19:47:33,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:33,127 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:47:33,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:47:33,127 INFO  L87              Difference]: Start difference. First operand 9401 states and 14406 transitions. cyclomatic complexity: 5018 Second operand 11 states.
[2020-05-30 19:47:39,150 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:39,150 INFO  L93              Difference]: Finished difference Result 10162 states and 15575 transitions.
[2020-05-30 19:47:39,150 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 19:47:39,151 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10162 states and 15575 transitions.
[2020-05-30 19:47:39,178 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 19:47:39,220 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10162 states to 10162 states and 15575 transitions.
[2020-05-30 19:47:39,220 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 30
[2020-05-30 19:47:39,220 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 30
[2020-05-30 19:47:39,220 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10162 states and 15575 transitions.
[2020-05-30 19:47:39,229 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:39,229 INFO  L728         BuchiCegarLoop]: Abstraction has 10162 states and 15575 transitions.
[2020-05-30 19:47:39,237 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10162 states and 15575 transitions.
[2020-05-30 19:47:39,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10162 to 9983.
[2020-05-30 19:47:39,313 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9983 states.
[2020-05-30 19:47:39,329 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9983 states to 9983 states and 15229 transitions.
[2020-05-30 19:47:39,329 INFO  L751         BuchiCegarLoop]: Abstraction has 9983 states and 15229 transitions.
[2020-05-30 19:47:39,329 INFO  L631         BuchiCegarLoop]: Abstraction has 9983 states and 15229 transitions.
[2020-05-30 19:47:39,329 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 19:47:39,329 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9983 states and 15229 transitions.
[2020-05-30 19:47:39,341 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:39,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:39,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:39,344 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:39,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND FALSE  !(gas < 21000)
[L3324]        COND TRUE   DType[from] == EPXCrowdsale
[L3326]        COND FALSE  !(choice == 7)
[L3339]        COND FALSE  !(choice == 6)
[L3352]        COND FALSE  !(choice == 5)
[L3365]        COND FALSE  !(choice == 4)
[L3378]        COND FALSE  !(choice == 3)
[L3391]        COND TRUE   choice == 2
[L3393]                    gas := gas - 21000;
[L3394]        COND TRUE   gas >= 0
[L3396]                    assume msgvalue_MSG == 0;
[L3397]        CALL        call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L3397]        RET         call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L3398]        COND FALSE  !(revert)
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:39,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:39,349 INFO  L82        PathProgramCache]: Analyzing trace with hash -1127836176, now seen corresponding path program 1 times
[2020-05-30 19:47:39,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:39,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:39,430 INFO  L134       CoverageAnalysis]: Checked inductivity of 50 backedges. 1 proven. 31 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 19:47:39,430 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:47:39,430 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 19:47:39,431 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:39,431 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 19:47:39,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 19:47:39,431 INFO  L87              Difference]: Start difference. First operand 9983 states and 15229 transitions. cyclomatic complexity: 5262 Second operand 10 states.
[2020-05-30 19:47:47,514 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:47,514 INFO  L93              Difference]: Finished difference Result 10569 states and 16314 transitions.
[2020-05-30 19:47:47,514 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 19:47:47,515 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10569 states and 16314 transitions.
[2020-05-30 19:47:47,548 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-30 19:47:47,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10569 states to 10569 states and 16314 transitions.
[2020-05-30 19:47:47,588 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 43
[2020-05-30 19:47:47,589 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 43
[2020-05-30 19:47:47,589 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10569 states and 16314 transitions.
[2020-05-30 19:47:47,598 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:47,599 INFO  L728         BuchiCegarLoop]: Abstraction has 10569 states and 16314 transitions.
[2020-05-30 19:47:47,607 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10569 states and 16314 transitions.
[2020-05-30 19:47:47,677 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10569 to 10559.
[2020-05-30 19:47:47,677 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10559 states.
[2020-05-30 19:47:47,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10559 states to 10559 states and 16211 transitions.
[2020-05-30 19:47:47,694 INFO  L751         BuchiCegarLoop]: Abstraction has 10559 states and 16211 transitions.
[2020-05-30 19:47:47,694 INFO  L631         BuchiCegarLoop]: Abstraction has 10559 states and 16211 transitions.
[2020-05-30 19:47:47,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 19:47:47,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10559 states and 16211 transitions.
[2020-05-30 19:47:47,706 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 19:47:47,706 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:47,706 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:47,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:47,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND FALSE  !(gas < 21000)
[L3324]        COND TRUE   DType[from] == EPXCrowdsale
[L3326]        COND FALSE  !(choice == 7)
[L3339]        COND FALSE  !(choice == 6)
[L3352]        COND FALSE  !(choice == 5)
[L3365]        COND FALSE  !(choice == 4)
[L3378]        COND FALSE  !(choice == 3)
[L3391]        COND TRUE   choice == 2
[L3393]                    gas := gas - 21000;
[L3394]        COND TRUE   gas >= 0
[L3396]                    assume msgvalue_MSG == 0;
[L3397]        CALL        call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L3397]        RET         call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L3398]        COND FALSE  !(revert)
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND FALSE  !(gas < 21000)
[L3324]        COND TRUE   DType[from] == EPXCrowdsale
[L3326]        COND FALSE  !(choice == 7)
[L3339]        COND FALSE  !(choice == 6)
[L3352]        COND FALSE  !(choice == 5)
[L3365]        COND FALSE  !(choice == 4)
[L3378]        COND FALSE  !(choice == 3)
[L3391]        COND TRUE   choice == 2
[L3393]                    gas := gas - 21000;
[L3394]        COND TRUE   gas >= 0
[L3396]                    assume msgvalue_MSG == 0;
[L3397]        CALL        call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L3397]        RET         call checkGoalReached_EPXCrowdsale__success(from, to, msgvalue_MSG);
[L3398]        COND FALSE  !(revert)
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:47,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:47,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 1692831122, now seen corresponding path program 1 times
[2020-05-30 19:47:47,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:47,731 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:47,795 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 1 proven. 15 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-05-30 19:47:47,796 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:47:47,796 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-05-30 19:47:47,796 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:47,796 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 19:47:47,796 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 19:47:47,796 INFO  L87              Difference]: Start difference. First operand 10559 states and 16211 transitions. cyclomatic complexity: 5674 Second operand 5 states.
[2020-05-30 19:47:50,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:50,070 INFO  L93              Difference]: Finished difference Result 11953 states and 18016 transitions.
[2020-05-30 19:47:50,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 19:47:50,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11953 states and 18016 transitions.
[2020-05-30 19:47:50,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:50,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11953 states to 11953 states and 18016 transitions.
[2020-05-30 19:47:50,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 40
[2020-05-30 19:47:50,118 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 40
[2020-05-30 19:47:50,118 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11953 states and 18016 transitions.
[2020-05-30 19:47:50,126 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:50,126 INFO  L728         BuchiCegarLoop]: Abstraction has 11953 states and 18016 transitions.
[2020-05-30 19:47:50,132 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11953 states and 18016 transitions.
[2020-05-30 19:47:50,192 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11953 to 11254.
[2020-05-30 19:47:50,193 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11254 states.
[2020-05-30 19:47:50,207 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11254 states to 11254 states and 16848 transitions.
[2020-05-30 19:47:50,207 INFO  L751         BuchiCegarLoop]: Abstraction has 11254 states and 16848 transitions.
[2020-05-30 19:47:50,207 INFO  L631         BuchiCegarLoop]: Abstraction has 11254 states and 16848 transitions.
[2020-05-30 19:47:50,207 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 19:47:50,208 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11254 states and 16848 transitions.
[2020-05-30 19:47:50,219 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:50,220 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:50,220 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:50,220 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:50,220 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND TRUE   __exception
[L345]                     __tmp__Balance := Balance;
[L346]                     __tmp__DType := DType;
[L347]                     __tmp__Alloc := Alloc;
[L348]                     __tmp__balance_ADDR := balance_ADDR;
[L349]                     __tmp__M_Ref_int_balancesArray0 := M_Ref_int_balancesArray0;
[L350]                     __tmp__sum_balancesArray0 := sum_balancesArray0;
[L351]                     __tmp__M_Ref_int_usersEPXfundValue1 := M_Ref_int_usersEPXfundValue1;
[L352]                     __tmp__sum_usersEPXfundValue1 := sum_usersEPXfundValue1;
[L353]                     __tmp__Length := Length;
[L354]                     __tmp__now := now;
[L355]                     __tmp__owner_owned := owner_owned;
[L356]                     __tmp__admin_EPXCrowdsale := admin_EPXCrowdsale;
[L357]                     __tmp__tokenReward_EPXCrowdsale := tokenReward_EPXCrowdsale;
[L358]                     __tmp__initialTokenSupply_EPXCrowdsale := initialTokenSupply_EPXCrowdsale;
[L359]                     __tmp__tokensRemaining_EPXCrowdsale := tokensRemaining_EPXCrowdsale;
[L360]                     __tmp__beneficiaryWallet_EPXCrowdsale := beneficiaryWallet_EPXCrowdsale;
[L361]                     __tmp__amountRaisedInWei_EPXCrowdsale := amountRaisedInWei_EPXCrowdsale;
[L362]                     __tmp__fundingMinCapInWei_EPXCrowdsale := fundingMinCapInWei_EPXCrowdsale;
[L363]                     __tmp__CurrentStatus_EPXCrowdsale := CurrentStatus_EPXCrowdsale;
[L364]                     __tmp__fundingStartBlock_EPXCrowdsale := fundingStartBlock_EPXCrowdsale;
[L365]                     __tmp__fundingEndBlock_EPXCrowdsale := fundingEndBlock_EPXCrowdsale;
[L366]                     __tmp__isCrowdSaleClosed_EPXCrowdsale := isCrowdSaleClosed_EPXCrowdsale;
[L367]                     __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale := areFundsReleasedToBeneficiary_EPXCrowdsale;
[L368]                     __tmp__isCrowdSaleSetup_EPXCrowdsale := isCrowdSaleSetup_EPXCrowdsale;
[L369]                     __tmp__balancesArray_EPXCrowdsale := balancesArray_EPXCrowdsale;
[L370]                     __tmp__usersEPXfundValue_EPXCrowdsale := usersEPXfundValue_EPXCrowdsale;
[L371]         CALL        call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1865]        CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1128]        CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1108]                    assume msgsender_MSG != null;
[L1109]                    __tmp__Balance[this] := 0;
[L1110]                    __tmp__owner_owned[this] := null;
[L1111]                    __tmp__owner_owned[this] := msgsender_MSG;
[L1128]        RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1129]        COND FALSE  !(revert)
[L1865]        RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1866]        COND FALSE  !(revert)
[L1871]        CALL        call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1166]        CALL        call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1150]                    assume msgsender_MSG != null;
[L1151]                    __tmp__Balance[this] := 0;
[L1166]        RET         call safeMath_safeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1167]        COND FALSE  !(revert)
[L1871]        RET         call safeMath_safeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]        COND FALSE  !(revert)
[L1877]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1767]                    assume msgsender_MSG != null;
[L1768]                    __tmp__Balance[this] := 0;
[L1769]                    __tmp__admin_EPXCrowdsale[this] := null;
[L1770]                    __tmp__initialTokenSupply_EPXCrowdsale[this] := 0;
[L1771]                    __tmp__tokensRemaining_EPXCrowdsale[this] := 0;
[L1772]                    __tmp__beneficiaryWallet_EPXCrowdsale[this] := null;
[L1773]                    __tmp__amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1774]                    __tmp__fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1775]                    __tmp__CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1776]                    __tmp__fundingStartBlock_EPXCrowdsale[this] := 0;
[L1777]                    __tmp__fundingEndBlock_EPXCrowdsale[this] := 0;
[L1778]                    __tmp__isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1779]                    __tmp__areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1780]                    __tmp__isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1781]        CALL        call __var_1 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1781]        RET         call __var_1 := FreshRefGenerator__fail();
[L1782]        COND FALSE  !(revert)
[L1787]                    __tmp__balancesArray_EPXCrowdsale[this] := __var_1;
[L1788]                    __tmp__M_Ref_int_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1789]                    __tmp__sum_balancesArray0[__tmp__balancesArray_EPXCrowdsale[this]] := 0;
[L1790]        CALL        call __var_2 := FreshRefGenerator__fail();
[L1088]                    havoc newRef;
[L1089]                    assume __tmp__Alloc[newRef] == false;
[L1090]                    __tmp__Alloc[newRef] := true;
[L1091]                    assume newRef != null;
[L1790]        RET         call __var_2 := FreshRefGenerator__fail();
[L1791]        COND FALSE  !(revert)
[L1796]                    __tmp__usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1797]                    __tmp__M_Ref_int_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1798]                    __tmp__sum_usersEPXfundValue1[__tmp__usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1799]        CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3617]                    gas := gas - 828;
[L3618]        COND FALSE  !(!(msgsender_MSG == __tmp__owner_owned[this]))
[L1799]        RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1800]        COND FALSE  !(revert)
[L1805]                    __tmp__admin_EPXCrowdsale[this] := msgsender_MSG;
[L1806]                    __tmp__CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1877]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]        COND FALSE  !(revert)
[L371]         RET         call EPXCrowdsale_EPXCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L372]                     assume revert || gas < 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]  CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]              havoc msgsender_MSG;
[L3826]              havoc msgvalue_MSG;
[L3827]              havoc choice;
[L3828]              havoc initialEPXtokenCount_s286;
[L3829]              havoc remainingEPXtokenCount_s299;
[L3830]              havoc _fundingStartBlock_s391;
[L3831]              havoc _fundingEndBlock_s391;
[L3832]              havoc response_s391;
[L3833]              havoc _amount_s558;
[L3834]              havoc tmpNow;
[L3835]              havoc gas;
[L3836]              assume gas > 4000000 && gas <= 8000000;
[L3837]              tmpNow := now;
[L3838]              havoc now;
[L3839]              assume now > tmpNow;
[L3840]              assume msgsender_MSG != null;
[L3841]              assume DType[msgsender_MSG] != owned;
[L3842]              assume DType[msgsender_MSG] != safeMath;
[L3843]              assume DType[msgsender_MSG] != StandardToken;
[L3844]              assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]              Alloc[msgsender_MSG] := true;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                 revert := revert_hold;
[L3846]  COND FALSE  !(choice == 7)
[L3855]  COND FALSE  !(choice == 6)
[L3864]  COND FALSE  !(choice == 5)
[L3873]  COND FALSE  !(choice == 4)
[L3882]  COND FALSE  !(choice == 3)
[L3891]  COND FALSE  !(choice == 2)
[L3900]  COND FALSE  !(choice == 1)
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                 revert := revert_hold;
[L3928]  RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:50,223 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:50,223 INFO  L82        PathProgramCache]: Analyzing trace with hash 1517351116, now seen corresponding path program 1 times
[2020-05-30 19:47:50,223 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:50,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:50,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 19:47:50,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:50,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 19:47:50,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:50,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:47:50,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:47:50,266 INFO  L87              Difference]: Start difference. First operand 11254 states and 16848 transitions. cyclomatic complexity: 5603 Second operand 4 states.
[2020-05-30 19:47:50,690 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:50,690 INFO  L93              Difference]: Finished difference Result 12307 states and 18138 transitions.
[2020-05-30 19:47:50,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 19:47:50,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12307 states and 18138 transitions.
[2020-05-30 19:47:50,722 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:50,756 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12307 states to 11971 states and 17701 transitions.
[2020-05-30 19:47:50,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 32
[2020-05-30 19:47:50,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 32
[2020-05-30 19:47:50,757 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11971 states and 17701 transitions.
[2020-05-30 19:47:50,766 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:50,766 INFO  L728         BuchiCegarLoop]: Abstraction has 11971 states and 17701 transitions.
[2020-05-30 19:47:50,774 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11971 states and 17701 transitions.
[2020-05-30 19:47:50,833 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11971 to 11033.
[2020-05-30 19:47:50,833 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11033 states.
[2020-05-30 19:47:50,847 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11033 states to 11033 states and 16270 transitions.
[2020-05-30 19:47:50,847 INFO  L751         BuchiCegarLoop]: Abstraction has 11033 states and 16270 transitions.
[2020-05-30 19:47:50,847 INFO  L631         BuchiCegarLoop]: Abstraction has 11033 states and 16270 transitions.
[2020-05-30 19:47:50,847 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 19:47:50,847 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11033 states and 16270 transitions.
[2020-05-30 19:47:50,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:50,859 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:50,859 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:50,860 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:50,860 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:50,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:50,863 INFO  L82        PathProgramCache]: Analyzing trace with hash 163138054, now seen corresponding path program 1 times
[2020-05-30 19:47:50,863 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:50,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:50,916 INFO  L134       CoverageAnalysis]: Checked inductivity of 55 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 19:47:50,916 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:50,917 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-30 19:47:50,917 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:50,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-30 19:47:50,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-30 19:47:50,917 INFO  L87              Difference]: Start difference. First operand 11033 states and 16270 transitions. cyclomatic complexity: 5246 Second operand 5 states.
[2020-05-30 19:47:51,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:51,354 INFO  L93              Difference]: Finished difference Result 11521 states and 16859 transitions.
[2020-05-30 19:47:51,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 19:47:51,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11521 states and 16859 transitions.
[2020-05-30 19:47:51,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:51,413 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11521 states to 11521 states and 16859 transitions.
[2020-05-30 19:47:51,413 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 27
[2020-05-30 19:47:51,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 27
[2020-05-30 19:47:51,414 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11521 states and 16859 transitions.
[2020-05-30 19:47:51,422 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:51,422 INFO  L728         BuchiCegarLoop]: Abstraction has 11521 states and 16859 transitions.
[2020-05-30 19:47:51,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11521 states and 16859 transitions.
[2020-05-30 19:47:51,488 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11521 to 11334.
[2020-05-30 19:47:51,488 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11334 states.
[2020-05-30 19:47:51,504 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11334 states to 11334 states and 16605 transitions.
[2020-05-30 19:47:51,504 INFO  L751         BuchiCegarLoop]: Abstraction has 11334 states and 16605 transitions.
[2020-05-30 19:47:51,504 INFO  L631         BuchiCegarLoop]: Abstraction has 11334 states and 16605 transitions.
[2020-05-30 19:47:51,504 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 19:47:51,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11334 states and 16605 transitions.
[2020-05-30 19:47:51,517 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 19:47:51,517 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:51,517 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:51,518 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:51,518 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:51,521 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:51,521 INFO  L82        PathProgramCache]: Analyzing trace with hash -607879265, now seen corresponding path program 1 times
[2020-05-30 19:47:51,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:51,536 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:51,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 55 backedges. 30 proven. 7 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 19:47:51,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:47:51,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 19:47:51,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:51,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:47:51,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:47:51,653 INFO  L87              Difference]: Start difference. First operand 11334 states and 16605 transitions. cyclomatic complexity: 5280 Second operand 11 states.
[2020-05-30 19:47:58,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:58,896 INFO  L93              Difference]: Finished difference Result 13087 states and 19345 transitions.
[2020-05-30 19:47:58,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 19:47:58,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13087 states and 19345 transitions.
[2020-05-30 19:47:58,935 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:58,975 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13087 states to 13087 states and 19345 transitions.
[2020-05-30 19:47:58,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 49
[2020-05-30 19:47:58,976 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 49
[2020-05-30 19:47:58,976 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13087 states and 19345 transitions.
[2020-05-30 19:47:58,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:58,986 INFO  L728         BuchiCegarLoop]: Abstraction has 13087 states and 19345 transitions.
[2020-05-30 19:47:58,994 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13087 states and 19345 transitions.
[2020-05-30 19:47:59,068 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13087 to 12963.
[2020-05-30 19:47:59,068 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12963 states.
[2020-05-30 19:47:59,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12963 states to 12963 states and 19172 transitions.
[2020-05-30 19:47:59,089 INFO  L751         BuchiCegarLoop]: Abstraction has 12963 states and 19172 transitions.
[2020-05-30 19:47:59,089 INFO  L631         BuchiCegarLoop]: Abstraction has 12963 states and 19172 transitions.
[2020-05-30 19:47:59,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 19:47:59,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12963 states and 19172 transitions.
[2020-05-30 19:47:59,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:59,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:47:59,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:47:59,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:47:59,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:47:59,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:47:59,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -888640691, now seen corresponding path program 1 times
[2020-05-30 19:47:59,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:47:59,134 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:47:59,245 INFO  L134       CoverageAnalysis]: Checked inductivity of 182 backedges. 33 proven. 0 refuted. 0 times theorem prover too weak. 149 trivial. 0 not checked.
[2020-05-30 19:47:59,245 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:47:59,245 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 19:47:59,246 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:47:59,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 19:47:59,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 19:47:59,246 INFO  L87              Difference]: Start difference. First operand 12963 states and 19172 transitions. cyclomatic complexity: 6218 Second operand 7 states.
[2020-05-30 19:47:59,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:47:59,874 INFO  L93              Difference]: Finished difference Result 12920 states and 19088 transitions.
[2020-05-30 19:47:59,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 19:47:59,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12920 states and 19088 transitions.
[2020-05-30 19:47:59,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:47:59,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12920 states to 12870 states and 19022 transitions.
[2020-05-30 19:47:59,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 48
[2020-05-30 19:47:59,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 48
[2020-05-30 19:47:59,932 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12870 states and 19022 transitions.
[2020-05-30 19:47:59,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:47:59,941 INFO  L728         BuchiCegarLoop]: Abstraction has 12870 states and 19022 transitions.
[2020-05-30 19:47:59,947 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12870 states and 19022 transitions.
[2020-05-30 19:48:00,013 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12870 to 12870.
[2020-05-30 19:48:00,014 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12870 states.
[2020-05-30 19:48:00,036 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12870 states to 12870 states and 19022 transitions.
[2020-05-30 19:48:00,036 INFO  L751         BuchiCegarLoop]: Abstraction has 12870 states and 19022 transitions.
[2020-05-30 19:48:00,036 INFO  L631         BuchiCegarLoop]: Abstraction has 12870 states and 19022 transitions.
[2020-05-30 19:48:00,036 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 19:48:00,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12870 states and 19022 transitions.
[2020-05-30 19:48:00,052 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 19:48:00,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:00,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:00,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:00,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:00,058 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:00,059 INFO  L82        PathProgramCache]: Analyzing trace with hash 1361960692, now seen corresponding path program 1 times
[2020-05-30 19:48:00,059 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:00,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:00,149 INFO  L134       CoverageAnalysis]: Checked inductivity of 133 backedges. 73 proven. 0 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-05-30 19:48:00,149 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:48:00,149 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 19:48:00,149 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:48:00,150 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:48:00,150 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:48:00,150 INFO  L87              Difference]: Start difference. First operand 12870 states and 19022 transitions. cyclomatic complexity: 6161 Second operand 11 states.
[2020-05-30 19:48:06,154 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:06,154 INFO  L93              Difference]: Finished difference Result 13322 states and 19578 transitions.
[2020-05-30 19:48:06,154 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 19:48:06,154 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13322 states and 19578 transitions.
[2020-05-30 19:48:06,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:06,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13322 states to 12783 states and 18495 transitions.
[2020-05-30 19:48:06,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 46
[2020-05-30 19:48:06,213 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 46
[2020-05-30 19:48:06,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12783 states and 18495 transitions.
[2020-05-30 19:48:06,224 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:06,224 INFO  L728         BuchiCegarLoop]: Abstraction has 12783 states and 18495 transitions.
[2020-05-30 19:48:06,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12783 states and 18495 transitions.
[2020-05-30 19:48:06,294 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12783 to 12459.
[2020-05-30 19:48:06,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12459 states.
[2020-05-30 19:48:06,314 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12459 states to 12459 states and 18001 transitions.
[2020-05-30 19:48:06,314 INFO  L751         BuchiCegarLoop]: Abstraction has 12459 states and 18001 transitions.
[2020-05-30 19:48:06,314 INFO  L631         BuchiCegarLoop]: Abstraction has 12459 states and 18001 transitions.
[2020-05-30 19:48:06,314 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 19:48:06,314 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12459 states and 18001 transitions.
[2020-05-30 19:48:06,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:06,328 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:06,328 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:06,330 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:06,330 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1645]        COND TRUE   DType[this] == StandardToken
[L1647]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1647]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1648]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND FALSE  !(DType[this] == StandardToken)
[L1543]        COND TRUE   DType[this] == safeMath
[L1545]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1545]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1546]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:06,335 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:06,335 INFO  L82        PathProgramCache]: Analyzing trace with hash -385870171, now seen corresponding path program 1 times
[2020-05-30 19:48:06,336 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:06,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:06,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 181 backedges. 13 proven. 16 refuted. 0 times theorem prover too weak. 152 trivial. 0 not checked.
[2020-05-30 19:48:06,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:48:06,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:48:06,456 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:48:06,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 19:48:06,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 19:48:06,456 INFO  L87              Difference]: Start difference. First operand 12459 states and 18001 transitions. cyclomatic complexity: 5548 Second operand 7 states.
[2020-05-30 19:48:06,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:06,707 INFO  L93              Difference]: Finished difference Result 12802 states and 18438 transitions.
[2020-05-30 19:48:06,707 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 19:48:06,707 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12802 states and 18438 transitions.
[2020-05-30 19:48:06,735 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:06,773 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12802 states to 12451 states and 17953 transitions.
[2020-05-30 19:48:06,773 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 19:48:06,773 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 19:48:06,773 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12451 states and 17953 transitions.
[2020-05-30 19:48:06,782 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:06,782 INFO  L728         BuchiCegarLoop]: Abstraction has 12451 states and 17953 transitions.
[2020-05-30 19:48:06,789 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12451 states and 17953 transitions.
[2020-05-30 19:48:06,858 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12451 to 12424.
[2020-05-30 19:48:06,858 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12424 states.
[2020-05-30 19:48:06,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12424 states to 12424 states and 17926 transitions.
[2020-05-30 19:48:06,880 INFO  L751         BuchiCegarLoop]: Abstraction has 12424 states and 17926 transitions.
[2020-05-30 19:48:06,880 INFO  L631         BuchiCegarLoop]: Abstraction has 12424 states and 17926 transitions.
[2020-05-30 19:48:06,880 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 19:48:06,880 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12424 states and 17926 transitions.
[2020-05-30 19:48:06,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:06,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:06,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:06,897 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:06,897 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1535]        COND TRUE   DType[this] == StandardToken
[L1537]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1537]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1538]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:06,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:06,903 INFO  L82        PathProgramCache]: Analyzing trace with hash -1743793690, now seen corresponding path program 1 times
[2020-05-30 19:48:06,903 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:06,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:07,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 13 proven. 7 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-05-30 19:48:07,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:48:07,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:48:07,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:48:07,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 19:48:07,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-30 19:48:07,029 INFO  L87              Difference]: Start difference. First operand 12424 states and 17926 transitions. cyclomatic complexity: 5508 Second operand 7 states.
[2020-05-30 19:48:07,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:07,283 INFO  L93              Difference]: Finished difference Result 12576 states and 18104 transitions.
[2020-05-30 19:48:07,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-30 19:48:07,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12576 states and 18104 transitions.
[2020-05-30 19:48:07,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:07,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12576 states to 12344 states and 17794 transitions.
[2020-05-30 19:48:07,355 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 19:48:07,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 19:48:07,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12344 states and 17794 transitions.
[2020-05-30 19:48:07,369 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:07,369 INFO  L728         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 19:48:07,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12344 states and 17794 transitions.
[2020-05-30 19:48:07,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12344 to 12344.
[2020-05-30 19:48:07,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12344 states.
[2020-05-30 19:48:07,464 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12344 states to 12344 states and 17794 transitions.
[2020-05-30 19:48:07,464 INFO  L751         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 19:48:07,464 INFO  L631         BuchiCegarLoop]: Abstraction has 12344 states and 17794 transitions.
[2020-05-30 19:48:07,464 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 19:48:07,464 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12344 states and 17794 transitions.
[2020-05-30 19:48:07,478 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:07,478 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:07,478 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:07,480 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:07,480 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND FALSE  !(DType[this] == EPXCrowdsale)
[L1267]        COND FALSE  !(DType[this] == StandardToken)
[L1275]        COND TRUE   DType[this] == safeMath
[L1277]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1277]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1278]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:07,485 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:07,485 INFO  L82        PathProgramCache]: Analyzing trace with hash 1179608766, now seen corresponding path program 1 times
[2020-05-30 19:48:07,486 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:07,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:07,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:07,783 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:07,783 INFO  L82        PathProgramCache]: Analyzing trace with hash 630701938, now seen corresponding path program 1 times
[2020-05-30 19:48:07,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:07,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:07,846 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-30 19:48:07,846 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:48:07,846 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 19:48:07,847 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 19:48:07,847 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:48:07,847 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:48:07,847 INFO  L87              Difference]: Start difference. First operand 12344 states and 17794 transitions. cyclomatic complexity: 5456 Second operand 4 states.
[2020-05-30 19:48:08,110 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:08,110 INFO  L93              Difference]: Finished difference Result 12384 states and 17834 transitions.
[2020-05-30 19:48:08,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:48:08,111 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12384 states and 17834 transitions.
[2020-05-30 19:48:08,156 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:08,197 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12384 states to 12264 states and 17662 transitions.
[2020-05-30 19:48:08,197 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 42
[2020-05-30 19:48:08,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 42
[2020-05-30 19:48:08,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12264 states and 17662 transitions.
[2020-05-30 19:48:08,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:08,209 INFO  L728         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 19:48:08,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12264 states and 17662 transitions.
[2020-05-30 19:48:08,301 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12264 to 12264.
[2020-05-30 19:48:08,301 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12264 states.
[2020-05-30 19:48:08,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12264 states to 12264 states and 17662 transitions.
[2020-05-30 19:48:08,324 INFO  L751         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 19:48:08,324 INFO  L631         BuchiCegarLoop]: Abstraction has 12264 states and 17662 transitions.
[2020-05-30 19:48:08,324 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 19:48:08,324 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12264 states and 17662 transitions.
[2020-05-30 19:48:08,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:08,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:08,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:08,340 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:08,340 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:08,344 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:08,345 INFO  L82        PathProgramCache]: Analyzing trace with hash 1179608766, now seen corresponding path program 2 times
[2020-05-30 19:48:08,345 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:08,381 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:08,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:08,503 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:08,504 INFO  L82        PathProgramCache]: Analyzing trace with hash -567637025, now seen corresponding path program 1 times
[2020-05-30 19:48:08,504 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:08,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:08,593 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-05-30 19:48:08,593 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:48:08,593 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 19:48:08,594 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 19:48:08,594 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 19:48:08,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-05-30 19:48:08,594 INFO  L87              Difference]: Start difference. First operand 12264 states and 17662 transitions. cyclomatic complexity: 5404 Second operand 6 states.
[2020-05-30 19:48:11,012 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:11,012 INFO  L93              Difference]: Finished difference Result 12488 states and 17950 transitions.
[2020-05-30 19:48:11,012 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 19:48:11,012 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12488 states and 17950 transitions.
[2020-05-30 19:48:11,048 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:11,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12488 states to 12488 states and 17950 transitions.
[2020-05-30 19:48:11,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 45
[2020-05-30 19:48:11,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 45
[2020-05-30 19:48:11,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12488 states and 17950 transitions.
[2020-05-30 19:48:11,099 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:11,099 INFO  L728         BuchiCegarLoop]: Abstraction has 12488 states and 17950 transitions.
[2020-05-30 19:48:11,107 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12488 states and 17950 transitions.
[2020-05-30 19:48:11,179 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12488 to 12348.
[2020-05-30 19:48:11,179 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12348 states.
[2020-05-30 19:48:11,199 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12348 states to 12348 states and 17754 transitions.
[2020-05-30 19:48:11,200 INFO  L751         BuchiCegarLoop]: Abstraction has 12348 states and 17754 transitions.
[2020-05-30 19:48:11,200 INFO  L631         BuchiCegarLoop]: Abstraction has 12348 states and 17754 transitions.
[2020-05-30 19:48:11,200 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 19:48:11,200 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12348 states and 17754 transitions.
[2020-05-30 19:48:11,214 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:11,215 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:11,215 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:11,216 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:11,216 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND FALSE  !(gas > 2300)
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:11,220 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:11,221 INFO  L82        PathProgramCache]: Analyzing trace with hash -1871641507, now seen corresponding path program 1 times
[2020-05-30 19:48:11,221 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:11,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:11,284 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:11,358 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:11,358 INFO  L82        PathProgramCache]: Analyzing trace with hash 1028800309, now seen corresponding path program 1 times
[2020-05-30 19:48:11,358 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:11,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:11,381 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 19:48:11,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:48:11,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 19:48:11,381 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 19:48:11,381 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 19:48:11,381 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=50, Unknown=0, NotChecked=0, Total=72
[2020-05-30 19:48:11,381 INFO  L87              Difference]: Start difference. First operand 12348 states and 17754 transitions. cyclomatic complexity: 5412 Second operand 9 states.
[2020-05-30 19:48:17,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:17,843 INFO  L93              Difference]: Finished difference Result 13969 states and 20296 transitions.
[2020-05-30 19:48:17,843 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 19:48:17,843 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13969 states and 20296 transitions.
[2020-05-30 19:48:17,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 19:48:17,934 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13969 states to 13813 states and 20072 transitions.
[2020-05-30 19:48:17,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 52
[2020-05-30 19:48:17,935 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 52
[2020-05-30 19:48:17,935 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13813 states and 20072 transitions.
[2020-05-30 19:48:17,946 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:17,946 INFO  L728         BuchiCegarLoop]: Abstraction has 13813 states and 20072 transitions.
[2020-05-30 19:48:17,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13813 states and 20072 transitions.
[2020-05-30 19:48:18,030 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13813 to 12348.
[2020-05-30 19:48:18,030 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12348 states.
[2020-05-30 19:48:18,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12348 states to 12348 states and 17744 transitions.
[2020-05-30 19:48:18,051 INFO  L751         BuchiCegarLoop]: Abstraction has 12348 states and 17744 transitions.
[2020-05-30 19:48:18,051 INFO  L631         BuchiCegarLoop]: Abstraction has 12348 states and 17744 transitions.
[2020-05-30 19:48:18,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 19:48:18,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12348 states and 17744 transitions.
[2020-05-30 19:48:18,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:18,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:18,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:18,067 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:18,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND TRUE   DType[to] == EPXCrowdsale
[L3111]        CALL        call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L2307]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2308]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2309]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2310]                    gas := gas - 4;
[L2311]        CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L2311]        RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2312]        COND FALSE  !(revert)
[L3111]        RET         call FallbackMethod_EPXCrowdsale__success(to, from, amount);
[L3112]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:18,073 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:18,073 INFO  L82        PathProgramCache]: Analyzing trace with hash -1871641507, now seen corresponding path program 2 times
[2020-05-30 19:48:18,073 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:18,101 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:18,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:18,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:18,194 INFO  L82        PathProgramCache]: Analyzing trace with hash -119683349, now seen corresponding path program 1 times
[2020-05-30 19:48:18,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:18,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:18,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 19:48:18,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:48:18,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [32] imperfect sequences [] total 32
[2020-05-30 19:48:18,286 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 19:48:18,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-05-30 19:48:18,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=412, Invalid=580, Unknown=0, NotChecked=0, Total=992
[2020-05-30 19:48:18,287 INFO  L87              Difference]: Start difference. First operand 12348 states and 17744 transitions. cyclomatic complexity: 5402 Second operand 32 states.
[2020-05-30 19:48:30,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:30,594 INFO  L93              Difference]: Finished difference Result 14741 states and 21526 transitions.
[2020-05-30 19:48:30,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 19:48:30,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14741 states and 21526 transitions.
[2020-05-30 19:48:30,638 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 28
[2020-05-30 19:48:30,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14741 states to 14113 states and 20858 transitions.
[2020-05-30 19:48:30,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 46
[2020-05-30 19:48:30,686 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 46
[2020-05-30 19:48:30,686 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14113 states and 20858 transitions.
[2020-05-30 19:48:30,698 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:30,698 INFO  L728         BuchiCegarLoop]: Abstraction has 14113 states and 20858 transitions.
[2020-05-30 19:48:30,705 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14113 states and 20858 transitions.
[2020-05-30 19:48:30,777 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14113 to 11624.
[2020-05-30 19:48:30,777 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11624 states.
[2020-05-30 19:48:30,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11624 states to 11624 states and 16916 transitions.
[2020-05-30 19:48:30,796 INFO  L751         BuchiCegarLoop]: Abstraction has 11624 states and 16916 transitions.
[2020-05-30 19:48:30,796 INFO  L631         BuchiCegarLoop]: Abstraction has 11624 states and 16916 transitions.
[2020-05-30 19:48:30,796 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 19:48:30,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11624 states and 16916 transitions.
[2020-05-30 19:48:30,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-30 19:48:30,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:30,810 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:30,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:30,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:30,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:30,816 INFO  L82        PathProgramCache]: Analyzing trace with hash 1179608766, now seen corresponding path program 3 times
[2020-05-30 19:48:30,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:30,848 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:30,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:30,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:30,939 INFO  L82        PathProgramCache]: Analyzing trace with hash 1028447427, now seen corresponding path program 1 times
[2020-05-30 19:48:30,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:30,949 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:30,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:30,973 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:30,973 INFO  L82        PathProgramCache]: Analyzing trace with hash -1722979994, now seen corresponding path program 1 times
[2020-05-30 19:48:30,973 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:31,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:31,157 INFO  L134       CoverageAnalysis]: Checked inductivity of 230 backedges. 14 proven. 34 refuted. 0 times theorem prover too weak. 182 trivial. 0 not checked.
[2020-05-30 19:48:31,158 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:48:31,158 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-05-30 19:48:31,158 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-30 19:48:31,158 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-30 19:48:31,158 INFO  L87              Difference]: Start difference. First operand 11624 states and 16916 transitions. cyclomatic complexity: 5298 Second operand 9 states.
[2020-05-30 19:48:35,940 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:35,941 INFO  L93              Difference]: Finished difference Result 9938 states and 13163 transitions.
[2020-05-30 19:48:35,941 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 19:48:35,941 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9938 states and 13163 transitions.
[2020-05-30 19:48:35,956 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 19:48:35,974 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9938 states to 9938 states and 13163 transitions.
[2020-05-30 19:48:35,974 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 17
[2020-05-30 19:48:35,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 17
[2020-05-30 19:48:35,975 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9938 states and 13163 transitions.
[2020-05-30 19:48:35,980 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:35,980 INFO  L728         BuchiCegarLoop]: Abstraction has 9938 states and 13163 transitions.
[2020-05-30 19:48:35,984 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9938 states and 13163 transitions.
[2020-05-30 19:48:36,024 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9938 to 9826.
[2020-05-30 19:48:36,024 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9826 states.
[2020-05-30 19:48:36,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9826 states to 9826 states and 13021 transitions.
[2020-05-30 19:48:36,035 INFO  L751         BuchiCegarLoop]: Abstraction has 9826 states and 13021 transitions.
[2020-05-30 19:48:36,035 INFO  L631         BuchiCegarLoop]: Abstraction has 9826 states and 13021 transitions.
[2020-05-30 19:48:36,035 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 19:48:36,035 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9826 states and 13021 transitions.
[2020-05-30 19:48:36,044 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-30 19:48:36,044 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:36,044 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:36,045 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:36,045 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:36,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:36,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -1871641507, now seen corresponding path program 3 times
[2020-05-30 19:48:36,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:36,076 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:36,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:36,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:36,164 INFO  L82        PathProgramCache]: Analyzing trace with hash 1749923399, now seen corresponding path program 1 times
[2020-05-30 19:48:36,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:36,170 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:36,176 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:48:36,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:36,184 INFO  L82        PathProgramCache]: Analyzing trace with hash -1866252693, now seen corresponding path program 1 times
[2020-05-30 19:48:36,184 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:36,206 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:36,703 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 59 proven. 54 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-05-30 19:48:36,703 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:48:36,703 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-30 19:48:36,704 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-30 19:48:36,704 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=1162, Unknown=0, NotChecked=0, Total=1260
[2020-05-30 19:48:36,704 INFO  L87              Difference]: Start difference. First operand 9826 states and 13021 transitions. cyclomatic complexity: 3202 Second operand 36 states.
[2020-05-30 19:48:57,965 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:48:57,965 INFO  L93              Difference]: Finished difference Result 13768 states and 18887 transitions.
[2020-05-30 19:48:57,965 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-05-30 19:48:57,966 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13768 states and 18887 transitions.
[2020-05-30 19:48:58,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 58
[2020-05-30 19:48:58,085 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13768 states to 13740 states and 18831 transitions.
[2020-05-30 19:48:58,085 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 53
[2020-05-30 19:48:58,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 53
[2020-05-30 19:48:58,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13740 states and 18831 transitions.
[2020-05-30 19:48:58,100 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:48:58,100 INFO  L728         BuchiCegarLoop]: Abstraction has 13740 states and 18831 transitions.
[2020-05-30 19:48:58,108 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13740 states and 18831 transitions.
[2020-05-30 19:48:58,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13740 to 13507.
[2020-05-30 19:48:58,253 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13507 states.
[2020-05-30 19:48:58,275 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13507 states to 13507 states and 18379 transitions.
[2020-05-30 19:48:58,276 INFO  L751         BuchiCegarLoop]: Abstraction has 13507 states and 18379 transitions.
[2020-05-30 19:48:58,276 INFO  L631         BuchiCegarLoop]: Abstraction has 13507 states and 18379 transitions.
[2020-05-30 19:48:58,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-30 19:48:58,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13507 states and 18379 transitions.
[2020-05-30 19:48:58,289 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 44
[2020-05-30 19:48:58,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:48:58,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:48:58,291 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:48:58,291 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:48:58,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:48:58,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 462224578, now seen corresponding path program 1 times
[2020-05-30 19:48:58,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:48:58,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:48:58,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 315 backedges. 3 proven. 118 refuted. 0 times theorem prover too weak. 194 trivial. 0 not checked.
[2020-05-30 19:48:58,459 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:48:58,459 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:48:58,459 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:48:58,459 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:48:58,459 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:48:58,460 INFO  L87              Difference]: Start difference. First operand 13507 states and 18379 transitions. cyclomatic complexity: 4884 Second operand 11 states.
[2020-05-30 19:49:02,475 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:49:02,475 INFO  L93              Difference]: Finished difference Result 14388 states and 19568 transitions.
[2020-05-30 19:49:02,475 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 19:49:02,476 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14388 states and 19568 transitions.
[2020-05-30 19:49:02,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 44
[2020-05-30 19:49:02,566 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14388 states to 14366 states and 19526 transitions.
[2020-05-30 19:49:02,567 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 51
[2020-05-30 19:49:02,567 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 51
[2020-05-30 19:49:02,567 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14366 states and 19526 transitions.
[2020-05-30 19:49:02,579 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:49:02,579 INFO  L728         BuchiCegarLoop]: Abstraction has 14366 states and 19526 transitions.
[2020-05-30 19:49:02,587 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14366 states and 19526 transitions.
[2020-05-30 19:49:02,667 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14366 to 13627.
[2020-05-30 19:49:02,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13627 states.
[2020-05-30 19:49:02,692 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13627 states to 13627 states and 18554 transitions.
[2020-05-30 19:49:02,692 INFO  L751         BuchiCegarLoop]: Abstraction has 13627 states and 18554 transitions.
[2020-05-30 19:49:02,692 INFO  L631         BuchiCegarLoop]: Abstraction has 13627 states and 18554 transitions.
[2020-05-30 19:49:02,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-30 19:49:02,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13627 states and 18554 transitions.
[2020-05-30 19:49:02,707 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 44
[2020-05-30 19:49:02,708 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:49:02,708 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:49:02,710 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:49:02,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:49:02,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:49:02,718 INFO  L82        PathProgramCache]: Analyzing trace with hash -701885183, now seen corresponding path program 1 times
[2020-05-30 19:49:02,718 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:49:02,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:49:02,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 303 backedges. 36 proven. 106 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-05-30 19:49:02,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:49:02,878 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:49:02,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:49:02,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:49:02,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:49:02,878 INFO  L87              Difference]: Start difference. First operand 13627 states and 18554 transitions. cyclomatic complexity: 4939 Second operand 11 states.
[2020-05-30 19:49:08,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:49:08,028 INFO  L93              Difference]: Finished difference Result 17397 states and 23834 transitions.
[2020-05-30 19:49:08,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 19:49:08,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17397 states and 23834 transitions.
[2020-05-30 19:49:08,077 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 19:49:08,137 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17397 states to 17397 states and 23834 transitions.
[2020-05-30 19:49:08,138 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 67
[2020-05-30 19:49:08,138 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 67
[2020-05-30 19:49:08,138 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17397 states and 23834 transitions.
[2020-05-30 19:49:08,153 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:49:08,153 INFO  L728         BuchiCegarLoop]: Abstraction has 17397 states and 23834 transitions.
[2020-05-30 19:49:08,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17397 states and 23834 transitions.
[2020-05-30 19:49:08,260 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17397 to 16928.
[2020-05-30 19:49:08,260 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16928 states.
[2020-05-30 19:49:08,291 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16928 states to 16928 states and 23236 transitions.
[2020-05-30 19:49:08,291 INFO  L751         BuchiCegarLoop]: Abstraction has 16928 states and 23236 transitions.
[2020-05-30 19:49:08,292 INFO  L631         BuchiCegarLoop]: Abstraction has 16928 states and 23236 transitions.
[2020-05-30 19:49:08,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-30 19:49:08,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16928 states and 23236 transitions.
[2020-05-30 19:49:08,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 19:49:08,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:49:08,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:49:08,313 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:49:08,313 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:49:08,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:49:08,320 INFO  L82        PathProgramCache]: Analyzing trace with hash 1839037353, now seen corresponding path program 1 times
[2020-05-30 19:49:08,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:49:08,347 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:49:08,469 INFO  L134       CoverageAnalysis]: Checked inductivity of 293 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 268 trivial. 0 not checked.
[2020-05-30 19:49:08,469 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:49:08,469 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-30 19:49:08,469 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:49:08,470 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-30 19:49:08,470 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-05-30 19:49:08,470 INFO  L87              Difference]: Start difference. First operand 16928 states and 23236 transitions. cyclomatic complexity: 6321 Second operand 6 states.
[2020-05-30 19:49:09,226 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:49:09,226 INFO  L93              Difference]: Finished difference Result 17346 states and 23845 transitions.
[2020-05-30 19:49:09,227 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-30 19:49:09,227 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17346 states and 23845 transitions.
[2020-05-30 19:49:09,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 19:49:09,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17346 states to 17346 states and 23845 transitions.
[2020-05-30 19:49:09,337 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 87
[2020-05-30 19:49:09,337 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 87
[2020-05-30 19:49:09,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17346 states and 23845 transitions.
[2020-05-30 19:49:09,352 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:49:09,352 INFO  L728         BuchiCegarLoop]: Abstraction has 17346 states and 23845 transitions.
[2020-05-30 19:49:09,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17346 states and 23845 transitions.
[2020-05-30 19:49:09,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17346 to 17217.
[2020-05-30 19:49:09,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17217 states.
[2020-05-30 19:49:09,490 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17217 states to 17217 states and 23572 transitions.
[2020-05-30 19:49:09,491 INFO  L751         BuchiCegarLoop]: Abstraction has 17217 states and 23572 transitions.
[2020-05-30 19:49:09,491 INFO  L631         BuchiCegarLoop]: Abstraction has 17217 states and 23572 transitions.
[2020-05-30 19:49:09,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-30 19:49:09,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17217 states and 23572 transitions.
[2020-05-30 19:49:09,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 60
[2020-05-30 19:49:09,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:49:09,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:49:09,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:49:09,510 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:49:09,514 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:49:09,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 1995893272, now seen corresponding path program 1 times
[2020-05-30 19:49:09,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:49:09,538 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:49:09,697 INFO  L134       CoverageAnalysis]: Checked inductivity of 513 backedges. 94 proven. 113 refuted. 0 times theorem prover too weak. 306 trivial. 0 not checked.
[2020-05-30 19:49:09,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:49:09,698 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:49:09,698 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:49:09,698 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:49:09,698 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:49:09,699 INFO  L87              Difference]: Start difference. First operand 17217 states and 23572 transitions. cyclomatic complexity: 6368 Second operand 11 states.
[2020-05-30 19:49:15,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:49:15,568 INFO  L93              Difference]: Finished difference Result 22185 states and 30553 transitions.
[2020-05-30 19:49:15,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 19:49:15,568 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22185 states and 30553 transitions.
[2020-05-30 19:49:15,634 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:49:15,718 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22185 states to 22185 states and 30553 transitions.
[2020-05-30 19:49:15,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 117
[2020-05-30 19:49:15,719 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 117
[2020-05-30 19:49:15,719 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22185 states and 30553 transitions.
[2020-05-30 19:49:15,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:49:15,740 INFO  L728         BuchiCegarLoop]: Abstraction has 22185 states and 30553 transitions.
[2020-05-30 19:49:15,750 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22185 states and 30553 transitions.
[2020-05-30 19:49:15,882 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22185 to 21355.
[2020-05-30 19:49:15,882 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21355 states.
[2020-05-30 19:49:15,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21355 states to 21355 states and 29475 transitions.
[2020-05-30 19:49:15,924 INFO  L751         BuchiCegarLoop]: Abstraction has 21355 states and 29475 transitions.
[2020-05-30 19:49:15,924 INFO  L631         BuchiCegarLoop]: Abstraction has 21355 states and 29475 transitions.
[2020-05-30 19:49:15,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-30 19:49:15,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21355 states and 29475 transitions.
[2020-05-30 19:49:15,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:49:15,946 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:49:15,947 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:49:15,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:49:15,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:49:15,956 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:49:15,956 INFO  L82        PathProgramCache]: Analyzing trace with hash -1218380313, now seen corresponding path program 1 times
[2020-05-30 19:49:15,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:49:15,981 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:49:16,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 525 backedges. 10 proven. 258 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-05-30 19:49:16,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:49:16,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 19:49:16,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:49:16,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 19:49:16,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-05-30 19:49:16,187 INFO  L87              Difference]: Start difference. First operand 21355 states and 29475 transitions. cyclomatic complexity: 8133 Second operand 12 states.
[2020-05-30 19:49:20,651 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:49:20,651 INFO  L93              Difference]: Finished difference Result 21710 states and 29974 transitions.
[2020-05-30 19:49:20,651 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 19:49:20,652 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21710 states and 29974 transitions.
[2020-05-30 19:49:20,717 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:49:20,810 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21710 states to 21688 states and 29932 transitions.
[2020-05-30 19:49:20,810 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 117
[2020-05-30 19:49:20,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 117
[2020-05-30 19:49:20,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21688 states and 29932 transitions.
[2020-05-30 19:49:20,832 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:49:20,832 INFO  L728         BuchiCegarLoop]: Abstraction has 21688 states and 29932 transitions.
[2020-05-30 19:49:20,843 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21688 states and 29932 transitions.
[2020-05-30 19:49:20,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21688 to 21378.
[2020-05-30 19:49:20,970 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21378 states.
[2020-05-30 19:49:21,015 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21378 states to 21378 states and 29510 transitions.
[2020-05-30 19:49:21,015 INFO  L751         BuchiCegarLoop]: Abstraction has 21378 states and 29510 transitions.
[2020-05-30 19:49:21,015 INFO  L631         BuchiCegarLoop]: Abstraction has 21378 states and 29510 transitions.
[2020-05-30 19:49:21,015 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-30 19:49:21,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21378 states and 29510 transitions.
[2020-05-30 19:49:21,037 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:49:21,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:49:21,038 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:49:21,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:49:21,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:49:21,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:49:21,047 INFO  L82        PathProgramCache]: Analyzing trace with hash -1168325376, now seen corresponding path program 1 times
[2020-05-30 19:49:21,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:49:21,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:49:21,603 INFO  L134       CoverageAnalysis]: Checked inductivity of 499 backedges. 27 proven. 48 refuted. 0 times theorem prover too weak. 424 trivial. 0 not checked.
[2020-05-30 19:49:21,603 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:49:21,603 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-05-30 19:49:21,604 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:49:21,604 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-05-30 19:49:21,604 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=676, Unknown=0, NotChecked=0, Total=756
[2020-05-30 19:49:21,604 INFO  L87              Difference]: Start difference. First operand 21378 states and 29510 transitions. cyclomatic complexity: 8147 Second operand 28 states.
[2020-05-30 19:50:01,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:01,599 INFO  L93              Difference]: Finished difference Result 45783 states and 62814 transitions.
[2020-05-30 19:50:01,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 68 states. 
[2020-05-30 19:50:01,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 45783 states and 62814 transitions.
[2020-05-30 19:50:01,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:02,021 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 45783 states to 44292 states and 60984 transitions.
[2020-05-30 19:50:02,022 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 134
[2020-05-30 19:50:02,022 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 134
[2020-05-30 19:50:02,022 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44292 states and 60984 transitions.
[2020-05-30 19:50:02,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:02,066 INFO  L728         BuchiCegarLoop]: Abstraction has 44292 states and 60984 transitions.
[2020-05-30 19:50:02,084 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44292 states and 60984 transitions.
[2020-05-30 19:50:02,410 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44292 to 41611.
[2020-05-30 19:50:02,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 41611 states.
[2020-05-30 19:50:02,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 41611 states to 41611 states and 56959 transitions.
[2020-05-30 19:50:02,498 INFO  L751         BuchiCegarLoop]: Abstraction has 41611 states and 56959 transitions.
[2020-05-30 19:50:02,498 INFO  L631         BuchiCegarLoop]: Abstraction has 41611 states and 56959 transitions.
[2020-05-30 19:50:02,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-30 19:50:02,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 41611 states and 56959 transitions.
[2020-05-30 19:50:02,549 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:02,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:02,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:02,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:02,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:02,561 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:02,562 INFO  L82        PathProgramCache]: Analyzing trace with hash 746248095, now seen corresponding path program 1 times
[2020-05-30 19:50:02,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:02,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:02,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 358 backedges. 28 proven. 0 refuted. 0 times theorem prover too weak. 330 trivial. 0 not checked.
[2020-05-30 19:50:02,759 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 19:50:02,759 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 19:50:02,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:02,760 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 19:50:02,760 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=70, Unknown=0, NotChecked=0, Total=90
[2020-05-30 19:50:02,760 INFO  L87              Difference]: Start difference. First operand 41611 states and 56959 transitions. cyclomatic complexity: 15376 Second operand 10 states.
[2020-05-30 19:50:12,635 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:12,635 INFO  L93              Difference]: Finished difference Result 42168 states and 57769 transitions.
[2020-05-30 19:50:12,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-05-30 19:50:12,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42168 states and 57769 transitions.
[2020-05-30 19:50:12,759 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:12,933 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42168 states to 42168 states and 57769 transitions.
[2020-05-30 19:50:12,933 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 108
[2020-05-30 19:50:12,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 108
[2020-05-30 19:50:12,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42168 states and 57769 transitions.
[2020-05-30 19:50:12,973 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:12,973 INFO  L728         BuchiCegarLoop]: Abstraction has 42168 states and 57769 transitions.
[2020-05-30 19:50:12,992 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42168 states and 57769 transitions.
[2020-05-30 19:50:13,319 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42168 to 41047.
[2020-05-30 19:50:13,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 41047 states.
[2020-05-30 19:50:13,400 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 41047 states to 41047 states and 55965 transitions.
[2020-05-30 19:50:13,400 INFO  L751         BuchiCegarLoop]: Abstraction has 41047 states and 55965 transitions.
[2020-05-30 19:50:13,400 INFO  L631         BuchiCegarLoop]: Abstraction has 41047 states and 55965 transitions.
[2020-05-30 19:50:13,400 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-30 19:50:13,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 41047 states and 55965 transitions.
[2020-05-30 19:50:13,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:13,446 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:13,446 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:13,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:13,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND FALSE  !(gas > 2300)
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:13,457 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:13,457 INFO  L82        PathProgramCache]: Analyzing trace with hash -565289558, now seen corresponding path program 1 times
[2020-05-30 19:50:13,457 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:13,488 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:13,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 525 backedges. 89 proven. 26 refuted. 0 times theorem prover too weak. 410 trivial. 0 not checked.
[2020-05-30 19:50:13,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:50:13,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:50:13,827 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:13,827 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:50:13,827 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:50:13,827 INFO  L87              Difference]: Start difference. First operand 41047 states and 55965 transitions. cyclomatic complexity: 14946 Second operand 11 states.
[2020-05-30 19:50:19,756 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:19,756 INFO  L93              Difference]: Finished difference Result 47169 states and 66874 transitions.
[2020-05-30 19:50:19,756 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 19:50:19,756 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 47169 states and 66874 transitions.
[2020-05-30 19:50:19,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 148
[2020-05-30 19:50:20,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 47169 states to 46800 states and 66263 transitions.
[2020-05-30 19:50:20,150 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 108
[2020-05-30 19:50:20,150 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 108
[2020-05-30 19:50:20,150 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 46800 states and 66263 transitions.
[2020-05-30 19:50:20,203 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:20,203 INFO  L728         BuchiCegarLoop]: Abstraction has 46800 states and 66263 transitions.
[2020-05-30 19:50:20,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 46800 states and 66263 transitions.
[2020-05-30 19:50:20,576 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 46800 to 41047.
[2020-05-30 19:50:20,576 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 41047 states.
[2020-05-30 19:50:20,656 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 41047 states to 41047 states and 55941 transitions.
[2020-05-30 19:50:20,656 INFO  L751         BuchiCegarLoop]: Abstraction has 41047 states and 55941 transitions.
[2020-05-30 19:50:20,656 INFO  L631         BuchiCegarLoop]: Abstraction has 41047 states and 55941 transitions.
[2020-05-30 19:50:20,657 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-30 19:50:20,657 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 41047 states and 55941 transitions.
[2020-05-30 19:50:20,703 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:20,703 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:20,703 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:20,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:20,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND FALSE  !(Balance[from] >= amount)
[L3606]                    success := false;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:20,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:20,714 INFO  L82        PathProgramCache]: Analyzing trace with hash -480048984, now seen corresponding path program 1 times
[2020-05-30 19:50:20,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:20,748 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:20,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 525 backedges. 37 proven. 7 refuted. 0 times theorem prover too weak. 481 trivial. 0 not checked.
[2020-05-30 19:50:20,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:50:20,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-30 19:50:20,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:20,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 19:50:20,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 19:50:20,927 INFO  L87              Difference]: Start difference. First operand 41047 states and 55941 transitions. cyclomatic complexity: 14922 Second operand 4 states.
[2020-05-30 19:50:21,146 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:21,146 INFO  L93              Difference]: Finished difference Result 41074 states and 55957 transitions.
[2020-05-30 19:50:21,146 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 19:50:21,147 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 41074 states and 55957 transitions.
[2020-05-30 19:50:21,261 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:21,425 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 41074 states to 40734 states and 55489 transitions.
[2020-05-30 19:50:21,425 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 108
[2020-05-30 19:50:21,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 108
[2020-05-30 19:50:21,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 40734 states and 55489 transitions.
[2020-05-30 19:50:21,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:21,463 INFO  L728         BuchiCegarLoop]: Abstraction has 40734 states and 55489 transitions.
[2020-05-30 19:50:21,482 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 40734 states and 55489 transitions.
[2020-05-30 19:50:22,520 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 40734 to 40734.
[2020-05-30 19:50:22,521 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 40734 states.
[2020-05-30 19:50:22,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 40734 states to 40734 states and 55489 transitions.
[2020-05-30 19:50:22,586 INFO  L751         BuchiCegarLoop]: Abstraction has 40734 states and 55489 transitions.
[2020-05-30 19:50:22,586 INFO  L631         BuchiCegarLoop]: Abstraction has 40734 states and 55489 transitions.
[2020-05-30 19:50:22,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-30 19:50:22,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 40734 states and 55489 transitions.
[2020-05-30 19:50:22,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 84
[2020-05-30 19:50:22,627 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:22,627 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:22,630 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:22,630 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:22,719 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:22,719 INFO  L82        PathProgramCache]: Analyzing trace with hash 966771294, now seen corresponding path program 1 times
[2020-05-30 19:50:22,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:22,744 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:22,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 525 backedges. 121 proven. 179 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-05-30 19:50:22,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:50:22,953 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 19:50:22,953 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:22,953 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 19:50:22,953 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-05-30 19:50:22,953 INFO  L87              Difference]: Start difference. First operand 40734 states and 55489 transitions. cyclomatic complexity: 14783 Second operand 14 states.
[2020-05-30 19:50:28,580 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:28,580 INFO  L93              Difference]: Finished difference Result 42717 states and 59222 transitions.
[2020-05-30 19:50:28,580 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 19:50:28,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42717 states and 59222 transitions.
[2020-05-30 19:50:28,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 118
[2020-05-30 19:50:28,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42717 states to 42629 states and 59104 transitions.
[2020-05-30 19:50:28,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 130
[2020-05-30 19:50:28,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 130
[2020-05-30 19:50:28,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42629 states and 59104 transitions.
[2020-05-30 19:50:28,911 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:28,911 INFO  L728         BuchiCegarLoop]: Abstraction has 42629 states and 59104 transitions.
[2020-05-30 19:50:28,927 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42629 states and 59104 transitions.
[2020-05-30 19:50:29,228 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42629 to 41382.
[2020-05-30 19:50:29,228 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 41382 states.
[2020-05-30 19:50:29,321 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 41382 states to 41382 states and 57513 transitions.
[2020-05-30 19:50:29,321 INFO  L751         BuchiCegarLoop]: Abstraction has 41382 states and 57513 transitions.
[2020-05-30 19:50:29,321 INFO  L631         BuchiCegarLoop]: Abstraction has 41382 states and 57513 transitions.
[2020-05-30 19:50:29,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-30 19:50:29,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 41382 states and 57513 transitions.
[2020-05-30 19:50:29,369 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 118
[2020-05-30 19:50:29,369 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:29,369 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:29,372 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:29,372 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:29,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:29,379 INFO  L82        PathProgramCache]: Analyzing trace with hash -20122914, now seen corresponding path program 1 times
[2020-05-30 19:50:29,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:29,407 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:29,668 INFO  L134       CoverageAnalysis]: Checked inductivity of 304 backedges. 164 proven. 42 refuted. 0 times theorem prover too weak. 98 trivial. 0 not checked.
[2020-05-30 19:50:29,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:50:29,668 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-30 19:50:29,668 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:29,669 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-30 19:50:29,669 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=265, Unknown=0, NotChecked=0, Total=306
[2020-05-30 19:50:29,669 INFO  L87              Difference]: Start difference. First operand 41382 states and 57513 transitions. cyclomatic complexity: 16163 Second operand 18 states.
[2020-05-30 19:50:36,286 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:50:36,286 INFO  L93              Difference]: Finished difference Result 50293 states and 69259 transitions.
[2020-05-30 19:50:36,286 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-05-30 19:50:36,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 50293 states and 69259 transitions.
[2020-05-30 19:50:36,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 152
[2020-05-30 19:50:36,730 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 50293 states to 49888 states and 68721 transitions.
[2020-05-30 19:50:36,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 162
[2020-05-30 19:50:36,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 162
[2020-05-30 19:50:36,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 49888 states and 68721 transitions.
[2020-05-30 19:50:36,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:50:36,789 INFO  L728         BuchiCegarLoop]: Abstraction has 49888 states and 68721 transitions.
[2020-05-30 19:50:36,812 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 49888 states and 68721 transitions.
[2020-05-30 19:50:37,186 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 49888 to 48576.
[2020-05-30 19:50:37,186 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 48576 states.
[2020-05-30 19:50:37,303 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 48576 states to 48576 states and 67131 transitions.
[2020-05-30 19:50:37,303 INFO  L751         BuchiCegarLoop]: Abstraction has 48576 states and 67131 transitions.
[2020-05-30 19:50:37,304 INFO  L631         BuchiCegarLoop]: Abstraction has 48576 states and 67131 transitions.
[2020-05-30 19:50:37,304 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-30 19:50:37,304 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 48576 states and 67131 transitions.
[2020-05-30 19:50:37,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 152
[2020-05-30 19:50:37,362 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:50:37,362 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:50:37,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:50:37,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := -349424081;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:50:37,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:50:37,370 INFO  L82        PathProgramCache]: Analyzing trace with hash -518953810, now seen corresponding path program 1 times
[2020-05-30 19:50:37,370 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:50:37,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:50:38,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 790 backedges. 31 proven. 135 refuted. 0 times theorem prover too weak. 624 trivial. 0 not checked.
[2020-05-30 19:50:38,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:50:38,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-05-30 19:50:38,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:50:38,309 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-05-30 19:50:38,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=141, Invalid=1665, Unknown=0, NotChecked=0, Total=1806
[2020-05-30 19:50:38,309 INFO  L87              Difference]: Start difference. First operand 48576 states and 67131 transitions. cyclomatic complexity: 18591 Second operand 43 states.
[2020-05-30 19:51:27,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:51:27,858 INFO  L93              Difference]: Finished difference Result 50325 states and 70055 transitions.
[2020-05-30 19:51:27,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 75 states. 
[2020-05-30 19:51:27,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 50325 states and 70055 transitions.
[2020-05-30 19:51:28,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 152
[2020-05-30 19:51:28,271 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 50325 states to 50325 states and 70055 transitions.
[2020-05-30 19:51:28,272 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 162
[2020-05-30 19:51:28,272 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 162
[2020-05-30 19:51:28,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 50325 states and 70055 transitions.
[2020-05-30 19:51:28,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:51:28,330 INFO  L728         BuchiCegarLoop]: Abstraction has 50325 states and 70055 transitions.
[2020-05-30 19:51:28,350 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 50325 states and 70055 transitions.
[2020-05-30 19:51:28,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 50325 to 48720.
[2020-05-30 19:51:28,710 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 48720 states.
[2020-05-30 19:51:28,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 48720 states to 48720 states and 67894 transitions.
[2020-05-30 19:51:28,825 INFO  L751         BuchiCegarLoop]: Abstraction has 48720 states and 67894 transitions.
[2020-05-30 19:51:28,825 INFO  L631         BuchiCegarLoop]: Abstraction has 48720 states and 67894 transitions.
[2020-05-30 19:51:28,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-30 19:51:28,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 48720 states and 67894 transitions.
[2020-05-30 19:51:28,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 152
[2020-05-30 19:51:28,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:51:28,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:51:28,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:51:28,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this]
[L2869]                    gas := gas - 20317;
[L2870]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2871]                    gas := gas - 20267;
[L2872]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2873]                    gas := gas - 409;
[L2874]                    CurrentStatus_EPXCrowdsale[this] := -100129202;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := -349424081;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:51:28,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:51:28,893 INFO  L82        PathProgramCache]: Analyzing trace with hash -1385134438, now seen corresponding path program 2 times
[2020-05-30 19:51:28,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:51:28,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:51:29,251 INFO  L134       CoverageAnalysis]: Checked inductivity of 525 backedges. 252 proven. 59 refuted. 0 times theorem prover too weak. 214 trivial. 0 not checked.
[2020-05-30 19:51:29,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:51:29,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-05-30 19:51:29,251 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:51:29,251 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-30 19:51:29,251 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=203, Unknown=0, NotChecked=0, Total=240
[2020-05-30 19:51:29,251 INFO  L87              Difference]: Start difference. First operand 48720 states and 67894 transitions. cyclomatic complexity: 19228 Second operand 16 states.
[2020-05-30 19:51:35,579 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:51:35,580 INFO  L93              Difference]: Finished difference Result 55473 states and 77510 transitions.
[2020-05-30 19:51:35,580 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-05-30 19:51:35,580 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 55473 states and 77510 transitions.
[2020-05-30 19:51:35,778 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 192
[2020-05-30 19:51:36,074 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 55473 states to 55473 states and 77490 transitions.
[2020-05-30 19:51:36,074 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 174
[2020-05-30 19:51:36,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-05-30 19:51:36,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 55473 states and 77490 transitions.
[2020-05-30 19:51:36,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:51:36,138 INFO  L728         BuchiCegarLoop]: Abstraction has 55473 states and 77490 transitions.
[2020-05-30 19:51:36,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 55473 states and 77490 transitions.
[2020-05-30 19:51:36,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 55473 to 54794.
[2020-05-30 19:51:36,582 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 54794 states.
[2020-05-30 19:51:36,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 54794 states to 54794 states and 76410 transitions.
[2020-05-30 19:51:36,722 INFO  L751         BuchiCegarLoop]: Abstraction has 54794 states and 76410 transitions.
[2020-05-30 19:51:36,723 INFO  L631         BuchiCegarLoop]: Abstraction has 54794 states and 76410 transitions.
[2020-05-30 19:51:36,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-30 19:51:36,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 54794 states and 76410 transitions.
[2020-05-30 19:51:36,791 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 184
[2020-05-30 19:51:36,791 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:51:36,791 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:51:36,794 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:51:36,794 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:51:36,801 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:51:36,801 INFO  L82        PathProgramCache]: Analyzing trace with hash -1956762866, now seen corresponding path program 1 times
[2020-05-30 19:51:36,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:51:36,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:51:37,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 1014 backedges. 53 proven. 9 refuted. 0 times theorem prover too weak. 952 trivial. 0 not checked.
[2020-05-30 19:51:37,088 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:51:37,088 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:51:37,088 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:51:37,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 19:51:37,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 19:51:37,088 INFO  L87              Difference]: Start difference. First operand 54794 states and 76410 transitions. cyclomatic complexity: 21669 Second operand 7 states.
[2020-05-30 19:51:37,431 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:51:37,431 INFO  L93              Difference]: Finished difference Result 53625 states and 74840 transitions.
[2020-05-30 19:51:37,431 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-30 19:51:37,432 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 53625 states and 74840 transitions.
[2020-05-30 19:51:37,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 176
[2020-05-30 19:51:37,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 53625 states to 53600 states and 74788 transitions.
[2020-05-30 19:51:37,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 174
[2020-05-30 19:51:37,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-05-30 19:51:37,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53600 states and 74788 transitions.
[2020-05-30 19:51:37,990 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:51:37,990 INFO  L728         BuchiCegarLoop]: Abstraction has 53600 states and 74788 transitions.
[2020-05-30 19:51:38,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53600 states and 74788 transitions.
[2020-05-30 19:51:38,415 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53600 to 53600.
[2020-05-30 19:51:38,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53600 states.
[2020-05-30 19:51:38,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53600 states to 53600 states and 74788 transitions.
[2020-05-30 19:51:38,551 INFO  L751         BuchiCegarLoop]: Abstraction has 53600 states and 74788 transitions.
[2020-05-30 19:51:38,551 INFO  L631         BuchiCegarLoop]: Abstraction has 53600 states and 74788 transitions.
[2020-05-30 19:51:38,551 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-30 19:51:38,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53600 states and 74788 transitions.
[2020-05-30 19:51:38,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 176
[2020-05-30 19:51:38,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:51:38,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:51:38,621 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:51:38,621 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND TRUE   choice == 1
[L3902]                    gas := gas - 21000;
[L3903]        COND TRUE   gas >= 0
[L3905]                    assume msgvalue_MSG == 0;
[L3906]        CALL        call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L723]                     havoc __exception;
[L724]                     revert := false;
[L725]         COND FALSE  !(__exception)
[L758]         CALL        call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L3012]                    gas := gas - 1246;
[L3013]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L3014]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L3015]                    assume now >= 0;
[L3016]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L3017-L3018]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3019-L3024]  COND FALSE  !(!(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && isCrowdSaleClosed_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] > 0))
[L3030]                    gas := gas - 306;
[L3031]                    assume ethRefund_s797 >= 0;
[L3032-L3033]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3034]                    ethRefund_s797 := M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3035]                    gas := gas - 5103;
[L3036]                    assume M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3037-L3038]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] - M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3039]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3040-L3041]              sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := sum_balancesArray0[balancesArray_EPXCrowdsale[this]] + M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]][msgsender_MSG];
[L3042]                    gas := gas - 5103;
[L3043-L3044]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L3045-L3046]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3047]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := 0;
[L3048-L3049]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L3050]                    assert { :EventEmitted "Burn_EPXCrowdsale" } true;
[L3051]                    gas := gas - 35783;
[L3052]                    __var_18 := gas;
[L3053]        COND TRUE   gas > 2300
[L3055]                    gas := 2300;
[L3058]                    __var_18 := __var_18 - gas;
[L3059]                    assume ethRefund_s797 >= 0;
[L3060]        CALL        call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L3060]        RET         call __var_19 := send__success(this, msgsender_MSG, ethRefund_s797);
[L3061]        COND FALSE  !(!__var_19)
[L3067]                    gas := __var_18 + gas;
[L3068]                    assert { :EventEmitted "Refund_EPXCrowdsale" } true;
[L758]         RET         call refund_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L759]                     assume !revert && gas >= 0;
[L3906]        RET         call refund_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:51:38,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:51:38,628 INFO  L82        PathProgramCache]: Analyzing trace with hash 842038769, now seen corresponding path program 1 times
[2020-05-30 19:51:38,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:51:38,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:51:39,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 1027 backedges. 359 proven. 226 refuted. 0 times theorem prover too weak. 442 trivial. 0 not checked.
[2020-05-30 19:51:39,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:51:39,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-05-30 19:51:39,287 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:51:39,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-30 19:51:39,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=630, Unknown=0, NotChecked=0, Total=702
[2020-05-30 19:51:39,287 INFO  L87              Difference]: Start difference. First operand 53600 states and 74788 transitions. cyclomatic complexity: 21241 Second operand 27 states.
[2020-05-30 19:51:48,255 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:51:48,255 INFO  L93              Difference]: Finished difference Result 56104 states and 77371 transitions.
[2020-05-30 19:51:48,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-30 19:51:48,256 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 56104 states and 77371 transitions.
[2020-05-30 19:51:48,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 172
[2020-05-30 19:51:48,738 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 56104 states to 56104 states and 77365 transitions.
[2020-05-30 19:51:48,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 158
[2020-05-30 19:51:48,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 158
[2020-05-30 19:51:48,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 56104 states and 77365 transitions.
[2020-05-30 19:51:48,800 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:51:48,800 INFO  L728         BuchiCegarLoop]: Abstraction has 56104 states and 77365 transitions.
[2020-05-30 19:51:48,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 56104 states and 77365 transitions.
[2020-05-30 19:51:49,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 56104 to 55735.
[2020-05-30 19:51:49,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 55735 states.
[2020-05-30 19:51:49,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 55735 states to 55735 states and 76902 transitions.
[2020-05-30 19:51:49,392 INFO  L751         BuchiCegarLoop]: Abstraction has 55735 states and 76902 transitions.
[2020-05-30 19:51:49,392 INFO  L631         BuchiCegarLoop]: Abstraction has 55735 states and 76902 transitions.
[2020-05-30 19:51:49,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-30 19:51:49,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 55735 states and 76902 transitions.
[2020-05-30 19:51:49,461 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 172
[2020-05-30 19:51:49,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:51:49,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:51:49,464 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:51:49,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:51:49,470 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:51:49,470 INFO  L82        PathProgramCache]: Analyzing trace with hash 1909824469, now seen corresponding path program 1 times
[2020-05-30 19:51:49,470 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:51:49,517 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:51:50,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 113 proven. 77 refuted. 0 times theorem prover too weak. 599 trivial. 0 not checked.
[2020-05-30 19:51:50,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:51:50,278 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 19:51:50,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:51:50,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 19:51:50,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=953, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 19:51:50,279 INFO  L87              Difference]: Start difference. First operand 55735 states and 76902 transitions. cyclomatic complexity: 21220 Second operand 33 states.
[2020-05-30 19:52:20,591 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:52:20,591 INFO  L93              Difference]: Finished difference Result 58514 states and 81370 transitions.
[2020-05-30 19:52:20,591 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-30 19:52:20,591 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 58514 states and 81370 transitions.
[2020-05-30 19:52:20,812 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 172
[2020-05-30 19:52:21,135 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 58514 states to 58514 states and 81370 transitions.
[2020-05-30 19:52:21,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-05-30 19:52:21,136 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-05-30 19:52:21,136 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 58514 states and 81370 transitions.
[2020-05-30 19:52:21,206 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:52:21,206 INFO  L728         BuchiCegarLoop]: Abstraction has 58514 states and 81370 transitions.
[2020-05-30 19:52:21,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 58514 states and 81370 transitions.
[2020-05-30 19:52:21,689 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 58514 to 56094.
[2020-05-30 19:52:21,689 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 56094 states.
[2020-05-30 19:52:21,841 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 56094 states to 56094 states and 78229 transitions.
[2020-05-30 19:52:21,841 INFO  L751         BuchiCegarLoop]: Abstraction has 56094 states and 78229 transitions.
[2020-05-30 19:52:21,841 INFO  L631         BuchiCegarLoop]: Abstraction has 56094 states and 78229 transitions.
[2020-05-30 19:52:21,841 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-30 19:52:21,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 56094 states and 78229 transitions.
[2020-05-30 19:52:21,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 172
[2020-05-30 19:52:21,912 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:52:21,912 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:52:21,916 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:52:21,916 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:52:21,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:52:21,923 INFO  L82        PathProgramCache]: Analyzing trace with hash 1331424416, now seen corresponding path program 1 times
[2020-05-30 19:52:21,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:52:21,968 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:52:22,417 INFO  L134       CoverageAnalysis]: Checked inductivity of 1361 backedges. 60 proven. 32 refuted. 0 times theorem prover too weak. 1269 trivial. 0 not checked.
[2020-05-30 19:52:22,418 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:52:22,418 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:52:22,418 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:52:22,418 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 19:52:22,418 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 19:52:22,419 INFO  L87              Difference]: Start difference. First operand 56094 states and 78229 transitions. cyclomatic complexity: 22192 Second operand 8 states.
[2020-05-30 19:52:25,598 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:52:25,598 INFO  L93              Difference]: Finished difference Result 80560 states and 108875 transitions.
[2020-05-30 19:52:25,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 19:52:25,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 80560 states and 108875 transitions.
[2020-05-30 19:52:25,915 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 328
[2020-05-30 19:52:26,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 80560 states to 80560 states and 108875 transitions.
[2020-05-30 19:52:26,354 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 216
[2020-05-30 19:52:26,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 216
[2020-05-30 19:52:26,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 80560 states and 108875 transitions.
[2020-05-30 19:52:26,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:52:26,451 INFO  L728         BuchiCegarLoop]: Abstraction has 80560 states and 108875 transitions.
[2020-05-30 19:52:26,489 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 80560 states and 108875 transitions.
[2020-05-30 19:52:27,097 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 80560 to 80494.
[2020-05-30 19:52:27,098 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 80494 states.
[2020-05-30 19:52:27,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 80494 states to 80494 states and 108531 transitions.
[2020-05-30 19:52:27,308 INFO  L751         BuchiCegarLoop]: Abstraction has 80494 states and 108531 transitions.
[2020-05-30 19:52:27,308 INFO  L631         BuchiCegarLoop]: Abstraction has 80494 states and 108531 transitions.
[2020-05-30 19:52:27,308 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-30 19:52:27,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 80494 states and 108531 transitions.
[2020-05-30 19:52:27,407 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 328
[2020-05-30 19:52:27,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:52:27,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:52:27,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:52:27,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:52:27,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:52:27,417 INFO  L82        PathProgramCache]: Analyzing trace with hash -1344184468, now seen corresponding path program 1 times
[2020-05-30 19:52:27,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:52:27,459 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:52:28,407 INFO  L134       CoverageAnalysis]: Checked inductivity of 1068 backedges. 78 proven. 506 refuted. 0 times theorem prover too weak. 484 trivial. 0 not checked.
[2020-05-30 19:52:28,407 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:52:28,407 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-30 19:52:28,408 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:52:28,408 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-30 19:52:28,408 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=174, Invalid=1988, Unknown=0, NotChecked=0, Total=2162
[2020-05-30 19:52:28,408 INFO  L87              Difference]: Start difference. First operand 80494 states and 108531 transitions. cyclomatic complexity: 28097 Second operand 47 states.
[2020-05-30 19:52:54,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:52:54,685 INFO  L93              Difference]: Finished difference Result 81528 states and 112164 transitions.
[2020-05-30 19:52:54,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 51 states. 
[2020-05-30 19:52:54,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 81528 states and 112164 transitions.
[2020-05-30 19:52:55,009 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 432
[2020-05-30 19:52:55,513 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 81528 states to 81528 states and 112164 transitions.
[2020-05-30 19:52:55,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 216
[2020-05-30 19:52:55,514 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 216
[2020-05-30 19:52:55,514 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 81528 states and 112164 transitions.
[2020-05-30 19:52:55,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:52:55,611 INFO  L728         BuchiCegarLoop]: Abstraction has 81528 states and 112164 transitions.
[2020-05-30 19:52:55,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 81528 states and 112164 transitions.
[2020-05-30 19:52:56,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 81528 to 81124.
[2020-05-30 19:52:56,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 81124 states.
[2020-05-30 19:52:56,496 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 81124 states to 81124 states and 111396 transitions.
[2020-05-30 19:52:56,496 INFO  L751         BuchiCegarLoop]: Abstraction has 81124 states and 111396 transitions.
[2020-05-30 19:52:56,496 INFO  L631         BuchiCegarLoop]: Abstraction has 81124 states and 111396 transitions.
[2020-05-30 19:52:56,496 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-30 19:52:56,496 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 81124 states and 111396 transitions.
[2020-05-30 19:52:56,598 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 416
[2020-05-30 19:52:56,599 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:52:56,599 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:52:56,603 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:52:56,603 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND TRUE   DType[to] == safeMath
[L3123]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:52:56,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:52:56,612 INFO  L82        PathProgramCache]: Analyzing trace with hash -1078154082, now seen corresponding path program 1 times
[2020-05-30 19:52:56,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:52:56,673 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:52:56,739 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:52:56,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:52:56,886 INFO  L82        PathProgramCache]: Analyzing trace with hash -1292091321, now seen corresponding path program 1 times
[2020-05-30 19:52:56,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:52:56,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:52:57,139 INFO  L134       CoverageAnalysis]: Checked inductivity of 1154 backedges. 58 proven. 86 refuted. 0 times theorem prover too weak. 1010 trivial. 0 not checked.
[2020-05-30 19:52:57,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:52:57,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:52:57,139 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-30 19:52:57,139 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 19:52:57,140 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 19:52:57,140 INFO  L87              Difference]: Start difference. First operand 81124 states and 111396 transitions. cyclomatic complexity: 30368 Second operand 8 states.
[2020-05-30 19:53:02,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:53:02,559 INFO  L93              Difference]: Finished difference Result 105866 states and 143019 transitions.
[2020-05-30 19:53:02,560 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 19:53:02,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 105866 states and 143019 transitions.
[2020-05-30 19:53:03,044 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 616
[2020-05-30 19:53:03,920 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 105866 states to 105866 states and 143019 transitions.
[2020-05-30 19:53:03,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 266
[2020-05-30 19:53:03,921 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 266
[2020-05-30 19:53:03,921 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 105866 states and 143019 transitions.
[2020-05-30 19:53:04,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:53:04,063 INFO  L728         BuchiCegarLoop]: Abstraction has 105866 states and 143019 transitions.
[2020-05-30 19:53:04,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 105866 states and 143019 transitions.
[2020-05-30 19:53:04,992 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 105866 to 105716.
[2020-05-30 19:53:04,992 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 105716 states.
[2020-05-30 19:53:05,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 105716 states to 105716 states and 142591 transitions.
[2020-05-30 19:53:05,331 INFO  L751         BuchiCegarLoop]: Abstraction has 105716 states and 142591 transitions.
[2020-05-30 19:53:05,331 INFO  L631         BuchiCegarLoop]: Abstraction has 105716 states and 142591 transitions.
[2020-05-30 19:53:05,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-30 19:53:05,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 105716 states and 142591 transitions.
[2020-05-30 19:53:05,475 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 616
[2020-05-30 19:53:05,475 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:53:05,475 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:53:05,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:53:05,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:53:05,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:53:05,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 4241287, now seen corresponding path program 1 times
[2020-05-30 19:53:05,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:53:05,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:53:05,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:53:05,752 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:53:05,752 INFO  L82        PathProgramCache]: Analyzing trace with hash 810767955, now seen corresponding path program 1 times
[2020-05-30 19:53:05,753 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:53:05,760 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:53:05,767 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:53:05,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:53:05,776 INFO  L82        PathProgramCache]: Analyzing trace with hash -928128243, now seen corresponding path program 1 times
[2020-05-30 19:53:05,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:53:05,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:53:07,995 INFO  L134       CoverageAnalysis]: Checked inductivity of 823 backedges. 192 proven. 213 refuted. 0 times theorem prover too weak. 418 trivial. 0 not checked.
[2020-05-30 19:53:07,995 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:53:07,995 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [61] total 61
[2020-05-30 19:53:07,996 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 62 interpolants.
[2020-05-30 19:53:07,996 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=203, Invalid=3579, Unknown=0, NotChecked=0, Total=3782
[2020-05-30 19:53:07,996 INFO  L87              Difference]: Start difference. First operand 105716 states and 142591 transitions. cyclomatic complexity: 36974 Second operand 62 states.
[2020-05-30 19:54:24,796 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:54:24,796 INFO  L93              Difference]: Finished difference Result 157649 states and 209079 transitions.
[2020-05-30 19:54:24,796 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 102 states. 
[2020-05-30 19:54:24,797 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 157649 states and 209079 transitions.
[2020-05-30 19:54:25,528 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 616
[2020-05-30 19:54:26,622 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 157649 states to 157649 states and 209079 transitions.
[2020-05-30 19:54:26,622 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 274
[2020-05-30 19:54:26,623 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 274
[2020-05-30 19:54:26,623 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 157649 states and 209079 transitions.
[2020-05-30 19:54:26,993 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:54:26,994 INFO  L728         BuchiCegarLoop]: Abstraction has 157649 states and 209079 transitions.
[2020-05-30 19:54:27,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 157649 states and 209079 transitions.
[2020-05-30 19:54:28,107 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 157649 to 154862.
[2020-05-30 19:54:28,107 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 154862 states.
[2020-05-30 19:54:28,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 154862 states to 154862 states and 203069 transitions.
[2020-05-30 19:54:28,607 INFO  L751         BuchiCegarLoop]: Abstraction has 154862 states and 203069 transitions.
[2020-05-30 19:54:28,607 INFO  L631         BuchiCegarLoop]: Abstraction has 154862 states and 203069 transitions.
[2020-05-30 19:54:28,608 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-30 19:54:28,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 154862 states and 203069 transitions.
[2020-05-30 19:54:28,818 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 616
[2020-05-30 19:54:28,818 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:54:28,818 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:54:28,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:54:28,824 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0
[L2904]                    gas := gas - 20317;
[L2905]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2906]                    gas := gas - 20267;
[L2907]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2908]                    gas := gas - 409;
[L2909]                    CurrentStatus_EPXCrowdsale[this] := -349424081;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:54:28,857 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:28,857 INFO  L82        PathProgramCache]: Analyzing trace with hash 1697989941, now seen corresponding path program 1 times
[2020-05-30 19:54:28,858 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:28,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:54:29,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 1735 backedges. 193 proven. 565 refuted. 0 times theorem prover too weak. 977 trivial. 0 not checked.
[2020-05-30 19:54:29,293 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:54:29,293 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:54:29,293 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:54:29,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:54:29,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:54:29,294 INFO  L87              Difference]: Start difference. First operand 154862 states and 203069 transitions. cyclomatic complexity: 48471 Second operand 11 states.
[2020-05-30 19:54:32,439 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:54:32,439 INFO  L93              Difference]: Finished difference Result 103103 states and 133446 transitions.
[2020-05-30 19:54:32,439 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 19:54:32,439 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 103103 states and 133446 transitions.
[2020-05-30 19:54:32,826 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 168
[2020-05-30 19:54:33,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 103103 states to 96655 states and 123362 transitions.
[2020-05-30 19:54:33,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-05-30 19:54:33,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-05-30 19:54:33,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 96655 states and 123362 transitions.
[2020-05-30 19:54:33,448 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:54:33,449 INFO  L728         BuchiCegarLoop]: Abstraction has 96655 states and 123362 transitions.
[2020-05-30 19:54:33,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 96655 states and 123362 transitions.
[2020-05-30 19:54:34,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 96655 to 79061.
[2020-05-30 19:54:34,110 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 79061 states.
[2020-05-30 19:54:34,274 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 79061 states to 79061 states and 97988 transitions.
[2020-05-30 19:54:34,274 INFO  L751         BuchiCegarLoop]: Abstraction has 79061 states and 97988 transitions.
[2020-05-30 19:54:34,274 INFO  L631         BuchiCegarLoop]: Abstraction has 79061 states and 97988 transitions.
[2020-05-30 19:54:34,274 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-30 19:54:34,274 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 79061 states and 97988 transitions.
[2020-05-30 19:54:34,365 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 100
[2020-05-30 19:54:34,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:54:34,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:54:34,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:54:34,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume !(to == ben);
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:54:34,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:34,372 INFO  L82        PathProgramCache]: Analyzing trace with hash -2138176529, now seen corresponding path program 1 times
[2020-05-30 19:54:34,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:34,410 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:54:34,629 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 229 proven. 40 refuted. 0 times theorem prover too weak. 520 trivial. 0 not checked.
[2020-05-30 19:54:34,629 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:54:34,629 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:54:34,630 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:54:34,630 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 19:54:34,630 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-05-30 19:54:34,630 INFO  L87              Difference]: Start difference. First operand 79061 states and 97988 transitions. cyclomatic complexity: 19170 Second operand 12 states.
[2020-05-30 19:54:37,964 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:54:37,964 INFO  L93              Difference]: Finished difference Result 101081 states and 127439 transitions.
[2020-05-30 19:54:37,964 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 19:54:37,965 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 101081 states and 127439 transitions.
[2020-05-30 19:54:38,339 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 88
[2020-05-30 19:54:38,684 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 101081 states to 77251 states and 94246 transitions.
[2020-05-30 19:54:38,684 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 92
[2020-05-30 19:54:38,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 92
[2020-05-30 19:54:38,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 77251 states and 94246 transitions.
[2020-05-30 19:54:38,755 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:54:38,755 INFO  L728         BuchiCegarLoop]: Abstraction has 77251 states and 94246 transitions.
[2020-05-30 19:54:38,791 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 77251 states and 94246 transitions.
[2020-05-30 19:54:39,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 77251 to 76639.
[2020-05-30 19:54:39,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 76639 states.
[2020-05-30 19:54:39,466 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 76639 states to 76639 states and 93544 transitions.
[2020-05-30 19:54:39,466 INFO  L751         BuchiCegarLoop]: Abstraction has 76639 states and 93544 transitions.
[2020-05-30 19:54:39,466 INFO  L631         BuchiCegarLoop]: Abstraction has 76639 states and 93544 transitions.
[2020-05-30 19:54:39,466 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-30 19:54:39,466 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 76639 states and 93544 transitions.
[2020-05-30 19:54:39,553 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 88
[2020-05-30 19:54:39,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:54:39,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:54:39,556 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:54:39,556 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND TRUE   DType[to] == owned
[L3127]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:54:39,562 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:39,562 INFO  L82        PathProgramCache]: Analyzing trace with hash 1353366222, now seen corresponding path program 1 times
[2020-05-30 19:54:39,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:39,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:54:39,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 1068 backedges. 53 proven. 20 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-05-30 19:54:39,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:54:39,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-30 19:54:39,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:54:39,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 19:54:39,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-30 19:54:39,871 INFO  L87              Difference]: Start difference. First operand 76639 states and 93544 transitions. cyclomatic complexity: 17109 Second operand 8 states.
[2020-05-30 19:54:42,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:54:42,970 INFO  L93              Difference]: Finished difference Result 85130 states and 102725 transitions.
[2020-05-30 19:54:42,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-30 19:54:42,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 85130 states and 102725 transitions.
[2020-05-30 19:54:43,328 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-05-30 19:54:43,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 85130 states to 84998 states and 102292 transitions.
[2020-05-30 19:54:43,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 82
[2020-05-30 19:54:43,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 82
[2020-05-30 19:54:43,627 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 84998 states and 102292 transitions.
[2020-05-30 19:54:43,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:54:43,696 INFO  L728         BuchiCegarLoop]: Abstraction has 84998 states and 102292 transitions.
[2020-05-30 19:54:43,729 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 84998 states and 102292 transitions.
[2020-05-30 19:54:44,251 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 84998 to 83228.
[2020-05-30 19:54:44,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 83228 states.
[2020-05-30 19:54:44,408 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 83228 states to 83228 states and 100101 transitions.
[2020-05-30 19:54:44,408 INFO  L751         BuchiCegarLoop]: Abstraction has 83228 states and 100101 transitions.
[2020-05-30 19:54:44,408 INFO  L631         BuchiCegarLoop]: Abstraction has 83228 states and 100101 transitions.
[2020-05-30 19:54:44,408 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-30 19:54:44,408 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 83228 states and 100101 transitions.
[2020-05-30 19:54:44,501 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 92
[2020-05-30 19:54:44,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:54:44,501 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:54:44,503 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:54:44,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0
[L2885]                    gas := gas - 20317;
[L2886]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2887]                    gas := gas - 20267;
[L2888]                    isCrowdSaleClosed_EPXCrowdsale[this] := true;
[L2889]                    gas := gas - 409;
[L2890]                    CurrentStatus_EPXCrowdsale[this] := 299498758;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:54:44,516 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:44,516 INFO  L82        PathProgramCache]: Analyzing trace with hash -859985785, now seen corresponding path program 1 times
[2020-05-30 19:54:44,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:44,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:54:44,879 INFO  L134       CoverageAnalysis]: Checked inductivity of 1079 backedges. 260 proven. 163 refuted. 0 times theorem prover too weak. 656 trivial. 0 not checked.
[2020-05-30 19:54:44,879 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:54:44,879 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-30 19:54:44,879 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:54:44,880 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 19:54:44,880 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-05-30 19:54:44,880 INFO  L87              Difference]: Start difference. First operand 83228 states and 100101 transitions. cyclomatic complexity: 17068 Second operand 12 states.
[2020-05-30 19:54:48,283 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:54:48,284 INFO  L93              Difference]: Finished difference Result 102230 states and 123547 transitions.
[2020-05-30 19:54:48,284 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 19:54:48,284 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 102230 states and 123547 transitions.
[2020-05-30 19:54:48,715 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 148
[2020-05-30 19:54:49,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 102230 states to 102094 states and 122901 transitions.
[2020-05-30 19:54:49,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 118
[2020-05-30 19:54:49,144 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 118
[2020-05-30 19:54:49,144 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 102094 states and 122901 transitions.
[2020-05-30 19:54:49,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:54:49,230 INFO  L728         BuchiCegarLoop]: Abstraction has 102094 states and 122901 transitions.
[2020-05-30 19:54:49,271 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 102094 states and 122901 transitions.
[2020-05-30 19:54:49,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 102094 to 95384.
[2020-05-30 19:54:49,888 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 95384 states.
[2020-05-30 19:54:50,073 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 95384 states to 95384 states and 114681 transitions.
[2020-05-30 19:54:50,073 INFO  L751         BuchiCegarLoop]: Abstraction has 95384 states and 114681 transitions.
[2020-05-30 19:54:50,073 INFO  L631         BuchiCegarLoop]: Abstraction has 95384 states and 114681 transitions.
[2020-05-30 19:54:50,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-30 19:54:50,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 95384 states and 114681 transitions.
[2020-05-30 19:54:50,179 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:54:50,179 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:54:50,179 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:54:50,181 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:54:50,181 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:54:50,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:50,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 55558646, now seen corresponding path program 2 times
[2020-05-30 19:54:50,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:50,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:54:50,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:54:50,456 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:50,456 INFO  L82        PathProgramCache]: Analyzing trace with hash 810767955, now seen corresponding path program 2 times
[2020-05-30 19:54:50,456 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:50,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:54:50,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 19:54:50,479 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:54:50,479 INFO  L82        PathProgramCache]: Analyzing trace with hash 1113308990, now seen corresponding path program 1 times
[2020-05-30 19:54:50,479 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:54:50,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:54:51,890 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 121 proven. 154 refuted. 0 times theorem prover too weak. 803 trivial. 0 not checked.
[2020-05-30 19:54:51,890 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:54:51,890 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-05-30 19:54:51,891 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-05-30 19:54:51,891 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=167, Invalid=2089, Unknown=0, NotChecked=0, Total=2256
[2020-05-30 19:54:51,891 INFO  L87              Difference]: Start difference. First operand 95384 states and 114681 transitions. cyclomatic complexity: 19531 Second operand 48 states.
[2020-05-30 19:55:24,432 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:55:24,432 INFO  L93              Difference]: Finished difference Result 96167 states and 116749 transitions.
[2020-05-30 19:55:24,432 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 72 states. 
[2020-05-30 19:55:24,432 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 96167 states and 116749 transitions.
[2020-05-30 19:55:24,734 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:55:25,185 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 96167 states to 96167 states and 116749 transitions.
[2020-05-30 19:55:25,185 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 108
[2020-05-30 19:55:25,186 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 108
[2020-05-30 19:55:25,186 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 96167 states and 116749 transitions.
[2020-05-30 19:55:25,278 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:55:25,278 INFO  L728         BuchiCegarLoop]: Abstraction has 96167 states and 116749 transitions.
[2020-05-30 19:55:25,325 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 96167 states and 116749 transitions.
[2020-05-30 19:55:25,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 96167 to 95528.
[2020-05-30 19:55:25,970 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 95528 states.
[2020-05-30 19:55:26,163 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 95528 states to 95528 states and 115419 transitions.
[2020-05-30 19:55:26,163 INFO  L751         BuchiCegarLoop]: Abstraction has 95528 states and 115419 transitions.
[2020-05-30 19:55:26,163 INFO  L631         BuchiCegarLoop]: Abstraction has 95528 states and 115419 transitions.
[2020-05-30 19:55:26,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-30 19:55:26,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 95528 states and 115419 transitions.
[2020-05-30 19:55:26,371 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:55:26,371 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:55:26,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:55:26,373 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:55:26,373 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:55:26,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:55:26,416 INFO  L82        PathProgramCache]: Analyzing trace with hash -1858412556, now seen corresponding path program 1 times
[2020-05-30 19:55:26,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:55:26,486 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:55:28,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 1832 backedges. 243 proven. 835 refuted. 0 times theorem prover too weak. 754 trivial. 0 not checked.
[2020-05-30 19:55:28,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:55:28,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [70] total 70
[2020-05-30 19:55:28,629 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:55:28,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 71 interpolants.
[2020-05-30 19:55:28,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=239, Invalid=4731, Unknown=0, NotChecked=0, Total=4970
[2020-05-30 19:55:28,629 INFO  L87              Difference]: Start difference. First operand 95528 states and 115419 transitions. cyclomatic complexity: 20161 Second operand 71 states.
[2020-05-30 19:56:39,959 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:56:39,959 INFO  L93              Difference]: Finished difference Result 124112 states and 149561 transitions.
[2020-05-30 19:56:39,959 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 111 states. 
[2020-05-30 19:56:39,960 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 124112 states and 149561 transitions.
[2020-05-30 19:56:40,347 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:56:40,910 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 124112 states to 123756 states and 147402 transitions.
[2020-05-30 19:56:40,910 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 110
[2020-05-30 19:56:40,910 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 110
[2020-05-30 19:56:40,910 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 123756 states and 147402 transitions.
[2020-05-30 19:56:41,020 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:56:41,020 INFO  L728         BuchiCegarLoop]: Abstraction has 123756 states and 147402 transitions.
[2020-05-30 19:56:41,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 123756 states and 147402 transitions.
[2020-05-30 19:56:41,935 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 123756 to 121185.
[2020-05-30 19:56:41,935 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 121185 states.
[2020-05-30 19:56:42,194 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 121185 states to 121185 states and 144100 transitions.
[2020-05-30 19:56:42,194 INFO  L751         BuchiCegarLoop]: Abstraction has 121185 states and 144100 transitions.
[2020-05-30 19:56:42,194 INFO  L631         BuchiCegarLoop]: Abstraction has 121185 states and 144100 transitions.
[2020-05-30 19:56:42,194 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-30 19:56:42,194 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 121185 states and 144100 transitions.
[2020-05-30 19:56:42,336 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:56:42,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:56:42,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:56:42,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:56:42,340 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND FALSE  !(choice == 2)
[L3900]        COND FALSE  !(choice == 1)
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND FALSE  !(DType[to] == StandardToken)
[L3121]        COND FALSE  !(DType[to] == safeMath)
[L3125]        COND FALSE  !(DType[to] == owned)
[L3131]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L3310]                    assume Balance[from] >= amount;
[L3311]                    Balance[from] := Balance[from] - amount;
[L3312]                    Balance[to] := Balance[to] + amount;
[L3313]        COND FALSE  !(choice == 0)
[L3319]        COND TRUE   gas < 21000
[L3131]        RET         call Fallback_UnknownType__success(from, to, amount);
[L3132]        COND FALSE  !(revert)
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:56:42,346 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:56:42,346 INFO  L82        PathProgramCache]: Analyzing trace with hash 1781152649, now seen corresponding path program 2 times
[2020-05-30 19:56:42,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:56:42,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:56:45,127 INFO  L134       CoverageAnalysis]: Checked inductivity of 2294 backedges. 424 proven. 691 refuted. 0 times theorem prover too weak. 1179 trivial. 0 not checked.
[2020-05-30 19:56:45,128 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:56:45,128 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [66] total 66
[2020-05-30 19:56:45,128 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:56:45,128 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 67 interpolants.
[2020-05-30 19:56:45,129 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=232, Invalid=4190, Unknown=0, NotChecked=0, Total=4422
[2020-05-30 19:56:45,129 INFO  L87              Difference]: Start difference. First operand 121185 states and 144100 transitions. cyclomatic complexity: 23218 Second operand 67 states.
[2020-05-30 19:57:42,935 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:57:42,935 INFO  L93              Difference]: Finished difference Result 147936 states and 175387 transitions.
[2020-05-30 19:57:42,936 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 100 states. 
[2020-05-30 19:57:42,936 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 147936 states and 175387 transitions.
[2020-05-30 19:57:43,401 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 116
[2020-05-30 19:57:43,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 147936 states to 64963 states and 79648 transitions.
[2020-05-30 19:57:43,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 106
[2020-05-30 19:57:43,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 106
[2020-05-30 19:57:43,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 64963 states and 79648 transitions.
[2020-05-30 19:57:43,742 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:57:43,743 INFO  L728         BuchiCegarLoop]: Abstraction has 64963 states and 79648 transitions.
[2020-05-30 19:57:43,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 64963 states and 79648 transitions.
[2020-05-30 19:57:44,188 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 64963 to 62080.
[2020-05-30 19:57:44,188 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 62080 states.
[2020-05-30 19:57:44,306 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 62080 states to 62080 states and 76079 transitions.
[2020-05-30 19:57:44,306 INFO  L751         BuchiCegarLoop]: Abstraction has 62080 states and 76079 transitions.
[2020-05-30 19:57:44,307 INFO  L631         BuchiCegarLoop]: Abstraction has 62080 states and 76079 transitions.
[2020-05-30 19:57:44,307 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-30 19:57:44,307 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 62080 states and 76079 transitions.
[2020-05-30 19:57:44,377 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 114
[2020-05-30 19:57:44,377 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 19:57:44,377 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 19:57:44,380 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 19:57:44,380 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       fsum_send__success_2_0 := 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := 0;
[L7]                       success_CorralChoice_EPXCrowdsale0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L3919]                    assume null == 0;
[L3920]        CALL        call this := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L3920]        RET         call this := FreshRefGenerator__success();
[L3921]                    assume now >= 0;
[L3922]                    assume DType[this] == EPXCrowdsale;
[L3923]                    gas := gas - 53000;
[L3924]        CALL        call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L376]         CALL        call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1891]        CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1139]        CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1118]                    assume msgsender_MSG != null;
[L1119]                    Balance[this] := 0;
[L1120]                    owner_owned[this] := null;
[L1121]                    owner_owned[this] := msgsender_MSG;
[L1139]        RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1140]        COND FALSE  !(revert)
[L1891]        RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1892]        COND FALSE  !(revert)
[L1897]        CALL        call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]        CALL        call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1158]                    assume msgsender_MSG != null;
[L1159]                    Balance[this] := 0;
[L1177]        RET         call safeMath_safeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1178]        COND FALSE  !(revert)
[L1897]        RET         call safeMath_safeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1898]        COND FALSE  !(revert)
[L1903]        CALL        call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1816]                    assume msgsender_MSG != null;
[L1817]                    Balance[this] := 0;
[L1818]                    admin_EPXCrowdsale[this] := null;
[L1819]                    initialTokenSupply_EPXCrowdsale[this] := 0;
[L1820]                    tokensRemaining_EPXCrowdsale[this] := 0;
[L1821]                    beneficiaryWallet_EPXCrowdsale[this] := null;
[L1822]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L1823]                    fundingMinCapInWei_EPXCrowdsale[this] := 0;
[L1824]                    CurrentStatus_EPXCrowdsale[this] := -779175998;
[L1825]                    fundingStartBlock_EPXCrowdsale[this] := 0;
[L1826]                    fundingEndBlock_EPXCrowdsale[this] := 0;
[L1827]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L1828]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L1829]                    isCrowdSaleSetup_EPXCrowdsale[this] := false;
[L1830]        CALL        call __var_1 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1830]        RET         call __var_1 := FreshRefGenerator__success();
[L1831]        COND FALSE  !(revert)
[L1836]                    balancesArray_EPXCrowdsale[this] := __var_1;
[L1837]                    M_Ref_int_balancesArray0[balancesArray_EPXCrowdsale[this]] := zeroRefIntArr();
[L1838]                    sum_balancesArray0[balancesArray_EPXCrowdsale[this]] := 0;
[L1839]        CALL        call __var_2 := FreshRefGenerator__success();
[L1098]                    havoc newRef;
[L1099]                    assume Alloc[newRef] == false;
[L1100]                    Alloc[newRef] := true;
[L1101]                    assume newRef != null;
[L1839]        RET         call __var_2 := FreshRefGenerator__success();
[L1840]        COND FALSE  !(revert)
[L1845]                    usersEPXfundValue_EPXCrowdsale[this] := __var_2;
[L1846]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := zeroRefIntArr();
[L1847]                    sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := 0;
[L1848]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L1848]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]        COND FALSE  !(revert)
[L1854]                    admin_EPXCrowdsale[this] := msgsender_MSG;
[L1855]                    CurrentStatus_EPXCrowdsale[this] := 305526541;
[L1903]        RET         call EPXCrowdsale_EPXCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]        COND FALSE  !(revert)
[L376]         RET         call EPXCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L377]                     assume !revert && gas >= 0;
[L3924]        RET         call EPXCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L3925]                    assume !revert && gas >= 0;
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND TRUE   choice == 5
[L3866]                    gas := gas - 21000;
[L3867]        COND TRUE   gas >= 0
[L3869]                    assume msgvalue_MSG == 0;
[L3870]        CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L508]                     havoc __exception;
[L509]                     revert := false;
[L510]         COND FALSE  !(__exception)
[L543]         CALL        call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L2134]                    gas := gas - 3;
[L2135]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2135]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2136]        COND FALSE  !(revert)
[L2141]                    gas := gas - 852;
[L2142]                    __var_7 := null;
[L2143-L2145]  COND TRUE   msgsender_MSG == admin_EPXCrowdsale[this] && !isCrowdSaleSetup_EPXCrowdsale[this] && !(beneficiaryWallet_EPXCrowdsale[this] > null)
[L2147]                    gas := gas - 20267;
[L2148]                    beneficiaryWallet_EPXCrowdsale[this] := 697430822632970301078135277991899223861541828538;
[L2149]                    gas := gas - 20267;
[L2150]                    assume DType[306739008177065458245547523748999887630099779917] == StandardToken;
[L2151]                    __var_8 := 306739008177065458245547523748999887630099779917;
[L2152]                    tokenReward_EPXCrowdsale[this] := __var_8;
[L2153]                    gas := gas - 20014;
[L2154]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2155]                    fundingMinCapInWei_EPXCrowdsale[this] := 30000000000000000000;
[L2156]                    gas := gas - 5014;
[L2157]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2158]                    amountRaisedInWei_EPXCrowdsale[this] := 0;
[L2159]                    gas := gas - 20014;
[L2160]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2161]                    initialTokenSupply_EPXCrowdsale[this] := 200000000000;
[L2162]                    gas := gas - 20214;
[L2163]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2164]                    assume initialTokenSupply_EPXCrowdsale[this] >= 0;
[L2165]                    tokensRemaining_EPXCrowdsale[this] := initialTokenSupply_EPXCrowdsale[this];
[L2166]                    gas := gas - 20014;
[L2167]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2168]                    assume _fundingStartBlock_s391 >= 0;
[L2169]                    fundingStartBlock_EPXCrowdsale[this] := _fundingStartBlock_s391;
[L2170]                    gas := gas - 20014;
[L2171]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2172]                    assume _fundingEndBlock_s391 >= 0;
[L2173]                    fundingEndBlock_EPXCrowdsale[this] := _fundingEndBlock_s391;
[L2174]                    gas := gas - 20317;
[L2175]                    isCrowdSaleSetup_EPXCrowdsale[this] := true;
[L2176]                    gas := gas - 20267;
[L2177]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2178]                    gas := gas - 409;
[L2179]                    CurrentStatus_EPXCrowdsale[this] := -83871603;
[L2180]                    gas := gas - 19;
[L2181]                    response_s391 := -83871603;
[L543]         RET         call response_s391 := SetupCrowdsale_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L544]                     assume !revert && gas >= 0;
[L3870]        RET         call response_s391 := SetupCrowdsale_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _fundingStartBlock_s391, _fundingEndBlock_s391);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this]
[L2835]                    gas := gas - 20317;
[L2836]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := false;
[L2837]                    gas := gas - 20267;
[L2838]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2839]                    gas := gas - 398;
[L2840]                    CurrentStatus_EPXCrowdsale[this] := -880273060;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert);
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true);
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND FALSE  !(choice == 3)
[L3891]        COND TRUE   choice == 2
[L3893]                    gas := gas - 21000;
[L3894]        COND TRUE   gas >= 0
[L3896]                    assume msgvalue_MSG == 0;
[L3897]        CALL        call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L672]                     havoc __exception;
[L673]                     revert := false;
[L674]         COND FALSE  !(__exception)
[L707]         CALL        call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2810]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]        COND FALSE  !(revert)
[L2816]                    gas := gas - 309;
[L2817]        COND FALSE  !(!isCrowdSaleSetup_EPXCrowdsale[this])
[L2823]                    gas := gas - 875;
[L2824]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2825]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2826]                    assume now >= 0;
[L2827]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2828]                    assume now >= 0;
[L2829]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2830-L2833]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this])
[L2844]                    gas := gas - 639;
[L2845]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2846]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2847]                    assume now >= 0;
[L2848]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2849-L2850]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now < fundingStartBlock_EPXCrowdsale[this])
[L2861]                    gas := gas - 639;
[L2862]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2863]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2864]                    assume now >= 0;
[L2865]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2866-L2867]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] < fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this])
[L2878]                    gas := gas - 643;
[L2879]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2880]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2881]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2882-L2883]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] == 0)
[L2894]                    gas := gas - 873;
[L2895]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2896]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2897]                    assume now >= 0;
[L2898]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2899]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2900-L2902]  COND FALSE  !(amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && now > fundingEndBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0)
[L2913]                    gas := gas - 876;
[L2914]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2915]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2916]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2917]                    assume now >= 0;
[L2918]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2919-L2921]  COND TRUE   amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0 && now <= fundingEndBlock_EPXCrowdsale[this]
[L2923]                    gas := gas - 20317;
[L2924]                    areFundsReleasedToBeneficiary_EPXCrowdsale[this] := true;
[L2925]                    gas := gas - 20267;
[L2926]                    isCrowdSaleClosed_EPXCrowdsale[this] := false;
[L2927]                    gas := gas - 409;
[L2928]                    CurrentStatus_EPXCrowdsale[this] := -145992971;
[L707]         RET         call checkGoalReached_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L708]                     assume !revert && gas >= 0;
[L3897]        RET         call checkGoalReached_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(_amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this]);
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

Loop:
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND TRUE   choice == 4
[L3875]                    gas := gas - 21000;
[L3876]        COND TRUE   gas >= 0
[L3878]                    assume msgvalue_MSG >= 0;
[L3879]        CALL        call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L570]                     havoc __exception;
[L571]                     revert := false;
[L572]         COND FALSE  !(__exception)
[L605]         CALL        call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2463]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2464]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2465]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L2466]                    gas := gas - 728;
[L2467]                    assume msgvalue_MSG >= 0;
[L2468]                    assume now >= 0;
[L2469]                    assume fundingEndBlock_EPXCrowdsale[this] >= 0;
[L2470]                    assume now >= 0;
[L2471]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2472]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2473-L2477]  COND FALSE  !(!(!(msgvalue_MSG == 0) && now <= fundingEndBlock_EPXCrowdsale[this] && now >= fundingStartBlock_EPXCrowdsale[this] && tokensRemaining_EPXCrowdsale[this] > 0))
[L2483]                    gas := gas - 11;
[L2484]                    assume rewardTransferAmount_s526 >= 0;
[L2485]                    rewardTransferAmount_s526 := 0;
[L2486]                    gas := gas - 20220;
[L2487]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2488]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2489]                    assume msgvalue_MSG >= 0;
[L2490]        COND TRUE   DType[this] == EPXCrowdsale
[L2492]        CALL        call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2492]        RET         call __var_9 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, amountRaisedInWei_EPXCrowdsale[this], msgvalue_MSG);
[L2493]        COND FALSE  !(revert)
[L2503]                    amountRaisedInWei_EPXCrowdsale[this] := __var_9;
[L2504]                    assume __var_9 >= 0;
[L2505]                    gas := gas - 40;
[L2506]                    assume rewardTransferAmount_s526 >= 0;
[L2507]                    assume __var_10 >= 0;
[L2508]                    assume msgvalue_MSG >= 0;
[L2509]                    assume __var_11 >= 0;
[L2510]        CALL        call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]                    gas := gas - 3;
[L2251]                    gas := gas - 214;
[L2252]                    assume now >= 0;
[L2253]                    assume fundingStartBlock_EPXCrowdsale[this] >= 0;
[L2254]                    assume fundingStartBlock_EPXCrowdsale[this] + 177534 >= 0;
[L2255]        COND TRUE   now >= fundingStartBlock_EPXCrowdsale[this] + 177534
[L2257]                    gas := gas - 19;
[L2258]                    currentPriceValue_s428 := 7600;
[L2510]        RET         call __var_11 := checkPrice_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2511]        COND FALSE  !(revert)
[L2516]                    assume __var_11 >= 0;
[L2517]        COND TRUE   DType[this] == EPXCrowdsale
[L2519]        CALL        call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L1246]                    gas := gas - 3;
[L1247]                    gas := gas - 19;
[L1248]                    assume c_s53 >= 0;
[L1249]                    assume a_s54 >= 0;
[L1250]                    assume b_s54 >= 0;
[L1251]                    assume nonlinearMul(a_s54, b_s54) >= 0;
[L1252]                    c_s53 := nonlinearMul(a_s54, b_s54);
[L1253]                    gas := gas - 77;
[L1254]                    assume a_s54 >= 0;
[L1255]                    assume c_s53 >= 0;
[L1256]                    assume a_s54 >= 0;
[L1257]                    assume nonlinearDiv(c_s53, a_s54) >= 0;
[L1258]                    assume b_s54 >= 0;
[L1259]        COND TRUE   DType[this] == EPXCrowdsale
[L1261]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1261]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s54 == 0 || nonlinearDiv(c_s53, a_s54) == b_s54);
[L1262]        COND FALSE  !(revert)
[L1288]                    gas := gas - 10;
[L1289]                    assume c_s53 >= 0;
[L1290]                    __ret_0_ := c_s53;
[L2519]        RET         call __var_10 := safeMul_safeMath__success(this, msgsender_MSG, msgvalue_MSG, msgvalue_MSG, __var_11);
[L2520]        COND FALSE  !(revert)
[L2530]                    assume __var_10 >= 0;
[L2531]                    assume __var_10 / 100000000000000 >= 0;
[L2532]                    rewardTransferAmount_s526 := __var_10 / 100000000000000;
[L2533]                    gas := gas - 20221;
[L2534]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2535]                    assume tokensRemaining_EPXCrowdsale[this] >= 0;
[L2536]                    assume rewardTransferAmount_s526 >= 0;
[L2537]        COND TRUE   DType[this] == EPXCrowdsale
[L2539]        CALL        call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L1523]                    gas := gas - 3;
[L1524]                    gas := gas - 16;
[L1525]                    assume b_s110 >= 0;
[L1526]                    assume a_s110 >= 0;
[L1527]        COND TRUE   DType[this] == EPXCrowdsale
[L1529]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1529]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s110 <= a_s110);
[L1530]        COND FALSE  !(revert)
[L1556]                    gas := gas - 14;
[L1557]                    assume a_s110 >= 0;
[L1558]                    assume b_s110 >= 0;
[L1559]                    assume a_s110 - b_s110 >= 0;
[L1560]                    __ret_0_ := a_s110 - b_s110;
[L2539]        RET         call __var_12 := safeSub_safeMath__success(this, msgsender_MSG, msgvalue_MSG, tokensRemaining_EPXCrowdsale[this], rewardTransferAmount_s526);
[L2540]        COND FALSE  !(revert)
[L2550]                    tokensRemaining_EPXCrowdsale[this] := __var_12;
[L2551]                    assume __var_12 >= 0;
[L2552]                    gas := gas - 37457;
[L2553]                    assume rewardTransferAmount_s526 >= 0;
[L2555]                    gas := gas - 20415;
[L2556-L2557]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2558-L2559]              assume M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] >= 0;
[L2560]                    assume msgvalue_MSG >= 0;
[L2561]        COND TRUE   DType[this] == EPXCrowdsale
[L2563]        CALL        call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L1625]                    gas := gas - 3;
[L1626]                    gas := gas - 17;
[L1627]                    assume c_s137 >= 0;
[L1628]                    assume a_s138 >= 0;
[L1629]                    assume b_s138 >= 0;
[L1630]                    assume a_s138 + b_s138 >= 0;
[L1631]                    c_s137 := a_s138 + b_s138;
[L1632]                    gas := gas - 61;
[L1633]                    assume c_s137 >= 0;
[L1634]                    assume a_s138 >= 0;
[L1635]                    assume c_s137 >= 0;
[L1636]                    assume b_s138 >= 0;
[L1637]        COND TRUE   DType[this] == EPXCrowdsale
[L1639]        CALL        call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1689]                    gas := gas - 3;
[L1690]        COND FALSE  !(!assertion_s150)
[L1639]        RET         call safeAssert_safeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s137 >= a_s138 && c_s137 >= b_s138);
[L1640]        COND FALSE  !(revert)
[L1666]                    gas := gas - 10;
[L1667]                    assume c_s137 >= 0;
[L1668]                    __ret_0_ := c_s137;
[L2563]        RET         call __var_15 := safeAdd_safeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG], msgvalue_MSG);
[L2564]        COND FALSE  !(revert)
[L2574-L2575]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] - M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2576]                    M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG] := __var_15;
[L2577-L2578]              sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] := sum_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]] + M_Ref_int_usersEPXfundValue1[usersEPXfundValue_EPXCrowdsale[this]][msgsender_MSG];
[L2579]                    assume __var_15 >= 0;
[L2580]                    assert { :EventEmitted "Buy_EPXCrowdsale" } true;
[L605]         RET         call buy_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L606]                     assume !revert && gas >= 0;
[L7]                       fsum_buy_EPXCrowdsale_2_0 := fsum_buy_EPXCrowdsale_2_0 + msgvalue_MSG;
[L3879]        RET         call buy_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);
[L3928]        CALL        call CorralChoice_EPXCrowdsale(this);
[L3825]                    havoc msgsender_MSG;
[L3826]                    havoc msgvalue_MSG;
[L3827]                    havoc choice;
[L3828]                    havoc initialEPXtokenCount_s286;
[L3829]                    havoc remainingEPXtokenCount_s299;
[L3830]                    havoc _fundingStartBlock_s391;
[L3831]                    havoc _fundingEndBlock_s391;
[L3832]                    havoc response_s391;
[L3833]                    havoc _amount_s558;
[L3834]                    havoc tmpNow;
[L3835]                    havoc gas;
[L3836]                    assume gas > 4000000 && gas <= 8000000;
[L3837]                    tmpNow := now;
[L3838]                    havoc now;
[L3839]                    assume now > tmpNow;
[L3840]                    assume msgsender_MSG != null;
[L3841]                    assume DType[msgsender_MSG] != owned;
[L3842]                    assume DType[msgsender_MSG] != safeMath;
[L3843]                    assume DType[msgsender_MSG] != StandardToken;
[L3844]                    assume DType[msgsender_MSG] != EPXCrowdsale;
[L3845]                    Alloc[msgsender_MSG] := true;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := true;
[L7]                       call_CorralChoice_EPXCrowdsale1 := false;
[L7]                       revert := revert_hold;
[L3846]        COND FALSE  !(choice == 7)
[L3855]        COND FALSE  !(choice == 6)
[L3864]        COND FALSE  !(choice == 5)
[L3873]        COND FALSE  !(choice == 4)
[L3882]        COND TRUE   choice == 3
[L3884]                    gas := gas - 21000;
[L3885]        COND TRUE   gas >= 0
[L3887]                    assume msgvalue_MSG == 0;
[L3888]        CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L621]                     havoc __exception;
[L622]                     revert := false;
[L623]         COND FALSE  !(__exception)
[L656]         CALL        call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L2633]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3629]                    gas := gas - 828;
[L3630]        COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L2633]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2634]        COND FALSE  !(revert)
[L2639]                    gas := gas - 743;
[L2640]                    assume amountRaisedInWei_EPXCrowdsale[this] >= 0;
[L2641]                    assume fundingMinCapInWei_EPXCrowdsale[this] >= 0;
[L2642-L2643]  COND FALSE  !(!(areFundsReleasedToBeneficiary_EPXCrowdsale[this] && amountRaisedInWei_EPXCrowdsale[this] >= fundingMinCapInWei_EPXCrowdsale[this]))
[L2649]                    gas := gas - 36029;
[L2650]                    __var_16 := gas;
[L2651]        COND TRUE   gas > 2300
[L2653]                    gas := 2300;
[L2656]                    __var_16 := __var_16 - gas;
[L2657]                    assume _amount_s558 >= 0;
[L2658]        CALL        call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L3559]                    havoc __exception;
[L3560]        COND FALSE  !(__exception)
[L3599]        COND TRUE   Balance[from] >= amount
[L3601]        CALL        call FallbackDispatch__success(from, to, amount);
[L3109]        COND FALSE  !(DType[to] == EPXCrowdsale)
[L3117]        COND TRUE   DType[to] == StandardToken
[L3119]                    assume amount == 0;
[L3601]        RET         call FallbackDispatch__success(from, to, amount);
[L3602]                    success := true;
[L3609]                    assume !revert && gas >= 0;
[L7]                       assume to == ben;
[L7]                       fsum_send__success_2_0 := fsum_send__success_2_0 + amount;
[L2658]        RET         call __var_17 := send__success(this, beneficiaryWallet_EPXCrowdsale[this], _amount_s558);
[L2659]        COND FALSE  !(!__var_17)
[L2665]                    gas := __var_16 + gas;
[L2666]                    assert { :EventEmitted "Transfer_EPXCrowdsale" } true;
[L656]         RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L657]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume _amount_s558 == old(Balance[this]) && ben == beneficiaryWallet_EPXCrowdsale[this];
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := true;
[L7]                       success_beneficiaryMultiSigWithdraw_EPXCrowdsale0 := false;
[L7]                       revert := revert_hold;
[L3888]        RET         call beneficiaryMultiSigWithdraw_EPXCrowdsale(this, msgsender_MSG, msgvalue_MSG, _amount_s558);
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !((areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && fsum_buy_EPXCrowdsale_2_0 == fsum_send__success_2_0) && !revert);
[L7]                       revert := revert_hold;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume areFundsReleasedToBeneficiary_EPXCrowdsale[this] == true && !revert;
[L7]                       success_CorralChoice_EPXCrowdsale2 := true;
[L7]                       success_CorralChoice_EPXCrowdsale2 := false;
[L7]                       revert := revert_hold;
[L3928]        RET         call CorralChoice_EPXCrowdsale(this);

[2020-05-30 19:57:44,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 19:57:44,388 INFO  L82        PathProgramCache]: Analyzing trace with hash -310651525, now seen corresponding path program 1 times
[2020-05-30 19:57:44,388 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 19:57:44,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 19:57:44,931 INFO  L134       CoverageAnalysis]: Checked inductivity of 2270 backedges. 7 proven. 437 refuted. 0 times theorem prover too weak. 1826 trivial. 0 not checked.
[2020-05-30 19:57:44,931 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 19:57:44,931 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 19:57:44,932 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 19:57:44,932 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 19:57:44,932 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-30 19:57:44,932 INFO  L87              Difference]: Start difference. First operand 62080 states and 76079 transitions. cyclomatic complexity: 14131 Second operand 11 states.
[2020-05-30 19:57:46,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 19:57:46,172 INFO  L93              Difference]: Finished difference Result 4852 states and 6777 transitions.
[2020-05-30 19:57:46,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 19:57:46,173 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4852 states and 6777 transitions.
[2020-05-30 19:57:46,181 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 19:57:46,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4852 states to 0 states and 0 transitions.
[2020-05-30 19:57:46,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-30 19:57:46,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-30 19:57:46,181 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-30 19:57:46,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 19:57:46,181 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 19:57:46,181 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 19:57:46,181 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-30 19:57:46,181 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-30 19:57:46,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-30 19:57:46,182 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-30 19:57:46,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-30 19:57:46,185 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 07:57:46 BasicIcfg
[2020-05-30 19:57:46,185 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 19:57:46,185 INFO  L168              Benchmark]: Toolchain (without parser) took 627440.02 ms. Allocated memory was 514.9 MB in the beginning and 6.3 GB in the end (delta: 5.8 GB). Free memory was 456.2 MB in the beginning and 4.0 GB in the end (delta: -3.6 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,186 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,186 INFO  L168              Benchmark]: Boogie Preprocessor took 76.28 ms. Allocated memory is still 514.9 MB. Free memory was 456.2 MB in the beginning and 448.0 MB in the end (delta: 8.2 MB). Peak memory consumption was 8.2 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,186 INFO  L168              Benchmark]: UtopiaSpecLang took 48.40 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 442.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,187 INFO  L168              Benchmark]: Boogie Printer took 12.16 ms. Allocated memory is still 514.9 MB. Free memory was 441.2 MB in the beginning and 439.9 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,187 INFO  L168              Benchmark]: RCFGBuilder took 594.75 ms. Allocated memory is still 514.9 MB. Free memory was 439.9 MB in the beginning and 457.3 MB in the end (delta: -17.4 MB). Peak memory consumption was 97.5 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,188 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.02 ms. Allocated memory is still 514.9 MB. Free memory was 457.3 MB in the beginning and 450.8 MB in the end (delta: 6.5 MB). Peak memory consumption was 6.5 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,188 INFO  L168              Benchmark]: BÃ¼chi Program Product took 6391.89 ms. Allocated memory was 514.9 MB in the beginning and 1.6 GB in the end (delta: 1.1 GB). Free memory was 450.8 MB in the beginning and 852.3 MB in the end (delta: -401.5 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,188 INFO  L168              Benchmark]: BlockEncodingV2 took 357.45 ms. Allocated memory is still 1.6 GB. Free memory was 852.3 MB in the beginning and 609.9 MB in the end (delta: 242.4 MB). Peak memory consumption was 242.4 MB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,189 INFO  L168              Benchmark]: BuchiAutomizer took 619915.32 ms. Allocated memory was 1.6 GB in the beginning and 6.3 GB in the end (delta: 4.7 GB). Free memory was 609.9 MB in the beginning and 4.0 GB in the end (delta: -3.4 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-05-30 19:57:46,192 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10397 locations, 37761 edges
  - StatisticsResult: Encoded RCFG
    10212 locations, 36684 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 76.28 ms. Allocated memory is still 514.9 MB. Free memory was 456.2 MB in the beginning and 448.0 MB in the end (delta: 8.2 MB). Peak memory consumption was 8.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 48.40 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 442.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.16 ms. Allocated memory is still 514.9 MB. Free memory was 441.2 MB in the beginning and 439.9 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 594.75 ms. Allocated memory is still 514.9 MB. Free memory was 439.9 MB in the beginning and 457.3 MB in the end (delta: -17.4 MB). Peak memory consumption was 97.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.02 ms. Allocated memory is still 514.9 MB. Free memory was 457.3 MB in the beginning and 450.8 MB in the end (delta: 6.5 MB). Peak memory consumption was 6.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 6391.89 ms. Allocated memory was 514.9 MB in the beginning and 1.6 GB in the end (delta: 1.1 GB). Free memory was 450.8 MB in the beginning and 852.3 MB in the end (delta: -401.5 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 357.45 ms. Allocated memory is still 1.6 GB. Free memory was 852.3 MB in the beginning and 609.9 MB in the end (delta: 242.4 MB). Peak memory consumption was 242.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 619915.32 ms. Allocated memory was 1.6 GB in the beginning and 6.3 GB in the end (delta: 4.7 GB). Free memory was 609.9 MB in the beginning and 4.0 GB in the end (delta: -3.4 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    6 locations, 20 edges
  - StatisticsResult: Initial RCFG
    1813 locations, 2285 edges
  - StatisticsResult: BuchiProgram size
    10397 locations, 37761 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 49 terminating modules (49 trivial, 0 deterministic, 0 nondeterministic). 49 modules have a trivial ranking function, the largest among these consists of 71 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 619.8s and 50 iterations.  TraceHistogramMax:12. Analysis of lassos took 23.3s. Construction of modules took 456.6s. BÃ¼chi inclusion checks took 98.1s. Highest rank in rank-based complementation 0. Minimization of det autom 49. Minimization of nondet autom 0. Automata minimization 19.5s AutomataMinimizationTime, 48 MinimizatonAttempts, 63344 StatesRemovedByMinimization, 40 NontrivialMinimizations. Non-live state removal took 17.1s Buchi closure took 0.0s. Biggest automaton had 154862 states and ocurred in iteration 41.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 505270 SDtfs, 1365171 SDslu, 1487746 SDs, 0 SdLazy, 3360264 SolverSat, 160236 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 456.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI5 SFLT0 conc4 concLT0 SILN0 SILU40 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( []( (call_(success_CorralChoice_EPXCrowdsale2)orral(success_CorralChoice_EPXCrowdsale2)hoice_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale1) ==> ( <>(success_beneficiaryMultiSigWithdraw_EPX(success_CorralChoice_EPXCrowdsale2)rowdsale0) ) ) ) && ( <>(success_CorralChoice_EPXCrowdsale2) ) )&& ! ( ( <>(success_CorralChoice_EPXCrowdsale0) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
